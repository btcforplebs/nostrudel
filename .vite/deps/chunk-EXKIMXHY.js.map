{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/applesauce-content@0.7.0_typescript@5.6.2/node_modules/applesauce-content/dist/nast/eol-metadata.js", "../../node_modules/.pnpm/applesauce-content@0.7.0_typescript@5.6.2/node_modules/applesauce-content/dist/nast/truncate.js"],
  "sourcesContent": ["export function eolMetadata() {\n    return (tree) => {\n        for (let i = 0; i < tree.children.length; i++) {\n            // const node = tree.children[i];\n            const next = tree.children[i + 1];\n            if (next && next.type === \"text\" && next.value.startsWith(\"\\n\")) {\n                next.data = next.data || {};\n                next.data.eol = true;\n            }\n        }\n    };\n}\n", "export function truncateContent(tree, maxLength = 256) {\n    let length = 0;\n    for (let i = 0; i < tree.children.length; i++) {\n        const node = tree.children[i];\n        switch (node.type) {\n            case \"hashtag\":\n                length += 1 + node.hashtag.length;\n                break;\n            case \"mention\":\n                // guess user names are about 10 long\n                length += 10;\n                break;\n            case \"cashu\":\n                length += node.raw.length;\n                break;\n            case \"gallery\":\n                length += node.links.reduce((t, l) => t + l.length, 0);\n                break;\n            case \"link\":\n            case \"text\":\n                length += node.value.length;\n                break;\n            case \"emoji\":\n                length += 1;\n                break;\n        }\n        if (length > maxLength) {\n            if (node.type === \"text\") {\n                const children = i > 0 ? tree.children.slice(0, i) : [];\n                const chunkLength = node.value.length - (length - maxLength);\n                // find the nearest newline\n                const newLines = node.value.matchAll(/\\n/g);\n                for (const match of newLines) {\n                    if (match.index && match.index > chunkLength) {\n                        children.push({ type: \"text\", value: node.value.slice(0, match.index) });\n                        return { ...tree, children, truncated: true };\n                    }\n                }\n                // just cut the string\n                children.push({ type: \"text\", value: node.value.slice(0, maxLength - length) });\n                return { ...tree, children, truncated: true };\n            }\n            else\n                return { ...tree, children: tree.children.slice(0, i), truncated: true };\n        }\n    }\n    return tree;\n}\n"],
  "mappings": ";AAAO,SAAS,cAAc;AAC1B,SAAO,CAAC,SAAS;AACb,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAE3C,YAAM,OAAO,KAAK,SAAS,IAAI,CAAC;AAChC,UAAI,QAAQ,KAAK,SAAS,UAAU,KAAK,MAAM,WAAW,IAAI,GAAG;AAC7D,aAAK,OAAO,KAAK,QAAQ,CAAC;AAC1B,aAAK,KAAK,MAAM;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACXO,SAAS,gBAAgB,MAAM,YAAY,KAAK;AACnD,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC3C,UAAM,OAAO,KAAK,SAAS,CAAC;AAC5B,YAAQ,KAAK,MAAM;AAAA,MACf,KAAK;AACD,kBAAU,IAAI,KAAK,QAAQ;AAC3B;AAAA,MACJ,KAAK;AAED,kBAAU;AACV;AAAA,MACJ,KAAK;AACD,kBAAU,KAAK,IAAI;AACnB;AAAA,MACJ,KAAK;AACD,kBAAU,KAAK,MAAM,OAAO,CAAC,GAAG,MAAM,IAAI,EAAE,QAAQ,CAAC;AACrD;AAAA,MACJ,KAAK;AAAA,MACL,KAAK;AACD,kBAAU,KAAK,MAAM;AACrB;AAAA,MACJ,KAAK;AACD,kBAAU;AACV;AAAA,IACR;AACA,QAAI,SAAS,WAAW;AACpB,UAAI,KAAK,SAAS,QAAQ;AACtB,cAAM,WAAW,IAAI,IAAI,KAAK,SAAS,MAAM,GAAG,CAAC,IAAI,CAAC;AACtD,cAAM,cAAc,KAAK,MAAM,UAAU,SAAS;AAElD,cAAM,WAAW,KAAK,MAAM,SAAS,KAAK;AAC1C,mBAAW,SAAS,UAAU;AAC1B,cAAI,MAAM,SAAS,MAAM,QAAQ,aAAa;AAC1C,qBAAS,KAAK,EAAE,MAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,GAAG,MAAM,KAAK,EAAE,CAAC;AACvE,mBAAO,EAAE,GAAG,MAAM,UAAU,WAAW,KAAK;AAAA,UAChD;AAAA,QACJ;AAEA,iBAAS,KAAK,EAAE,MAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,GAAG,YAAY,MAAM,EAAE,CAAC;AAC9E,eAAO,EAAE,GAAG,MAAM,UAAU,WAAW,KAAK;AAAA,MAChD;AAEI,eAAO,EAAE,GAAG,MAAM,UAAU,KAAK,SAAS,MAAM,GAAG,CAAC,GAAG,WAAW,KAAK;AAAA,IAC/E;AAAA,EACJ;AACA,SAAO;AACX;",
  "names": []
}
