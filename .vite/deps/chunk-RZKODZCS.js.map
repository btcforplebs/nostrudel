{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/index.js", "../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/simple.js", "../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/profile.js", "../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/mailboxes.js", "../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/reactions.js", "../../node_modules/.pnpm/applesauce-core@0.7.0_typescript@5.6.2/node_modules/applesauce-core/dist/queries/thread.js"],
  "sourcesContent": ["export * from \"./simple.js\";\nexport * from \"./profile.js\";\nexport * from \"./mailboxes.js\";\nexport * from \"./reactions.js\";\nexport * from \"./thread.js\";\n", "import stringify from \"json-stringify-deterministic\";\nimport { getReplaceableUID } from \"../helpers/event.js\";\n/** Creates a Query that returns a single event or undefined */\nexport function SingleEventQuery(uid) {\n    return {\n        key: uid,\n        run: (events) => events.event(uid),\n    };\n}\n/** Creates a Query that returns a multiple events in a map */\nexport function MultipleEventsQuery(uids) {\n    return {\n        key: uids.join(\",\"),\n        run: (events) => events.events(uids),\n    };\n}\n/** Creates a Query returning the latest version of a replaceable event */\nexport function ReplaceableQuery(kind, pubkey, d) {\n    return {\n        key: getReplaceableUID(kind, pubkey, d),\n        run: (events) => events.replaceable(kind, pubkey, d),\n    };\n}\n/** Creates a Query that returns an array of sorted events matching the filters */\nexport function TimelineQuery(filters) {\n    return {\n        key: stringify(filters),\n        run: (events) => events.timeline(Array.isArray(filters) ? filters : [filters]),\n    };\n}\n/** Creates a Query that returns a directory of events by their UID */\nexport function ReplaceableSetQuery(pointers) {\n    const cords = pointers.map((pointer) => getReplaceableUID(pointer.kind, pointer.pubkey, pointer.identifier));\n    return {\n        key: stringify(pointers),\n        run: (events) => events.events(cords),\n    };\n}\n", "import { kinds } from \"nostr-tools\";\nimport { getProfileContent } from \"../helpers/profile.js\";\nexport function ProfileQuery(pubkey) {\n    return {\n        key: pubkey,\n        run: (events) => {\n            return events.replaceable(kinds.Metadata, pubkey).map((event) => event && getProfileContent(event));\n        },\n    };\n}\n", "import { kinds } from \"nostr-tools\";\nimport { getInboxes, getOutboxes } from \"../helpers/mailboxes.js\";\nexport function MailboxesQuery(pubkey) {\n    return {\n        key: pubkey,\n        run: (events) => events.replaceable(kinds.RelayList, pubkey).map((event) => event && {\n            inboxes: getInboxes(event),\n            outboxes: getOutboxes(event),\n        }),\n    };\n}\n", "import { kinds } from \"nostr-tools\";\nimport { getEventUID, isReplaceable } from \"../helpers/event.js\";\n/** Creates a query that returns all reactions to an event (supports replaceable events) */\nexport function ReactionsQuery(event) {\n    return {\n        key: getEventUID(event),\n        run: (events) => events.timeline(isReplaceable(event.kind)\n            ? [\n                { kinds: [kinds.Reaction], \"#e\": [event.id] },\n                { kinds: [kinds.Reaction], \"#a\": [getEventUID(event)] },\n            ]\n            : [\n                {\n                    kinds: [kinds.Reaction],\n                    \"#e\": [event.id],\n                },\n            ]),\n    };\n}\n", "import { kinds } from \"nostr-tools\";\nimport { getNip10References } from \"../helpers/threading.js\";\nimport { getCoordinateFromAddressPointer, isAddressPointer } from \"../helpers/pointers.js\";\nimport { getEventUID } from \"../helpers/event.js\";\nconst defaultOptions = {\n    kinds: [kinds.ShortTextNote],\n};\nexport function ThreadQuery(root, opts) {\n    const parentReferences = new Map();\n    const items = new Map();\n    const { kinds } = { ...defaultOptions, ...opts };\n    let rootUID = \"\";\n    const rootFilter = {};\n    const replyFilter = { kinds };\n    if (isAddressPointer(root)) {\n        rootUID = getCoordinateFromAddressPointer(root);\n        rootFilter.kinds = [root.kind];\n        rootFilter.authors = [root.pubkey];\n        rootFilter[\"#d\"] = [root.identifier];\n        replyFilter[\"#a\"] = [rootUID];\n    }\n    else if (typeof root === \"string\") {\n        rootUID = root;\n        rootFilter.ids = [root];\n        replyFilter[\"#e\"] = [root];\n    }\n    else {\n        rootUID = root.id;\n        rootFilter.ids = [root.id];\n        replyFilter[\"#e\"] = [root.id];\n    }\n    return {\n        key: `${rootUID}-${kinds.join(\",\")}`,\n        run: (events) => events.stream([rootFilter, replyFilter]).map((event) => {\n            if (!items.has(getEventUID(event))) {\n                const refs = getNip10References(event);\n                const replies = parentReferences.get(getEventUID(event)) || new Set();\n                const item = { event, refs, replies };\n                for (const child of replies) {\n                    child.parent = item;\n                }\n                // add item to parent\n                if (refs.reply?.e || refs.reply?.a) {\n                    let uid = refs.reply.e ? refs.reply.e.id : getCoordinateFromAddressPointer(refs.reply.a);\n                    item.parent = items.get(uid);\n                    if (item.parent) {\n                        item.parent.replies.add(item);\n                    }\n                    else {\n                        // parent isn't created yet, store ref for later\n                        let set = parentReferences.get(uid);\n                        if (!set) {\n                            set = new Set();\n                            parentReferences.set(uid, set);\n                        }\n                        set.add(item);\n                    }\n                }\n                // add item to map\n                items.set(getEventUID(event), item);\n            }\n            return { root: items.get(rootUID), all: items };\n        }),\n    };\n}\n"],
  "mappings": "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",
  "names": ["stringify"]
}
