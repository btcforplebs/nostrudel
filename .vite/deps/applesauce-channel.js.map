{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/applesauce-channel@0.7.0_typescript@5.6.2/node_modules/applesauce-channel/dist/helpers/channel.js", "../../node_modules/.pnpm/applesauce-channel@0.7.0_typescript@5.6.2/node_modules/applesauce-channel/dist/queries/channel.js"],
  "sourcesContent": ["export const ChannelMetadataSymbol = Symbol.for(\"channel-metadata\");\nfunction parseChannelMetadataContent(channel) {\n    const metadata = JSON.parse(channel.content);\n    if (metadata.name === undefined)\n        throw new Error(\"Missing name\");\n    if (metadata.about === undefined)\n        throw new Error(\"Missing about\");\n    if (metadata.picture === undefined)\n        throw new Error(\"Missing picture\");\n    if (metadata.relays && !Array.isArray(metadata.relays))\n        throw new Error(\"Invalid relays\");\n    return metadata;\n}\n/** Gets the parsed metadata on a channel creation or channel metadata event */\nexport function getChannelMetadataContent(channel) {\n    let metadata = channel[ChannelMetadataSymbol];\n    if (!metadata)\n        metadata = channel[ChannelMetadataSymbol] = parseChannelMetadataContent(channel);\n    return metadata;\n}\n/** gets the EventPointer for a channel message or metadata event */\nexport function getChannelPointer(event) {\n    const tag = event.tags.find((t) => t[0] === \"e\" && t[1]);\n    if (!tag)\n        return undefined;\n    return tag[2] ? { id: tag[1], relays: [tag[2]] } : { id: tag[1] };\n}\n", "import { kinds } from \"nostr-tools\";\nimport { getChannelMetadataContent } from \"../helpers/channel.js\";\nfunction safeParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (error) {\n        return undefined;\n    }\n}\n/** Creates a query that returns the latest parsed metadata */\nexport function ChannelMetadataQuery(channel) {\n    return {\n        key: channel.id,\n        run: (events) => {\n            const filters = [\n                { ids: [channel.id] },\n                { kinds: [kinds.ChannelMetadata], \"#e\": [channel.id], authors: [channel.pubkey] },\n            ];\n            let latest = channel;\n            return events.stream(filters).map((event) => {\n                try {\n                    if (event.pubkey === latest.pubkey && event.created_at > latest.created_at) {\n                        latest = event;\n                    }\n                    return getChannelMetadataContent(latest);\n                }\n                catch (error) {\n                    return undefined;\n                }\n            });\n        },\n    };\n}\n/** Creates a query that returns a map of hidden messages Map<id, reason> */\nexport function ChannelHiddenQuery(channel, authors = []) {\n    return {\n        key: channel.id,\n        run: (events) => {\n            const hidden = new Map();\n            return events\n                .stream([{ kinds: [kinds.ChannelHideMessage], \"#e\": [channel.id], authors: [channel.pubkey, ...authors] }])\n                .map((event) => {\n                const reason = safeParse(event.content)?.reason;\n                for (const tag of event.tags) {\n                    if (tag[0] === \"e\" && tag[1])\n                        hidden.set(tag[1], reason ?? \"\");\n                }\n                return hidden;\n            });\n        },\n    };\n}\n/** Creates a query that returns a map of muted users Map<pubkey, reason> */\nexport function ChannelMutedQuery(channel, authors = []) {\n    return {\n        key: channel.id + authors.join(\",\"),\n        run: (events) => {\n            const muted = new Map();\n            return events\n                .stream([{ kinds: [kinds.ChannelMuteUser], \"#e\": [channel.id], authors: [channel.pubkey, ...authors] }])\n                .map((event) => {\n                const reason = safeParse(event.content)?.reason;\n                for (const tag of event.tags) {\n                    if (tag[0] === \"p\" && tag[1])\n                        muted.set(tag[1], reason ?? \"\");\n                }\n                return muted;\n            });\n        },\n    };\n}\n/** Creates a query that returns all messages in a channel */\nexport function ChannelMessagesQuery(channel) {\n    return {\n        key: channel.id,\n        run: (events) => events.timeline([{ kinds: [kinds.ChannelMessage], \"#e\": [channel.id] }]),\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
