export type EventTemplate = {
    created_at: number;
    kind: number;
    content: string;
    tags: string[][];
};
export type SignedEvent = EventTemplate & {
    id: string;
    sig: string;
    pubkey: string;
};
/** An async method used to sign nostr events */
export type Signer = (draft: EventTemplate) => Promise<SignedEvent>;
export declare const AUTH_EVENT_KIND = 24242;
export type BlobDescriptor = {
    /** @deprecated use uploaded instead */
    created?: number;
    uploaded: number;
    type?: string;
    sha256: string;
    size: number;
    url: string;
};
export declare class HTTPError extends Error {
    response: Response;
    status: number;
    body?: {
        message: string;
    };
    constructor(response: Response, body: {
        message: string;
    } | string);
    static handleErrorResponse(res: Response): Promise<void>;
}
type ServerType = string | URL;
type UploadType = Blob | File;
export declare class BlossomClient {
    server: URL;
    signer?: Signer;
    constructor(server: string | URL, signer?: Signer);
    static getFileSha256(file: UploadType): Promise<string>;
    static getGetAuth(signer: Signer, message?: string, expiration?: number): Promise<SignedEvent>;
    static getUploadAuth(file: UploadType, signer: Signer, message?: string, expiration?: number): Promise<SignedEvent>;
    static getDeleteAuth(hash: string, signer: Signer, message?: string, expiration?: number): Promise<SignedEvent>;
    static getListAuth(signer: Signer, message?: string, expiration?: number): Promise<SignedEvent>;
    getGetAuth(message?: string, expiration?: number): Promise<SignedEvent>;
    getUploadAuth(file: UploadType, message?: string, expiration?: number): Promise<SignedEvent>;
    getDeleteAuth(hash: string, message?: string, expiration?: number): Promise<SignedEvent>;
    getListAuth(message?: string, expiration?: number): Promise<SignedEvent>;
    static encodeAuthorizationHeader(event: SignedEvent): string;
    static getBlob(server: ServerType, hash: string, auth?: SignedEvent): Promise<Blob>;
    getBlob(hash: string, auth?: SignedEvent | boolean): Promise<Blob>;
    static hasBlob(server: ServerType, hash: string): Promise<boolean>;
    hasBlob(hash: string): Promise<boolean>;
    static listBlobs(server: ServerType, pubkey: string, opts?: {
        since?: number;
        until?: number;
    }, auth?: SignedEvent): Promise<BlobDescriptor[]>;
    listBlobs(pubkey: string, opts?: {
        since?: number;
        until?: number;
    }, auth?: SignedEvent | boolean): Promise<BlobDescriptor[]>;
    static deleteBlob(server: ServerType, hash: string, auth?: SignedEvent): Promise<string>;
    deleteBlob(hash: string, auth?: SignedEvent | boolean): Promise<string>;
    static uploadBlob(server: ServerType, file: UploadType, auth?: SignedEvent): Promise<BlobDescriptor>;
    uploadBlob(file: File, auth?: SignedEvent | boolean): Promise<BlobDescriptor>;
}
export {};
