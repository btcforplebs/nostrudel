import type { Event, Filter, NostrEvent } from "nostr-tools";
import type { NostrIDB } from "./schema.js";
import { IndexCache } from "../cache/index-cache.js";
export declare function queryForPubkeys(db: NostrIDB, authors?: Filter["authors"], indexCache?: IndexCache): Set<string> | Promise<Set<string>>;
export declare function queryForTag(db: NostrIDB, tag: string, values: string[], indexCache?: IndexCache): Set<string> | Promise<Set<string>>;
export declare function queryForKinds(db: NostrIDB, kinds?: Filter["kinds"], indexCache?: IndexCache): Set<string> | Promise<Set<string>>;
export declare function queryForTime(db: NostrIDB, since: number | undefined, until: number | undefined): Promise<string[]>;
export declare function getIdsForFilter(db: NostrIDB, filter: Filter, indexCache?: IndexCache): Promise<Set<string>>;
export declare function getIdsForFilters(db: NostrIDB, filters: Filter[], indexCache?: IndexCache): Promise<Set<string>>;
export declare function getEventsForFilter(db: NostrIDB, filter: Filter, indexCache?: IndexCache, eventMap?: Map<string, NostrEvent>): Promise<Event[]>;
export declare function getEventsForFilters(db: NostrIDB, filters: Filter[], indexCache?: IndexCache, eventMap?: Map<string, NostrEvent>): Promise<Event[]>;
export declare function countEventsForFilter(db: NostrIDB, filter: Filter, indexCache?: IndexCache): Promise<number>;
export declare function countEventsForFilters(db: NostrIDB, filters: Filter[], indexCache?: IndexCache): Promise<number>;
