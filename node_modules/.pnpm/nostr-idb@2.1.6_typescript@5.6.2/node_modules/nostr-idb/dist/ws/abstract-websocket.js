export class AbstractWebSocket extends EventTarget {
    // unused properties
    binaryType = "blob";
    bufferedAmount = 0;
    extensions = "";
    protocol = "";
    url;
    addEventListener;
    removeEventListener;
    CONNECTING = WebSocket.CONNECTING;
    OPEN = WebSocket.OPEN;
    CLOSING = WebSocket.CLOSING;
    CLOSED = WebSocket.CLOSED;
    onclose;
    onerror;
    onmessage;
    onopen;
    readyState;
    backend;
    constructor(url, backend) {
        super();
        this.url = String(url);
        this.backend = backend;
        this.backend.rx((message) => {
            const event = new MessageEvent("message", {
                data: JSON.stringify(message),
            });
            if (this.onmessage)
                this.onmessage(event);
            this.dispatchEvent(event);
        });
    }
    close(code, reason) {
        // this.readyState = this.CLOSED
        // const event = new CloseEvent("close", { wasClean: true });
        // this.onclose?.(event);
        // this.dispatchEvent(event)
    }
    send(data) {
        if (typeof data !== "string")
            throw new Error("AbstractWebSocket only accepts strings");
        const message = JSON.parse(data);
        if (Array.isArray(message))
            this.backend.tx(message);
    }
}
