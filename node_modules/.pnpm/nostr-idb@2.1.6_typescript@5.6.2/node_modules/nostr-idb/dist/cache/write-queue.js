import { matchFilters } from "nostr-tools";
import { addEvents, getEventUID, updateUsed } from "../database/ingest.js";
import { logger } from "../debug.js";
const log = logger.extend("writeQueue");
export class WriteQueue {
    db;
    queuedIds = new Set();
    eventQueue = [];
    lastUsedQueue = new Set();
    constructor(db) {
        this.db = db;
    }
    addEvent(event) {
        if (this.queuedIds.has(event.id))
            return;
        this.eventQueue.push(event);
        this.queuedIds.add(event.id);
        this.useEvent(event);
    }
    addEvents(events) {
        const arr = events.filter((e) => !this.queuedIds.has(e.id));
        if (arr.length === 0)
            return;
        this.eventQueue.push(...arr);
        this.useEvents(arr);
    }
    useEvent(event) {
        this.lastUsedQueue.add(getEventUID(event));
    }
    useEvents(events) {
        for (const event of events)
            this.lastUsedQueue.add(getEventUID(event));
    }
    matchPending(filters) {
        return this.eventQueue.filter((e) => matchFilters(filters, e));
    }
    async flush(count = 1000) {
        if (this.eventQueue.length > 0) {
            const events = [];
            for (let i = 0; i < count; i++) {
                const event = this.eventQueue.shift();
                if (!event)
                    break;
                events.push(event);
                this.queuedIds.delete(event.id);
            }
            await addEvents(this.db, events);
            log(`Wrote ${events.length} to database`);
            if (this.eventQueue.length > 0)
                log(`${this.eventQueue.length} left`);
        }
        if (this.lastUsedQueue.size > 0) {
            await updateUsed(this.db, this.lastUsedQueue);
            this.lastUsedQueue.clear();
        }
    }
    clear() {
        this.eventQueue = [];
    }
}
