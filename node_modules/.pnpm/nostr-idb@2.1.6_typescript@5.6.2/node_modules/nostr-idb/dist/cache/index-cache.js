import { getEventTags } from "../database/ingest.js";
import { logger } from "../debug.js";
const log = logger.extend("cache:indexes");
class Index extends Set {
    type;
    key;
    constructor(values, type, key) {
        super(values);
        this.type = type;
        this.key = key;
    }
}
export class IndexCache {
    kinds = new Map();
    pubkeys = new Map();
    tags = new Map();
    get count() {
        return this.kinds.size + this.pubkeys.size + this.tags.size;
    }
    max = 1000;
    lastUsed = [];
    useIndex(index) {
        const i = this.lastUsed.indexOf(index);
        if (i !== -1)
            this.lastUsed.splice(i, i + 1);
        this.lastUsed.push(index);
    }
    getKindIndex(kind) {
        const index = this.kinds.get(kind);
        if (index)
            this.useIndex(index);
        return index;
    }
    setKindIndex(kind, uids) {
        const index = new Index(uids, "kind", kind);
        this.kinds.set(kind, index);
        this.useIndex(index);
        this.pruneIndexes();
    }
    getPubkeyIndex(pubkey) {
        const index = this.pubkeys.get(pubkey);
        if (index)
            this.useIndex(index);
        return index;
    }
    setPubkeyIndex(pubkey, uids) {
        const index = new Index(uids, "pubkey", pubkey);
        this.pubkeys.set(pubkey, index);
        this.useIndex(index);
        this.pruneIndexes();
    }
    getTagIndex(tagAndValue) {
        const index = this.tags.get(tagAndValue);
        if (index)
            this.useIndex(index);
        return index;
    }
    setTagIndex(tagAndValue, uids) {
        const index = new Index(uids, "tag", tagAndValue);
        this.tags.set(tagAndValue, index);
        this.useIndex(index);
        this.pruneIndexes();
    }
    addEventToIndexes(event) {
        this.getKindIndex(event.kind)?.add(event.id);
        this.getPubkeyIndex(event.pubkey)?.add(event.id);
        const tags = getEventTags(event);
        for (const tag of tags) {
            this.getTagIndex(tag)?.add(event.id);
        }
    }
    pruneIndexes() {
        while (this.lastUsed.length > 0 && this.lastUsed.length > this.max) {
            const index = this.lastUsed.shift();
            if (!index)
                return;
            log(`Forgetting ${index.type}:${index.key}`);
            switch (index.type) {
                case "kind":
                    this.kinds.delete(index.key);
                    break;
                case "pubkey":
                    this.pubkeys.delete(index.key);
                    break;
                case "tag":
                    this.tags.delete(index.key);
                    break;
            }
        }
    }
}
