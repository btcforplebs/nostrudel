import type { Event } from "nostr-tools";
declare class Index<T> extends Set<string> {
    type: "kind" | "pubkey" | "tag";
    key: T;
    constructor(values: Iterable<string> | null, type: "kind" | "pubkey" | "tag", key: T);
}
export declare class IndexCache {
    kinds: Map<number, Index<number>>;
    pubkeys: Map<string, Index<string>>;
    tags: Map<string, Index<string>>;
    get count(): number;
    max: number;
    lastUsed: Index<any>[];
    private useIndex;
    getKindIndex(kind: number): Index<number> | undefined;
    setKindIndex(kind: number, uids: Iterable<string>): void;
    getPubkeyIndex(pubkey: string): Index<string> | undefined;
    setPubkeyIndex(pubkey: string, uids: Iterable<string>): void;
    getTagIndex(tagAndValue: string): Index<string> | undefined;
    setTagIndex(tagAndValue: string, uids: Iterable<string>): void;
    addEventToIndexes(event: Event): void;
    pruneIndexes(): void;
}
export {};
