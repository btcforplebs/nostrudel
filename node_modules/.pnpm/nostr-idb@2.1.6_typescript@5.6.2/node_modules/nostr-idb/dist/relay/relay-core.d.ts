import { Event, Filter } from "nostr-tools";
import { NostrIDB } from "../database/schema.js";
export type SubscriptionOptions = {
    id?: string;
    onevent?: (event: Event) => void;
    oneose?: () => void;
    onclose?: (reason: string) => void;
};
export type Subscription = SubscriptionOptions & {
    id: string;
    filters: Filter[];
    close(message?: string): void;
    fire(): void;
};
export type RelayCoreOptions = {
    /** Defaults to 1000 */
    batchWrite?: number;
    /** Defaults to 100 */
    writeInterval?: number;
    /** number of indexes to cache in memory. defaults to 1000 */
    cacheIndexes?: number;
    /** how often to prune the database */
    pruneInterval?: number;
    /** Maximum number of events to store in the database */
    maxEvents?: number;
};
/** Main class that implements the relay logic */
export declare class RelayCore {
    private options;
    private writeInterval?;
    private pruneInterval?;
    get running(): boolean;
    private eventMap;
    private writeQueue;
    private indexCache;
    db: NostrIDB;
    baseEoseTimeout: number;
    private subscriptions;
    constructor(db: NostrIDB, opts?: RelayCoreOptions);
    start(): Promise<void>;
    stop(): Promise<void>;
    publish(event: Event): Promise<string>;
    count(filters: Filter[]): Promise<number>;
    private addToEventMaps;
    private executeSubscription;
    subscribe(filters: Filter[], options: Partial<SubscriptionOptions>): Subscription;
    unsubscribe(id: string): void;
}
