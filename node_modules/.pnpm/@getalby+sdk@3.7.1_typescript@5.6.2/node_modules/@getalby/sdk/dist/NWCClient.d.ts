import { Relay, Event, UnsignedEvent } from "nostr-tools";
import { NWCAuthorizationUrlOptions } from "./types";
type WithDTag = {
    dTag: string;
};
type WithOptionalId = {
    id?: string;
};
type Nip47SingleMethod = "get_info" | "get_balance" | "make_invoice" | "pay_invoice" | "pay_keysend" | "lookup_invoice" | "list_transactions" | "sign_message";
type Nip47MultiMethod = "multi_pay_invoice" | "multi_pay_keysend";
export type Nip47Method = Nip47SingleMethod | Nip47MultiMethod;
export type Nip47Capability = Nip47Method | "notifications";
export type Nip47GetInfoResponse = {
    alias: string;
    color: string;
    pubkey: string;
    network: string;
    block_height: number;
    block_hash: string;
    methods: Nip47Method[];
    notifications?: Nip47NotificationType[];
};
export type Nip47GetBalanceResponse = {
    balance: number;
};
export type Nip47PayResponse = {
    preimage: string;
};
export type Nip47MultiPayInvoiceRequest = {
    invoices: (Nip47PayInvoiceRequest & WithOptionalId)[];
};
export type Nip47MultiPayKeysendRequest = {
    keysends: (Nip47PayKeysendRequest & WithOptionalId)[];
};
export type Nip47MultiPayInvoiceResponse = {
    invoices: ({
        invoice: Nip47PayInvoiceRequest;
    } & Nip47PayResponse & WithDTag)[];
    errors: [];
};
export type Nip47MultiPayKeysendResponse = {
    keysends: ({
        keysend: Nip47PayKeysendRequest;
    } & Nip47PayResponse & WithDTag)[];
    errors: [];
};
export interface Nip47ListTransactionsRequest {
    from?: number;
    until?: number;
    limit?: number;
    offset?: number;
    unpaid?: boolean;
    type?: "incoming" | "outgoing";
}
export type Nip47ListTransactionsResponse = {
    transactions: Nip47Transaction[];
};
export type Nip47Transaction = {
    type: string;
    invoice: string;
    description: string;
    description_hash: string;
    preimage: string;
    payment_hash: string;
    amount: number;
    fees_paid: number;
    settled_at: number;
    created_at: number;
    expires_at: number;
    metadata?: Record<string, unknown>;
};
export type Nip47NotificationType = Nip47Notification["notification_type"];
export type Nip47Notification = {
    notification_type: "payment_received";
    notification: Nip47Transaction;
} | {
    notification_type: "payment_sent";
    notification: Nip47Transaction;
};
export type Nip47PayInvoiceRequest = {
    invoice: string;
    amount?: number;
};
export type Nip47PayKeysendRequest = {
    amount: number;
    pubkey: string;
    preimage?: string;
    tlv_records?: {
        type: number;
        value: string;
    }[];
};
export type Nip47MakeInvoiceRequest = {
    amount: number;
    description?: string;
    description_hash?: string;
    expiry?: number;
    metadata?: unknown;
};
export type Nip47LookupInvoiceRequest = {
    payment_hash?: string;
    invoice?: string;
};
export type Nip47SignMessageRequest = {
    message: string;
};
export type Nip47SignMessageResponse = {
    message: string;
    signature: string;
};
export interface NWCOptions {
    authorizationUrl?: string;
    relayUrl: string;
    walletPubkey: string;
    secret?: string;
    lud16?: string;
}
export declare class Nip47Error extends Error {
    /**
     * @deprecated please use message. Deprecated since v3.3.2. Will be removed in v4.0.0.
     */
    error: string;
    code: string;
    constructor(message: string, code: string);
}
/**
 * A NIP-47 response was received, but with an error code (see https://github.com/nostr-protocol/nips/blob/master/47.md#error-codes)
 */
export declare class Nip47WalletError extends Nip47Error {
}
export declare class Nip47TimeoutError extends Nip47Error {
}
export declare class Nip47PublishTimeoutError extends Nip47TimeoutError {
}
export declare class Nip47ReplyTimeoutError extends Nip47TimeoutError {
}
export declare class Nip47PublishError extends Nip47Error {
}
export declare class Nip47ResponseDecodingError extends Nip47Error {
}
export declare class Nip47ResponseValidationError extends Nip47Error {
}
export declare class Nip47UnexpectedResponseError extends Nip47Error {
}
export declare class Nip47NetworkError extends Nip47Error {
}
export declare const NWCs: Record<string, NWCOptions>;
export type NewNWCClientOptions = {
    providerName?: string;
    authorizationUrl?: string;
    relayUrl?: string;
    secret?: string;
    walletPubkey?: string;
    nostrWalletConnectUrl?: string;
};
export declare class NWCClient {
    relay: Relay;
    relayUrl: string;
    secret: string | undefined;
    lud16: string | undefined;
    walletPubkey: string;
    options: NWCOptions;
    static parseWalletConnectUrl(walletConnectUrl: string): NWCOptions;
    static withNewSecret(options?: ConstructorParameters<typeof NWCClient>[0]): NWCClient;
    constructor(options?: NewNWCClientOptions);
    get nostrWalletConnectUrl(): string;
    getNostrWalletConnectUrl(includeSecret?: boolean): string;
    get connected(): boolean;
    get publicKey(): string;
    getPublicKey(): Promise<string>;
    signEvent(event: UnsignedEvent): Promise<Event>;
    getEventHash(event: Event): string;
    close(): void;
    encrypt(pubkey: string, content: string): Promise<string>;
    decrypt(pubkey: string, content: string): Promise<string>;
    getAuthorizationUrl(options?: NWCAuthorizationUrlOptions): URL;
    initNWC(options?: NWCAuthorizationUrlOptions): Promise<unknown>;
    /**
     * @deprecated please use getWalletServiceInfo. Deprecated since v3.5.0. Will be removed in v4.0.0.
     */
    getWalletServiceSupportedMethods(): Promise<Nip47Capability[]>;
    getWalletServiceInfo(): Promise<{
        capabilities: Nip47Capability[];
        notifications: Nip47NotificationType[];
    }>;
    getInfo(): Promise<Nip47GetInfoResponse>;
    getBalance(): Promise<Nip47GetBalanceResponse>;
    payInvoice(request: Nip47PayInvoiceRequest): Promise<Nip47PayResponse>;
    payKeysend(request: Nip47PayKeysendRequest): Promise<Nip47PayResponse>;
    signMessage(request: Nip47SignMessageRequest): Promise<Nip47SignMessageResponse>;
    multiPayInvoice(request: Nip47MultiPayInvoiceRequest): Promise<Nip47MultiPayInvoiceResponse>;
    multiPayKeysend(request: Nip47MultiPayKeysendRequest): Promise<Nip47MultiPayKeysendResponse>;
    makeInvoice(request: Nip47MakeInvoiceRequest): Promise<Nip47Transaction>;
    lookupInvoice(request: Nip47LookupInvoiceRequest): Promise<Nip47Transaction>;
    listTransactions(request: Nip47ListTransactionsRequest): Promise<Nip47ListTransactionsResponse>;
    subscribeNotifications(onNotification: (notification: Nip47Notification) => void, notificationTypes?: Nip47NotificationType[]): Promise<() => void>;
    private executeNip47Request;
    private executeMultiNip47Request;
    private _checkConnected;
}
export {};
