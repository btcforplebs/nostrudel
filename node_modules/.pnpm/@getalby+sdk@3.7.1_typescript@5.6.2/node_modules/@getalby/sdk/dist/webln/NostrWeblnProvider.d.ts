import { Relay, Event, UnsignedEvent } from "nostr-tools";
import { GetBalanceResponse, KeysendArgs, RequestInvoiceArgs, SendPaymentResponse, SignMessageResponse, WebLNProvider, WebLNRequestMethod, LookupInvoiceArgs, LookupInvoiceResponse, WebLNMethod, MakeInvoiceResponse } from "@webbtc/webln-types";
import { GetInfoResponse } from "@webbtc/webln-types";
import { NWCAuthorizationUrlOptions } from "../types";
import { NWCClient, NWCOptions, NewNWCClientOptions, Nip47Transaction } from "../NWCClient";
export type Transaction = Nip47Transaction;
export type ListTransactionsResponse = {
    transactions: Transaction[];
};
export type ListTransactionsArgs = {
    from?: number;
    until?: number;
    limit?: number;
    offset?: number;
    unpaid?: boolean;
    type?: "incoming" | "outgoing";
};
export type SendMultiPaymentResponse = {
    payments: ({
        paymentRequest: string;
    } & SendPaymentResponse)[];
    errors: {
        paymentRequest: string;
        message: string;
    }[];
};
export type MultiKeysendResponse = {
    keysends: ({
        keysend: KeysendArgs;
    } & SendPaymentResponse)[];
    errors: {
        keysend: KeysendArgs;
        message: string;
    }[];
};
type NostrWebLNOptions = NWCOptions;
type Nip07Provider = {
    getPublicKey(): Promise<string>;
    signEvent(event: UnsignedEvent): Promise<Event>;
};
export declare class NostrWebLNProvider implements WebLNProvider, Nip07Provider {
    private _enabled;
    readonly client: NWCClient;
    readonly subscribers: Record<string, (payload: unknown) => void>;
    /**
     * @deprecated please use client.relay. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get relay(): Relay;
    /**
     * @deprecated please use client.relayUrl. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get relayUrl(): string;
    /**
     * @deprecated please use client.walletPubkey. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get walletPubkey(): string;
    get options(): NostrWebLNOptions;
    /**
     * @deprecated please use client.secret. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get secret(): string | undefined;
    static withNewSecret(options?: ConstructorParameters<typeof NostrWebLNProvider>[0]): NostrWebLNProvider;
    constructor(options?: NewNWCClientOptions);
    on(name: string, callback: () => void): void;
    notify(name: WebLNMethod, payload?: unknown): void;
    /**
     * @deprecated please use client.getNostrWalletConnectUrl. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    getNostrWalletConnectUrl(includeSecret?: boolean): string;
    /**
     * @deprecated please use client.nostrWalletConnectUrl. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get nostrWalletConnectUrl(): string;
    /**
     * @deprecated please use client.connected. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get connected(): boolean;
    /**
     * @deprecated please use getPublicKey(). Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    get publicKey(): string;
    getPublicKey(): Promise<string>;
    signEvent(event: UnsignedEvent): Promise<Event>;
    /**
     * @deprecated please use client.getEventHash. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    getEventHash(event: Event): string;
    enable(): Promise<void>;
    close(): void;
    /**
     * @deprecated please use client.encrypt. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    encrypt(pubkey: string, content: string): Promise<string>;
    /**
     * @deprecated please use client.decrypt. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    decrypt(pubkey: string, content: string): Promise<string>;
    /**
     * @deprecated please use client.getAuthorizationUrl. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    getAuthorizationUrl(options?: NWCAuthorizationUrlOptions): URL;
    /**
     * @deprecated please use client.initNWC. Deprecated since v3.2.3. Will be removed in v4.0.0.
     */
    initNWC(options?: NWCAuthorizationUrlOptions): Promise<unknown>;
    getInfo(): Promise<GetInfoResponse>;
    getBalance(): Promise<GetBalanceResponse>;
    sendPayment(invoice: string): Promise<SendPaymentResponse>;
    sendPaymentAsync(invoice: string): Promise<Record<string, never>>;
    keysend(args: KeysendArgs): Promise<SendPaymentResponse>;
    signMessage(message: string): Promise<SignMessageResponse>;
    makeInvoice(args: string | number | RequestInvoiceArgs): Promise<MakeInvoiceResponse>;
    lookupInvoice(args: LookupInvoiceArgs): Promise<LookupInvoiceResponse>;
    listTransactions(args: ListTransactionsArgs): Promise<ListTransactionsResponse>;
    sendMultiPayment(paymentRequests: string[]): Promise<SendMultiPaymentResponse>;
    multiKeysend(keysends: KeysendArgs[]): Promise<MultiKeysendResponse>;
    lnurl(lnurl: string): Promise<{
        status: "OK";
    } | {
        status: "ERROR";
        reason: string;
    }>;
    request(method: WebLNRequestMethod, args?: unknown): Promise<unknown>;
    verifyMessage(signature: string, message: string): Promise<void>;
    private checkEnabled;
}
export declare const NWC: typeof NostrWebLNProvider;
export {};
