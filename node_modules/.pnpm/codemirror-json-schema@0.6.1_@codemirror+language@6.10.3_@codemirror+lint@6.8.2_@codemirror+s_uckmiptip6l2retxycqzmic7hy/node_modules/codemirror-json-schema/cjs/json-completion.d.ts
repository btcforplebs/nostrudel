import { CompletionContext, CompletionResult } from "@codemirror/autocomplete";
type JSONCompletionOptions = {
    mode?: "json" | "json5";
};
export declare class JSONCompletion {
    private opts;
    private schema;
    constructor(opts: JSONCompletionOptions);
    doComplete(ctx: CompletionContext): CompletionResult | never[];
    private applySnippetCompletion;
    private getPropertyCompletions;
    private getInsertTextForProperty;
    private getInsertTextForGuessedValue;
    private getInsertTextForPlainText;
    private getInsertTextForValue;
    private getValueCompletions;
    private addSchemaValueCompletions;
    private addDefaultValueCompletions;
    private addEnumValueCompletions;
    private addBooleanValueCompletion;
    private addNullValueCompletion;
    private collectTypes;
    private getSchemas;
    private expandSchemaProperty;
    private getReferenceSchema;
    private getLabelForValue;
    private getValueFromLabel;
    private extendedRegExp;
}
/**
 * provides a JSON schema enabled autocomplete extension for codemirror
 * @group Codemirror Extensions
 */
export declare function jsonCompletion(opts?: JSONCompletionOptions): (ctx: CompletionContext) => CompletionResult | never[];
/**
 * provides a JSON schema enabled autocomplete extension for codemirror and json5
 * @group Codemirror Extensions
 */
export declare function json5Completion(opts?: Omit<JSONCompletionOptions, "mode">): (ctx: CompletionContext) => CompletionResult | never[];
export {};
