"use strict";
/**
 * Mimics the behavior of `json-source-map`'s `parseJSONDocument` function using codemirror EditorState... for json5
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseJSON5Document = exports.parseJSON5DocumentState = void 0;
const codemirror_json5_1 = require("codemirror-json5");
const json5_1 = __importDefault(require("json5"));
const state_1 = require("@codemirror/state");
const jsonPointers_js_1 = require("./jsonPointers.js");
/**
 * Return parsed data and json5 pointers for a given codemirror EditorState
 * @group Utilities
 */
function parseJSON5DocumentState(state) {
    let data = null;
    try {
        data = json5_1.default.parse(state.doc.toString());
        // return pointers regardless of whether JSON.parse succeeds
    }
    catch (_a) { }
    const pointers = (0, jsonPointers_js_1.getJsonPointers)(state, "json5");
    return { data, pointers };
}
exports.parseJSON5DocumentState = parseJSON5DocumentState;
/**
 * Mimics the behavior of `json-source-map`'s `parseJSONDocument` function, for json5!
 * @group Utilities
 */
function parseJSON5Document(jsonString) {
    const state = state_1.EditorState.create({
        doc: jsonString,
        extensions: [(0, codemirror_json5_1.json5)()],
    });
    return parseJSON5DocumentState(state);
}
exports.parseJSON5Document = parseJSON5Document;
