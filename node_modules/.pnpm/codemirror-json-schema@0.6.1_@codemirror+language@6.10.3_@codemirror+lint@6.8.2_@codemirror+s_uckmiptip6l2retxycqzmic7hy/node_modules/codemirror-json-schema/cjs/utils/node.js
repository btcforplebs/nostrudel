"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findNodeIndexInArrayNode = exports.getChildValueNode = exports.isPropertyNameNode = exports.isValueNode = exports.isPrimitiveValueNode = exports.isInvalidValueNode = exports.getWord = exports.stripSurroundingQuotes = exports.getNodeAtPosition = void 0;
const constants_js_1 = require("../constants.js");
const language_1 = require("@codemirror/language");
const getNodeAtPosition = (state, pos, side = -1) => {
    return (0, language_1.syntaxTree)(state).resolveInner(pos, side);
};
exports.getNodeAtPosition = getNodeAtPosition;
const stripSurroundingQuotes = (str) => {
    return str.replace(/^"(.*)"$/, "$1").replace(/^'(.*)'$/, "$1");
};
exports.stripSurroundingQuotes = stripSurroundingQuotes;
const getWord = (doc, node, stripQuotes = true) => {
    const word = node ? doc.sliceString(node.from, node.to) : "";
    return stripQuotes ? (0, exports.stripSurroundingQuotes)(word) : word;
};
exports.getWord = getWord;
const isInvalidValueNode = (node) => {
    var _a, _b;
    return (node.name === constants_js_1.TOKENS.INVALID &&
        (((_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) === constants_js_1.TOKENS.PROPERTY_NAME ||
            ((_b = node.prevSibling) === null || _b === void 0 ? void 0 : _b.name) === constants_js_1.TOKENS.PROPERTY_COLON));
};
exports.isInvalidValueNode = isInvalidValueNode;
const isPrimitiveValueNode = (node) => {
    return constants_js_1.PRIMITIVE_TYPES.includes(node.name) || (0, exports.isInvalidValueNode)(node);
};
exports.isPrimitiveValueNode = isPrimitiveValueNode;
const isValueNode = (node) => {
    return ([...constants_js_1.PRIMITIVE_TYPES, ...constants_js_1.COMPLEX_TYPES].includes(node.name) ||
        (0, exports.isInvalidValueNode)(node));
};
exports.isValueNode = isValueNode;
const isPropertyNameNode = (node) => {
    var _a, _b;
    return (node.name === constants_js_1.TOKENS.PROPERTY_NAME ||
        (node.name === constants_js_1.TOKENS.INVALID &&
            (((_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) === constants_js_1.TOKENS.PROPERTY ||
                ((_b = node.prevSibling) === null || _b === void 0 ? void 0 : _b.name) === "{")));
};
exports.isPropertyNameNode = isPropertyNameNode;
const getChildrenNodes = (node) => {
    const children = [];
    let child = node.firstChild;
    while (child) {
        if (child) {
            children.push(child);
        }
        child = child === null || child === void 0 ? void 0 : child.nextSibling;
    }
    return children;
};
const getChildValueNode = (node) => {
    return getChildrenNodes(node).find((n) => (0, exports.isPrimitiveValueNode)(n));
};
exports.getChildValueNode = getChildValueNode;
const getArrayNodeChildren = (node) => {
    return getChildrenNodes(node).filter((n) => constants_js_1.PRIMITIVE_TYPES.includes(n.name) || constants_js_1.COMPLEX_TYPES.includes(n.name));
};
const findNodeIndexInArrayNode = (arrayNode, valueNode) => {
    return getArrayNodeChildren(arrayNode).findIndex((nd) => nd.from === valueNode.from && nd.to === valueNode.to);
};
exports.findNodeIndexInArrayNode = findNodeIndexInArrayNode;
