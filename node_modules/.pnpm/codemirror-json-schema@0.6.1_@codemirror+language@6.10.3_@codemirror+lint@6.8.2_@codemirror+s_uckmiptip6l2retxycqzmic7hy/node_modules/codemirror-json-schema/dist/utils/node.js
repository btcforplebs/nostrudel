import { COMPLEX_TYPES, TOKENS, PRIMITIVE_TYPES } from "../constants.js";
import { syntaxTree } from "@codemirror/language";
export const getNodeAtPosition = (state, pos, side = -1) => {
    return syntaxTree(state).resolveInner(pos, side);
};
export const stripSurroundingQuotes = (str) => {
    return str.replace(/^"(.*)"$/, "$1").replace(/^'(.*)'$/, "$1");
};
export const getWord = (doc, node, stripQuotes = true) => {
    const word = node ? doc.sliceString(node.from, node.to) : "";
    return stripQuotes ? stripSurroundingQuotes(word) : word;
};
export const isInvalidValueNode = (node) => {
    var _a, _b;
    return (node.name === TOKENS.INVALID &&
        (((_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) === TOKENS.PROPERTY_NAME ||
            ((_b = node.prevSibling) === null || _b === void 0 ? void 0 : _b.name) === TOKENS.PROPERTY_COLON));
};
export const isPrimitiveValueNode = (node) => {
    return PRIMITIVE_TYPES.includes(node.name) || isInvalidValueNode(node);
};
export const isValueNode = (node) => {
    return ([...PRIMITIVE_TYPES, ...COMPLEX_TYPES].includes(node.name) ||
        isInvalidValueNode(node));
};
export const isPropertyNameNode = (node) => {
    var _a, _b;
    return (node.name === TOKENS.PROPERTY_NAME ||
        (node.name === TOKENS.INVALID &&
            (((_a = node.prevSibling) === null || _a === void 0 ? void 0 : _a.name) === TOKENS.PROPERTY ||
                ((_b = node.prevSibling) === null || _b === void 0 ? void 0 : _b.name) === "{")));
};
const getChildrenNodes = (node) => {
    const children = [];
    let child = node.firstChild;
    while (child) {
        if (child) {
            children.push(child);
        }
        child = child === null || child === void 0 ? void 0 : child.nextSibling;
    }
    return children;
};
export const getChildValueNode = (node) => {
    return getChildrenNodes(node).find((n) => isPrimitiveValueNode(n));
};
const getArrayNodeChildren = (node) => {
    return getChildrenNodes(node).filter((n) => PRIMITIVE_TYPES.includes(n.name) || COMPLEX_TYPES.includes(n.name));
};
export const findNodeIndexInArrayNode = (arrayNode, valueNode) => {
    return getArrayNodeChildren(arrayNode).findIndex((nd) => nd.from === valueNode.from && nd.to === valueNode.to);
};
