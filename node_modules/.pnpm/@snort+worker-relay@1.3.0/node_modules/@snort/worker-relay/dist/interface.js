import { v4 as uuid } from "uuid";
export class WorkerRelayInterface {
    #worker;
    #commandQueue = new Map();
    // Command timeout
    timeout = 30_000;
    /**
     * Interface wrapper for worker relay
     * @param scriptPath Path to worker script or Worker script object
     */
    constructor(scriptPath) {
        if (scriptPath instanceof Worker) {
            this.#worker = scriptPath;
        }
        else {
            const sp = scriptPath ? scriptPath : new URL("@snort/worker-relay/dist/esm/worker.mjs", import.meta.url);
            this.#worker = new Worker(sp, { type: "module" });
        }
        this.#worker.onerror = e => {
            console.error(e.message, e);
        };
        this.#worker.onmessageerror = e => {
            console.error(e);
        };
        this.#worker.onmessage = e => {
            const cmd = e.data;
            if (cmd.cmd === "reply") {
                const q = this.#commandQueue.get(cmd.id);
                q?.(cmd, e.ports);
                this.#commandQueue.delete(cmd.id);
            }
        };
    }
    async init(args) {
        return await this.#workerRpc("init", args);
    }
    async event(ev) {
        return await this.#workerRpc("event", ev);
    }
    async query(req) {
        return await this.#workerRpc("req", req);
    }
    async count(req) {
        return await this.#workerRpc("count", req);
    }
    async delete(req) {
        return await this.#workerRpc("delete", req);
    }
    async summary() {
        return await this.#workerRpc("summary");
    }
    async close(id) {
        return await this.#workerRpc("close", id);
    }
    async dump() {
        return await this.#workerRpc("dumpDb");
    }
    async wipe() {
        return await this.#workerRpc("wipe");
    }
    async forYouFeed(pubkey) {
        return await this.#workerRpc("forYouFeed", pubkey);
    }
    setEventMetadata(id, meta) {
        return this.#workerRpc("setEventMetadata", [id, meta]);
    }
    async debug(v) {
        return await this.#workerRpc("debug", v);
    }
    async #workerRpc(cmd, args) {
        const id = uuid();
        const msg = {
            id,
            cmd,
            args,
        };
        return await new Promise((resolve, reject) => {
            this.#worker.postMessage(msg);
            const t = setTimeout(() => {
                this.#commandQueue.delete(id);
                reject(new Error("Timeout"));
            }, this.timeout);
            this.#commandQueue.set(id, (v, port) => {
                clearTimeout(t);
                const cmdReply = v;
                if (cmdReply.args.error) {
                    reject(cmdReply.args.error);
                    return;
                }
                resolve(cmdReply.args);
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ludGVyZmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsRUFBRSxJQUFJLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQWNsQyxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLE9BQU8sQ0FBUztJQUNoQixhQUFhLEdBQXlFLElBQUksR0FBRyxFQUFFLENBQUM7SUFFaEcsa0JBQWtCO0lBQ2xCLE9BQU8sR0FBVyxNQUFNLENBQUM7SUFFekI7OztPQUdHO0lBQ0gsWUFBWSxVQUFrQztRQUM1QyxJQUFJLFVBQVUsWUFBWSxNQUFNLEVBQUU7WUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxVQUFVLENBQUM7U0FDM0I7YUFBTTtZQUNMLE1BQU0sRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyx5Q0FBeUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDbkQ7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDOUIsQ0FBQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNuQixDQUFDLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUMzQixNQUFNLEdBQUcsR0FBRyxD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