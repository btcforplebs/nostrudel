import { EventEmitter } from "eventemitter3";
export type WorkerMessageCommand = "reply" | "init" | "event" | "req" | "count" | "summary" | "close" | "dumpDb" | "emit-event" | "forYouFeed" | "setEventMetadata" | "debug" | "delete" | "wipe";
export interface WorkerMessage<T> {
    id: string;
    cmd: WorkerMessageCommand;
    args: T;
}
export interface NostrEvent {
    id: string;
    pubkey: string;
    created_at: number;
    kind: number;
    tags: Array<Array<string>>;
    content: string;
    sig: string;
    relays?: Array<string>;
}
export interface EventMetadata {
    seen_at?: number;
}
export type ReqCommand = ["REQ", id: string, ...filters: Array<ReqFilter>];
export interface ReqFilter {
    ids?: string[];
    authors?: string[];
    kinds?: number[];
    search?: string;
    since?: number;
    until?: number;
    limit?: number;
    [key: string]: Array<string> | Array<number> | string | number | undefined | boolean;
}
export interface OkResponse {
    ok: boolean;
    id: string;
    relay: string;
    message?: string;
    event: NostrEvent;
}
export interface RelayHandler extends EventEmitter<RelayHandlerEvents> {
    init(path: string, path2Wasm?: string): Promise<void>;
    close(): void;
    event(ev: NostrEvent): boolean;
    eventBatch(evs: Array<NostrEvent>): boolean;
    /**
     * Run any SQL command
     */
    sql(sql: string, params: Array<string | number>): Array<Array<string | number>>;
    req(id: string, req: ReqFilter): Array<NostrEvent | string>;
    count(req: ReqFilter): number;
    summary(): Record<string, number>;
    dump(): Promise<Uint8Array>;
    delete(req: ReqFilter): Array<string>;
    setEventMetadata(id: string, meta: EventMetadata): void;
    wipe(): Promise<void>;
}
export interface RelayHandlerEvents {
    event: (evs: Array<NostrEvent>) => void;
}
export declare function unixNowMs(): number;
export declare function eventMatchesFilter(ev: NostrEvent, filter: ReqFilter): boolean;
//# sourceMappingURL=types.d.ts.map