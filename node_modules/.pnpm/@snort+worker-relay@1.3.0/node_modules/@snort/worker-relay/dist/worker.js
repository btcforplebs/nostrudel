/// <reference lib="webworker" />
import { SqliteRelay } from "./sqlite/sqlite-relay";
import { InMemoryRelay } from "./memory-relay";
import { setLogging } from "./debug";
import { unixNowMs, } from "./types";
import { getForYouFeed } from "./forYouFeed";
let relay;
let insertBatchSize = 10;
// Event inserter queue
let eventWriteQueue = [];
async function insertBatch() {
    // Only insert event batches when the command queue is empty
    // This is to make req's execute first and not block them
    if (eventWriteQueue.length > 0) {
        const start = unixNowMs();
        const timeLimit = 1000;
        if (relay) {
            while (eventWriteQueue.length > 0) {
                if (unixNowMs() - start >= timeLimit) {
                    //console.debug("Yield insert, queue length: ", eventWriteQueue.length, ", cmds: ", cmdQueue.length);
                    break;
                }
                const batch = eventWriteQueue.splice(0, insertBatchSize);
                eventWriteQueue = eventWriteQueue.slice(batch.length);
                relay.eventBatch(batch);
            }
        }
    }
    setTimeout(() => insertBatch(), 100);
}
const cmdQueue = [];
try {
    setTimeout(() => insertBatch(), 100);
}
catch (e) {
    console.error(e);
}
const handleMsg = async (port, ev) => {
    async function reply(id, obj) {
        port.postMessage({
            id,
            cmd: "reply",
            args: obj,
        });
    }
    const msg = ev.data;
    try {
        switch (msg.cmd) {
            case "debug": {
                setLogging(true);
                reply(msg.id, true);
                break;
            }
            case "init": {
                const args = msg.args;
                insertBatchSize = args.insertBatchSize ?? 10;
                try {
                    if ("WebAssembly" in self) {
                        relay = new SqliteRelay();
                    }
                    else {
                        relay = new InMemoryRelay();
                    }
                    await relay.init(args.databasePath);
                }
                catch (e) {
                    console.error("Fallback to InMemoryRelay", e);
                    relay = new InMemoryRelay();
                    await relay.init(args.databasePath);
                }
                reply(msg.id, true);
                break;
            }
            case "event": {
                const ev = msg.args;
                eventWriteQueue.push(ev);
                reply(msg.id, {
                    ok: true,
                    id: ev.id,
                    relay: "",
                });
                break;
            }
            case "close": {
                const res = relay.close();
                reply(msg.id, res);
                break;
            }
            case "req": {
                const req = msg.args;
                const filters = req.slice(2);
                const results = [];
                const ids = new Set();
                for (const r of filters) {
                    const rx = relay.req(req[1], r);
                    for (const x of rx) {
                        if ((typeof x === "string" && ids.has(x)) || ids.has(x.id)) {
                            continue;
                        }
                        ids.add(typeof x === "string" ? x : x.id);
                        results.push(x);
                    }
                }
                reply(msg.id, results);
                break;
            }
            case "count": {
                const req = msg.args;
                let results = 0;
                const filters = req.slice(2);
                for (const r of filters) {
                    const c = relay.count(r);
                    results += c;
                }
                reply(msg.id, results);
                break;
            }
            case "delete": {
                const req = msg.args;
                let results = [];
                const filters = req.slice(2);
                for (const r of filters) {
                    const c = relay.delete(r);
                    results.push(...c);
                }
                reply(msg.id, results);
                break;
            }
            case "summary": {
                const res = relay.summary();
                reply(msg.id, res);
                break;
            }
            case "dumpDb": {
                const res = await relay.dump();
                reply(msg.id, res);
                break;
            }
            case "wipe": {
                await relay.wipe();
                reply(msg.id, true);
                break;
            }
            case "forYouFeed": {
                const res = await getForYouFeed(relay, msg.args);
                reply(msg.id, res);
                break;
            }
            case "setEventMetadata": {
                const [id, metadata] = msg.args;
                relay.setEventMetadata(id, metadata);
                break;
            }
            default: {
                reply(msg.id, { error: "Unknown command" });
                break;
            }
        }
    }
    catch (e) {
        if (e instanceof Error) {
            reply(msg.id, { error: e.message });
        }
        else if (typeof e === "string") {
            reply(msg.id, { error: e });
        }
        else {
            reply(msg.id, "Unknown error");
        }
    }
};
if ("SharedWorkerGlobalScope" in globalThis) {
    onconnect = e => {
        const port = e.ports[0];
        port.onmessage = msg => handleMsg(port, msg);
        port.start();
    };
}
if ("DedicatedWorkerGlobalScope" in globalThis) {
    onmessage = e => {
        handleMsg(self, e);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQ0FBaUM7QUFFakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXJDLE9BQU8sRUFNTCxTQUFTLEdBR1YsTUFBTSxTQUFTLENBQUM7QUFDakIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU3QyxJQUFJLEtBQStCLENBQUM7QUFDcEMsSUFBSSxlQUFlLEdBQUcsRUFBRSxDQUFDO0FBRXpCLHVCQUF1QjtBQUN2QixJQUFJLGVBQWUsR0FBc0IsRUFBRSxDQUFDO0FBQzVDLEtBQUssVUFBVSxXQUFXO0lBQ3hCLDREQUE0RDtJQUM1RCx5REFBeUQ7SUFDekQsSUFBSSxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUM5QixNQUFNLEtBQUssR0FBRyxTQUFTLEVBQUUsQ0FBQztRQUMxQixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUM7UUFDdkIsSUFBSSxLQUFLLEVBQUU7WUFDVCxPQUFPLGVBQWUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQyxJQUFJLFNBQVMsRUFBRSxHQUFHLEtBQUssSUFBSSxTQUFTLEVBQUU7b0JBQ3BDLHFHQUFxRztvQkFDckcsTUFBTTtpQkFDUDtnQkFDRCxNQUFNLEtBQUssR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQztnQkFDekQsZUFBZSxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3pCO1NBQ0Y7S0FD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