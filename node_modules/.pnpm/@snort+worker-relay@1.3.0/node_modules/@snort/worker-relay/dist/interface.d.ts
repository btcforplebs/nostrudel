import { EventMetadata, NostrEvent, OkResponse, ReqCommand } from "./types";
export interface InitAargs {
    /**
     * OPFS file path for the database
     */
    databasePath: string;
    /**
     * How many events to insert per batch
     */
    insertBatchSize?: number;
}
export declare class WorkerRelayInterface {
    #private;
    timeout: number;
    /**
     * Interface wrapper for worker relay
     * @param scriptPath Path to worker script or Worker script object
     */
    constructor(scriptPath?: string | URL | Worker);
    init(args: InitAargs): Promise<boolean>;
    event(ev: NostrEvent): Promise<OkResponse>;
    query(req: ReqCommand): Promise<NostrEvent[]>;
    count(req: ReqCommand): Promise<number>;
    delete(req: ReqCommand): Promise<string[]>;
    summary(): Promise<Record<string, number>>;
    close(id: string): Promise<boolean>;
    dump(): Promise<Uint8Array>;
    wipe(): Promise<boolean>;
    forYouFeed(pubkey: string): Promise<NostrEvent[]>;
    setEventMetadata(id: string, meta: EventMetadata): Promise<void>;
    debug(v: string): Promise<boolean>;
}
//# sourceMappingURL=interface.d.ts.map