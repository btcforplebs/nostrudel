import { Database } from "@sqlite.org/sqlite-wasm";
import { EventEmitter } from "eventemitter3";
import { EventMetadata, NostrEvent, RelayHandler, RelayHandlerEvents, ReqFilter } from "../types";
export declare class SqliteRelay extends EventEmitter<RelayHandlerEvents> implements RelayHandler {
    #private;
    db?: Database;
    /**
     * Initialize the SQLite driver
     */
    init(path: string): Promise<void>;
    /**
     * Delete all data
     */
    wipe(): Promise<void>;
    close(): void;
    /**
     * Insert an event to the database
     */
    event(ev: NostrEvent): boolean;
    sql(sql: string, params: Array<any>): (string | number)[][];
    /**
     * Write multiple events
     */
    eventBatch(evs: Array<NostrEvent>): boolean;
    setEventMetadata(id: string, meta: EventMetadata): void;
    /**
     * Query relay by nostr filter
     */
    req(id: string, req: ReqFilter): (string | {
        relays: string[] | undefined;
        id: string;
        pubkey: string;
        created_at: number;
        kind: number;
        tags: string[][];
        content: string;
        sig: string;
    })[];
    /**
     * Count results by nostr filter
     */
    count(req: ReqFilter): number;
    /**
     * Delete events by nostr filter
     */
    delete(req: ReqFilter): string[];
    /**
     * Get a summary about events table
     */
    summary(): {
        [k: string]: number;
    };
    /**
     * Dump the database file
     */
    dump(): Promise<Uint8Array>;
    insertIntoSearchIndex(db: Database, ev: NostrEvent): void;
}
//# sourceMappingURL=sqlite-relay.d.ts.map