import { debugLog } from "../debug";
const log = (msg, ...args) => debugLog("SqliteRelay:migrations", msg, ...args);
const migrations = [
    { version: 1, script: migrate_v1 },
    { version: 2, script: migrate_v2 },
    { version: 3, script: migrate_v3 },
    { version: 4, script: migrate_v4 },
    { version: 5, script: migrate_v5 },
    { version: 6, script: migrate_v6 },
];
async function migrate(relay) {
    if (!relay.db)
        throw new Error("DB must be open");
    relay.db.exec("CREATE TABLE IF NOT EXISTS __migration (\
    version INTEGER PRIMARY KEY, \
    migrated_at INTEGER \
  )");
    const res = relay.db.exec("SELECT MAX(version) FROM __migration", { returnValue: "resultRows" });
    let currentVersion = res[0][0] ?? 0;
    for (const { version, script } of migrations) {
        if (currentVersion < version) {
            log(`Migrating to v${version}`);
            await script(relay);
            currentVersion = version;
        }
    }
}
function migrate_v1(relay) {
    return relay.db?.transaction(db => {
        db.exec("CREATE TABLE events (\
      id TEXT(64) PRIMARY KEY, \
      pubkey TEXT(64), \
      created INTEGER, \
      kind INTEGER, \
      json TEXT \
    )");
        db.exec("CREATE TABLE tags (\
      event_id TEXT(64), \
      key TEXT, \
      value TEXT, \
      CONSTRAINT tags_FK FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE \
      )");
        db.exec("CREATE INDEX tags_key_IDX ON tags (key,value)");
        db.exec("insert into __migration values(1, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
function migrate_v2(relay) {
    relay.db?.transaction(db => {
        db.exec("CREATE INDEX pubkey_kind_IDX ON events (pubkey,kind)");
        db.exec("CREATE INDEX pubkey_created_IDX ON events (pubkey,created)");
        db.exec("insert into __migration values(2, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
function migrate_v3(relay) {
    relay.db?.transaction(db => {
        db.exec("CREATE VIRTUAL TABLE search_content using fts5(id UNINDEXED, content)");
        const events = db.selectArrays("select json from events where kind in (?,?)", [0, 1]);
        for (const json of events) {
            const ev = JSON.parse(json[0]);
            if (ev) {
                relay.insertIntoSearchIndex(db, ev);
            }
        }
        db.exec("insert into __migration values(3, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
async function migrate_v4(relay) {
    relay.db?.transaction(db => {
        db.exec("ALTER TABLE events ADD COLUMN seen_at INTEGER");
        db.exec("insert into __migration values(4, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
async function migrate_v5(relay) {
    relay.db?.transaction(db => {
        db.exec("CREATE INDEX seen_at_IDX ON events (seen_at)");
        db.exec("insert into __migration values(5, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
async function migrate_v6(relay) {
    relay.db?.transaction(db => {
        db.exec("ALTER TABLE events ADD COLUMN relays TEXT");
        db.exec("insert into __migration values(6, ?)", {
            bind: [new Date().getTime() / 1000],
        });
    });
}
export default migrate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcWxpdGUvbWlncmF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXBDLE1BQU0sR0FBRyxHQUFHLENBQUMsR0FBVyxFQUFFLEdBQUcsSUFBZ0IsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBRW5HLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0lBQ2xDLEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFO0NBQ25DLENBQUM7QUFFRixLQUFLLFVBQVUsT0FBTyxDQUFDLEtBQWtCO0lBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUVsRCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FDWDs7O0lBR0EsQ0FDRCxDQUFDO0lBQ0YsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNqRyxJQUFJLGNBQWMsR0FBSSxHQUFHLENBQUMsQ0FB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