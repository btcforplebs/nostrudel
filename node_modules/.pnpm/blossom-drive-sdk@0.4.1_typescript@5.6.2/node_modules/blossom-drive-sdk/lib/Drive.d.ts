import { type SignedEvent, type EventTemplate, type Signer } from "blossom-client-sdk";
import { EventEmitter } from "eventemitter3";
import { TreeFolder } from "./FileTree/TreeFolder.js";
import { type Path } from "./FileTree/methods.js";
import type { FileMetadata } from "./FileTree/TreeFile.js";
import { TreeFile } from "./FileTree/TreeFile.js";
export declare const DRIVE_KIND = 30563;
/**
 * A simple method responsible for publish a signer nostr event to relays
 * @example
 * function publisher(event){
 *   const relay = Relay.connect("wss://relay.example.com");
 *
 *   relay.publish(event)
 * }
 */
export type Publisher = (event: SignedEvent) => Promise<void>;
export type DriveMetadata = {
    name: string;
    identifier: string;
    description: string;
    servers: string[];
    pubkey?: string;
    treeTags: string[][];
};
export declare const getEmptyMetadata: () => {
    name: string;
    identifier: string;
    description: string;
    servers: never[];
    treeTags: never[];
};
type EventMap = {
    change: [Drive];
    update: [Drive];
};
export declare class Drive extends EventEmitter<EventMap> {
    tree: TreeFolder;
    event?: EventTemplate | SignedEvent;
    /** whether the drive has been modified and needs to be saved */
    modified: boolean;
    protected _metadata: DriveMetadata;
    get pubkey(): string | undefined;
    get identifier(): string;
    set identifier(v: string);
    get name(): string;
    set name(v: string);
    get description(): string;
    set description(v: string);
    get servers(): string[];
    set servers(v: string[]);
    signer: Signer;
    publisher: Publisher;
    get address(): "" | `naddr1${string}`;
    static fromEvent(event: SignedEvent, signer: Signer, publisher: Publisher): Drive;
    constructor(signer: Signer, publisher: Publisher);
    protected createEventTemplate(): EventTemplate;
    protected readEvent(event: EventTemplate | SignedEvent): DriveMetadata;
    /** Save any pending changes to nostr */
    save(): Promise<SignedEvent | undefined>;
    update(event: EventTemplate | SignedEvent): boolean;
    protected resetFromEvent(): void;
    /** Reset any pending changes */
    reset(): void;
    /** Gets the file or folder at the path */
    getPath(path: Path, create?: boolean): TreeFile | TreeFolder;
    /** Gets the folder at the path, pass create=true in to create an empty folder */
    getFolder(path: Path, create?: boolean): TreeFolder;
    getFile(path: Path): TreeFile;
    getFileURL(path: Path, additionalServers?: string[]): string;
    /** Downloads the file at the path */
    downloadFile(path: Path, additionalServers?: string[]): Promise<File | null>;
    /** Removes the file or folder at the path */
    remove(path: Path): void;
    /** Moves the file or folder from src to dest */
    move(src: Path, dest: Path): void;
    /** Updates or creates a new file at the path */
    setFile(path: Path, metadata: FileMetadata): TreeFile;
    /** Checks if there is a file with a matching sha256 hash  */
    hasHash(sha256: string): boolean;
    /**
     * Iterate over the files
     * @example
     * for(let fileOrFolder of drive){
     *   if(fileOrFolder instanceof TreeFolder){
     *     // keep looping
     *   }
     *   else if(fileOrFolder instanceof TreeFile){
     *     console.log(fileOrFolder.path)
     *   }
     * }
     */
    [Symbol.iterator](): IterableIterator<TreeFile | TreeFolder>;
}
export {};
