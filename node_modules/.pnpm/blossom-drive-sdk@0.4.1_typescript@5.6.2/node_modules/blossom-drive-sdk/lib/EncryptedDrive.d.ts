import { type EventTemplate, type SignedEvent } from "blossom-client-sdk";
import { Drive, type DriveMetadata } from "./Drive.js";
import type { Path } from "./FileTree/methods.js";
export declare const ENCRYPTED_DRIVE_KIND = 30564;
export declare const DEFAULT_SCRYPT_LOGN = 10;
export declare class EncryptedDrive extends Drive {
    private encoder;
    private decoder;
    logn: number;
    locked: boolean;
    /**
     * Attempts to decrypt the drive with the provided password
     * If successful it will set locked=false and save the password in memory
     */
    unlock(password: string): Promise<void>;
    lock(): void;
    /** Used to set the password on new drives */
    setPassword(password: string, logn?: number): void;
    protected readEvent(event: EventTemplate | SignedEvent): DriveMetadata;
    protected createEventTemplate(): EventTemplate;
    update(event: EventTemplate | SignedEvent): boolean;
    /** Encrypt a Blob with the drives password */
    encryptBlob(blob: Blob): Promise<Blob>;
    /** Decrypt a Blob with the drives password */
    decryptBlob(blob: Blob, type?: string): Promise<Blob>;
    /** Download and Decrypt a file at the provided path */
    downloadFile(path: Path, additionalServers?: string[]): Promise<File | null>;
}
