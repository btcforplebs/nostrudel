import { WorkerClient } from '../worker';
import type { CreateBolt11Response, GatewayInfo, JSONObject, JSONValue, LightningGateway, LnPayState, LnReceiveState, MSats, OutgoingLightningPayment } from '../types';
export declare class LightningService {
    private client;
    constructor(client: WorkerClient);
    createInvoice(amount: MSats, description: string, expiryTime?: number, // in seconds
    extraMeta?: JSONObject, gatewayInfo?: GatewayInfo): Promise<CreateBolt11Response>;
    createInvoiceTweaked(amount: MSats, description: string, tweakKey: string, index: number, expiryTime?: number, // in seconds
    gatewayInfo?: GatewayInfo, extraMeta?: JSONObject): Promise<CreateBolt11Response>;
    scanReceivesForTweaks(tweakKey: string, indices: number[], extraMeta?: JSONObject): Promise<string[]>;
    private _getDefaultGatewayInfo;
    payInvoice(invoice: string, gatewayInfo?: GatewayInfo, extraMeta?: JSONObject): Promise<OutgoingLightningPayment>;
    subscribeLnClaim(operationId: string, onSuccess?: (state: LnReceiveState) => void, onError?: (error: string) => void): import("../types").CancelFunction;
    subscribeLnPay(operationId: string, onSuccess?: (state: LnPayState) => void, onError?: (error: string) => void): import("../types").CancelFunction;
    subscribeLnReceive(operationId: string, onSuccess?: (state: LnReceiveState) => void, onError?: (error: string) => void): import("../types").CancelFunction;
    waitForReceive(operationId: string): Promise<LnReceiveState>;
    getGateway(gatewayId?: string | null, forceInternal?: boolean): Promise<LightningGateway | null>;
    listGateways(): Promise<LightningGateway[]>;
    updateGatewayCache(): Promise<JSONValue>;
}
//# sourceMappingURL=LightningService.d.ts.map