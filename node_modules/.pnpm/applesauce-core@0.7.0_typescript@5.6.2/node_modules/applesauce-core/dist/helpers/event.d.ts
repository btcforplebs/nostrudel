import { NostrEvent } from "nostr-tools";
export declare const EventUIDSymbol: unique symbol;
export declare const EventIndexableTagsSymbol: unique symbol;
declare module "nostr-tools" {
    interface Event {
        [EventUIDSymbol]?: string;
        [EventIndexableTagsSymbol]?: Set<string>;
    }
}
/**
 * Returns if a kind is replaceable ( 10000 <= n < 20000 || n == 0 || n == 3 )
 * or parameterized replaceable ( 30000 <= n < 40000 )
 */
export declare function isReplaceable(kind: number): boolean;
/**
 * Returns the events Unique ID
 * For normal or ephemeral events this is ( event.id )
 * For replaceable events this is ( event.kind + ":" + event.pubkey )
 * For parametrized replaceable events this is ( event.kind + ":" + event.pubkey + ":" + event.tags.d.1 )
 */
export declare function getEventUID(event: NostrEvent): string;
export declare function getReplaceableUID(kind: number, pubkey: string, d?: string): string;
/** Returns a Set of tag names and values that are indexable */
export declare function getIndexableTags(event: NostrEvent): Set<string>;
/** Returns the second index ( tag[1] ) of the first tag that matches the name */
export declare function getTagValue(event: NostrEvent, name: string): string | undefined;
