import Observable from "zen-observable";
/** Wraps an {@link Observable} and makes it stateful */
export function stateful(observable, cleanup = false) {
    let subscription = undefined;
    let observers = [];
    const self = new Observable((observer) => {
        // add observer to list
        observers.push(observer);
        // pass any cached values
        if (self.value)
            observer.next(self.value);
        if (self.error)
            observer.error(self.error);
        if (self.complete)
            observer.complete();
        // subscribe if not already
        if (!subscription) {
            subscription = observable.subscribe({
                next: (v) => {
                    self.value = v;
                    for (const observer of observers)
                        observer.next(v);
                },
                error: (err) => {
                    self.error = err;
                    for (const observer of observers)
                        observer.error(err);
                },
                complete: () => {
                    self.complete = true;
                    for (const observer of observers)
                        observer.complete();
                },
            });
        }
        return () => {
            let i = observers.indexOf(observer);
            if (i !== -1) {
                // remove observer from list
                observers.splice(i, 1);
                if (subscription && observers.length === 0) {
                    subscription.unsubscribe();
                    subscription = undefined;
                    // reset cached values
                    if (cleanup) {
                        delete self.value;
                        delete self.error;
                        delete self.complete;
                    }
                }
            }
        };
    });
    self._stateful = true;
    return self;
}
export function isStateful(observable) {
    // @ts-expect-error
    return observable._stateful;
}
