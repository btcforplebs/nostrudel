import { Filter, NostrEvent } from "nostr-tools";
import Observable from "zen-observable";
import { Database } from "./database.js";
export declare class EventStore {
    database: Database;
    private singles;
    private streams;
    private timelines;
    constructor();
    /** Adds an event to the database */
    add(event: NostrEvent, fromRelay?: string): import("nostr-tools").Event;
    /** Add an event to the store and notifies all subscribes it has updated */
    update(event: NostrEvent): import("nostr-tools").Event;
    getAll(filters: Filter[]): Set<import("nostr-tools").Event>;
    hasEvent(uid: string): import("nostr-tools").Event | undefined;
    getEvent(uid: string): import("nostr-tools").Event | undefined;
    hasReplaceable(kind: number, pubkey: string, d?: string): boolean;
    getReplaceable(kind: number, pubkey: string, d?: string): import("nostr-tools").Event | undefined;
    /** Creates an observable that updates a single event */
    event(uid: string): Observable<import("nostr-tools").Event | undefined>;
    /** Creates an observable that subscribes to multiple events */
    events(uids: string[]): Observable<Map<string, import("nostr-tools").Event>>;
    /** Creates an observable that updates a single replaceable event */
    replaceable(kind: number, pubkey: string, d?: string): Observable<import("nostr-tools").Event | undefined>;
    /** Creates an observable that streams all events that match the filter */
    stream(filters: Filter[]): Observable<import("nostr-tools").Event>;
    /** Creates an observable that updates with an array of sorted events */
    timeline(filters: Filter[]): Observable<import("nostr-tools").Event[]>;
}
