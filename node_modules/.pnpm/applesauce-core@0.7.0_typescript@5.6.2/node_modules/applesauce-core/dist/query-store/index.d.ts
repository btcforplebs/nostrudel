import Observable from "zen-observable";
import { Filter, NostrEvent } from "nostr-tools";
import { EventStore } from "../event-store/event-store.js";
import { StatefulObservable } from "../observable/stateful.js";
import { LRU } from "../helpers/lru.js";
import * as Queries from "../queries/index.js";
import { AddressPointer, EventPointer } from "nostr-tools/nip19";
export type Query<T extends unknown> = {
    key: string;
    run: (events: EventStore, store: QueryStore) => Observable<T>;
};
export type QueryConstructor<T extends unknown, Args extends Array<any>> = (...args: Args) => Query<T>;
export declare class QueryStore {
    static Queries: typeof Queries;
    store: EventStore;
    constructor(store: EventStore);
    queries: LRU<StatefulObservable<any>>;
    /** Creates a cached query */
    runQuery<T extends unknown, Args extends Array<any>>(queryConstructor: (...args: Args) => {
        key: string;
        run: (events: EventStore, store: QueryStore) => Observable<T>;
    }): (...args: Args) => Observable<T>;
    /** Returns a single event */
    event(id: string): Observable<import("nostr-tools").Event | undefined>;
    /** Returns a single event */
    events(ids: string[]): Observable<Map<string, import("nostr-tools").Event>>;
    /** Returns the latest version of a replaceable event */
    replaceable(kind: number, pubkey: string, d?: string): Observable<import("nostr-tools").Event | undefined>;
    /** Returns a directory of events by their UID */
    replaceableSet(pointers: {
        kind: number;
        pubkey: string;
        identifier?: string;
    }[]): Observable<Map<string, import("nostr-tools").Event>>;
    /** Returns an array of events that match the filter */
    timeline(filters: Filter | Filter[]): Observable<import("nostr-tools").Event[]>;
    /** Returns the parsed profile (0) for a pubkey */
    profile(pubkey: string): Observable<import("../helpers/profile.js").ProfileContent | undefined>;
    /** Returns all reactions for an event (supports replaceable events) */
    reactions(event: NostrEvent): Observable<import("nostr-tools").Event[]>;
    /** Returns the parsed relay list (10002) for the pubkey */
    mailboxes(pubkey: string): Observable<{
        inboxes: Set<string>;
        outboxes: Set<string>;
    } | undefined>;
    thread(root: string | EventPointer | AddressPointer): Observable<Queries.Thread>;
}
export { Queries };
