import { stateful } from "../observable/stateful.js";
import { LRU } from "../helpers/lru.js";
import * as Queries from "../queries/index.js";
export class QueryStore {
    static Queries = Queries;
    store;
    constructor(store) {
        this.store = store;
    }
    queries = new LRU();
    /** Creates a cached query */
    runQuery(queryConstructor) {
        return (...args) => {
            const query = queryConstructor(...args);
            const key = `${queryConstructor.name}|${query.key}`;
            if (!this.queries.has(key)) {
                const observable = stateful(query.run(this.store, this));
                this.queries.set(key, observable);
                return observable;
            }
            return this.queries.get(key);
        };
    }
    /** Returns a single event */
    event(id) {
        return this.runQuery(Queries.SingleEventQuery)(id);
    }
    /** Returns a single event */
    events(ids) {
        return this.runQuery(Queries.MultipleEventsQuery)(ids);
    }
    /** Returns the latest version of a replaceable event */
    replaceable(kind, pubkey, d) {
        return this.runQuery(Queries.ReplaceableQuery)(kind, pubkey, d);
    }
    /** Returns a directory of events by their UID */
    replaceableSet(pointers) {
        return this.runQuery(Queries.ReplaceableSetQuery)(pointers);
    }
    /** Returns an array of events that match the filter */
    timeline(filters) {
        return this.runQuery(Queries.TimelineQuery)(filters);
    }
    /** Returns the parsed profile (0) for a pubkey */
    profile(pubkey) {
        return this.runQuery(Queries.ProfileQuery)(pubkey);
    }
    /** Returns all reactions for an event (supports replaceable events) */
    reactions(event) {
        return this.runQuery(Queries.ReactionsQuery)(event);
    }
    /** Returns the parsed relay list (10002) for the pubkey */
    mailboxes(pubkey) {
        return this.runQuery(Queries.MailboxesQuery)(pubkey);
    }
    thread(root) {
        return this.runQuery(Queries.ThreadQuery)(root);
    }
}
export { Queries };
