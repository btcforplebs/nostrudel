{
  "version": 3,
  "sources": ["../../.pnpm/identicon.js@2.3.3/node_modules/identicon.js/pnglib.js", "../../.pnpm/identicon.js@2.3.3/node_modules/identicon.js/identicon.js"],
  "sourcesContent": ["/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n\n(function() {\n\n\t// helper functions for that ctx\n\tfunction write(buffer, offs) {\n\t\tfor (var i = 2; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tbuffer[offs++] = arguments[i].charAt(j);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction byte2(w) {\n\t\treturn String.fromCharCode((w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte4(w) {\n\t\treturn String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte2lsb(w) {\n\t\treturn String.fromCharCode(w & 255, (w >> 8) & 255);\n\t}\n\n\t// modified from original source to support NPM\n\tvar PNGlib = function(width,height,depth) {\n\n\t\tthis.width   = width;\n\t\tthis.height  = height;\n\t\tthis.depth   = depth;\n\n\t\t// pixel data and row filter identifier size\n\t\tthis.pix_size = height * (width + 1);\n\n\t\t// deflate header, pix_size, block headers, adler32 checksum\n\t\tthis.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t\t// offsets and sizes of Png chunks\n\t\tthis.ihdr_offs = 0;\t\t\t\t\t\t\t\t\t// IHDR offset and size\n\t\tthis.ihdr_size = 4 + 4 + 13 + 4;\n\t\tthis.plte_offs = this.ihdr_offs + this.ihdr_size;\t// PLTE offset and size\n\t\tthis.plte_size = 4 + 4 + 3 * depth + 4;\n\t\tthis.trns_offs = this.plte_offs + this.plte_size;\t// tRNS offset and size\n\t\tthis.trns_size = 4 + 4 + depth + 4;\n\t\tthis.idat_offs = this.trns_offs + this.trns_size;\t// IDAT offset and size\n\t\tthis.idat_size = 4 + 4 + this.data_size + 4;\n\t\tthis.iend_offs = this.idat_offs + this.idat_size;\t// IEND offset and size\n\t\tthis.iend_size = 4 + 4 + 4;\n\t\tthis.buffer_size  = this.iend_offs + this.iend_size;\t// total PNG size\n\n\t\tthis.buffer  = new Array();\n\t\tthis.palette = new Object();\n\t\tthis.pindex  = 0;\n\n\t\tvar _crc32 = new Array();\n\n\t\t// initialize buffer with zero bytes\n\t\tfor (var i = 0; i < this.buffer_size; i++) {\n\t\t\tthis.buffer[i] = \"\\x00\";\n\t\t}\n\n\t\t// initialize non-zero elements\n\t\twrite(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t\twrite(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t\twrite(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t\twrite(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t\twrite(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t\t// initialize deflate header\n\t\tvar header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t\theader+= 31 - (header % 31);\n\n\t\twrite(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t\t// initialize deflate block headers\n\t\tfor (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t\t\tvar size, bits;\n\t\t\tif (i + 0xffff < this.pix_size) {\n\t\t\t\tsize = 0xffff;\n\t\t\t\tbits = \"\\x00\";\n\t\t\t} else {\n\t\t\t\tsize = this.pix_size - (i << 16) - i;\n\t\t\t\tbits = \"\\x01\";\n\t\t\t}\n\t\t\twrite(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t\t}\n\n\t\t/* Create crc32 lookup table */\n\t\tfor (var i = 0; i < 256; i++) {\n\t\t\tvar c = i;\n\t\t\tfor (var j = 0; j < 8; j++) {\n\t\t\t\tif (c & 1) {\n\t\t\t\t\tc = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t\t\t\t} else {\n\t\t\t\t\tc = (c >> 1) & 0x7fffffff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_crc32[i] = c;\n\t\t}\n\n\t\t// compute the index into a png for a given pixel\n\t\tthis.index = function(x,y) {\n\t\t\tvar i = y * (this.width + 1) + x + 1;\n\t\t\tvar j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t\t\treturn j;\n\t\t}\n\n\t\t// convert a color and build up the palette\n\t\tthis.color = function(red, green, blue, alpha) {\n\n\t\t\talpha = alpha >= 0 ? alpha : 255;\n\t\t\tvar color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t\t\tif (typeof this.palette[color] == \"undefined\") {\n\t\t\t\tif (this.pindex == this.depth) return \"\\x00\";\n\n\t\t\t\tvar ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t\t\t\tthis.buffer[ndx + 0] = String.fromCharCode(red);\n\t\t\t\tthis.buffer[ndx + 1] = String.fromCharCode(green);\n\t\t\t\tthis.buffer[ndx + 2] = String.fromCharCode(blue);\n\t\t\t\tthis.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t\t\t\tthis.palette[color] = String.fromCharCode(this.pindex++);\n\t\t\t}\n\t\t\treturn this.palette[color];\n\t\t}\n\n\t\t// output a PNG string, Base64 encoded\n\t\tthis.getBase64 = function() {\n\n\t\t\tvar s = this.getDump();\n\n\t\t\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\tvar l = s.length;\n\t\t\tvar i = 0;\n\t\t\tvar r = \"\";\n\n\t\t\tdo {\n\t\t\t\tc1 = s.charCodeAt(i);\n\t\t\t\te1 = c1 >> 2;\n\t\t\t\tc2 = s.charCodeAt(i+1);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t\t\t\tc3 = s.charCodeAt(i+2);\n\t\t\t\tif (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t\t\t\tif (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t\t\t\tr+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t\t\t} while ((i+= 3) < l);\n\t\t\treturn r;\n\t\t}\n\n\t\t// output a PNG string\n\t\tthis.getDump = function() {\n\n\t\t\t// compute adler32 of output pixels + row filter bytes\n\t\t\tvar BASE = 65521; /* largest prime smaller than 65536 */\n\t\t\tvar NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t\t\tvar s1 = 1;\n\t\t\tvar s2 = 0;\n\t\t\tvar n = NMAX;\n\n\t\t\tfor (var y = 0; y < this.height; y++) {\n\t\t\t\tfor (var x = -1; x < this.width; x++) {\n\t\t\t\t\ts1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t\t\t\t\ts2+= s1;\n\t\t\t\t\tif ((n-= 1) == 0) {\n\t\t\t\t\t\ts1%= BASE;\n\t\t\t\t\t\ts2%= BASE;\n\t\t\t\t\t\tn = NMAX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts1%= BASE;\n\t\t\ts2%= BASE;\n\t\t\twrite(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t\t\t// compute crc32 of the PNG chunks\n\t\t\tfunction crc32(png, offs, size) {\n\t\t\t\tvar crc = -1;\n\t\t\t\tfor (var i = 4; i < size-4; i += 1) {\n\t\t\t\t\tcrc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t\t\t\t}\n\t\t\t\twrite(png, offs+size-4, byte4(crc ^ -1));\n\t\t\t}\n\n\t\t\tcrc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t\t\tcrc32(this.buffer, this.plte_offs, this.plte_size);\n\t\t\tcrc32(this.buffer, this.trns_offs, this.trns_size);\n\t\t\tcrc32(this.buffer, this.idat_offs, this.idat_size);\n\t\t\tcrc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t\t\t// convert PNG to string\n\t\t\treturn \"\\x89PNG\\r\\n\\x1a\\n\"+this.buffer.join('');\n\t\t}\n\t}\n\n\t// modified from original source to support NPM\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\tmodule.exports = PNGlib;\n\t} else {\n\t\twindow.PNGlib = PNGlib;\n\t}\n})();\n", "/**\n * Identicon.js 2.3.3\n * http://github.com/stewartlord/identicon.js\n *\n * PNGLib required for PNG output\n * http://www.xarg.org/download/pnglib.js\n *\n * Copyright 2018, Stewart Lord\n * Released under the BSD license\n * http://www.opensource.org/licenses/bsd-license.php\n */\n\n(function() {\n    var PNGlib;\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        PNGlib = require('./pnglib');\n    } else {\n        PNGlib = window.PNGlib;\n    }\n\n    var Identicon = function(hash, options){\n        if (typeof(hash) !== 'string' || hash.length < 15) {\n            throw 'A hash of at least 15 characters is required.';\n        }\n\n        this.defaults = {\n            background: [240, 240, 240, 255],\n            margin:     0.08,\n            size:       64,\n            saturation: 0.7,\n            brightness: 0.5,\n            format:     'png'\n        };\n\n        this.options = typeof(options) === 'object' ? options : this.defaults;\n\n        // backward compatibility with old constructor (hash, size, margin)\n        if (typeof(arguments[1]) === 'number') { this.options.size   = arguments[1]; }\n        if (arguments[2])                      { this.options.margin = arguments[2]; }\n\n        this.hash        = hash\n        this.background  = this.options.background || this.defaults.background;\n        this.size        = this.options.size       || this.defaults.size;\n        this.format      = this.options.format     || this.defaults.format;\n        this.margin      = this.options.margin !== undefined ? this.options.margin : this.defaults.margin;\n\n        // foreground defaults to last 7 chars as hue at 70% saturation, 50% brightness\n        var hue          = parseInt(this.hash.substr(-7), 16) / 0xfffffff;\n        var saturation   = this.options.saturation || this.defaults.saturation;\n        var brightness   = this.options.brightness || this.defaults.brightness;\n        this.foreground  = this.options.foreground || this.hsl2rgb(hue, saturation, brightness);\n    };\n\n    Identicon.prototype = {\n        background: null,\n        foreground: null,\n        hash:       null,\n        margin:     null,\n        size:       null,\n        format:     null,\n\n        image: function(){\n            return this.isSvg()\n                ? new Svg(this.size, this.foreground, this.background)\n                : new PNGlib(this.size, this.size, 256);\n        },\n\n        render: function(){\n            var image      = this.image(),\n                size       = this.size,\n                baseMargin = Math.floor(size * this.margin),\n                cell       = Math.floor((size - (baseMargin * 2)) / 5),\n                margin     = Math.floor((size - cell * 5) / 2),\n                bg         = image.color.apply(image, this.background),\n                fg         = image.color.apply(image, this.foreground);\n\n            // the first 15 characters of the hash control the pixels (even/odd)\n            // they are drawn down the middle first, then mirrored outwards\n            var i, color;\n            for (i = 0; i < 15; i++) {\n                color = parseInt(this.hash.charAt(i), 16) % 2 ? bg : fg;\n                if (i < 5) {\n                    this.rectangle(2 * cell + margin, i * cell + margin, cell, cell, color, image);\n                } else if (i < 10) {\n                    this.rectangle(1 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);\n                    this.rectangle(3 * cell + margin, (i - 5) * cell + margin, cell, cell, color, image);\n                } else if (i < 15) {\n                    this.rectangle(0 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);\n                    this.rectangle(4 * cell + margin, (i - 10) * cell + margin, cell, cell, color, image);\n                }\n            }\n\n            return image;\n        },\n\n        rectangle: function(x, y, w, h, color, image){\n            if (this.isSvg()) {\n                image.rectangles.push({x: x, y: y, w: w, h: h, color: color});\n            } else {\n                var i, j;\n                for (i = x; i < x + w; i++) {\n                    for (j = y; j < y + h; j++) {\n                        image.buffer[image.index(i, j)] = color;\n                    }\n                }\n            }\n        },\n\n        // adapted from: https://gist.github.com/aemkei/1325937\n        hsl2rgb: function(h, s, b){\n            h *= 6;\n            s = [\n                b += s *= b < .5 ? b : 1 - b,\n                b - h % 1 * s * 2,\n                b -= s *= 2,\n                b,\n                b + h % 1 * s,\n                b + s\n            ];\n\n            return[\n                s[ ~~h    % 6 ] * 255, // red\n                s[ (h|16) % 6 ] * 255, // green\n                s[ (h|8)  % 6 ] * 255  // blue\n            ];\n        },\n\n        toString: function(raw){\n            // backward compatibility with old toString, default to base64\n            if (raw) {\n                return this.render().getDump();\n            } else {\n                return this.render().getBase64();\n            }\n        },\n\n        isSvg: function(){\n            return this.format.match(/svg/i)\n        }\n    };\n\n    var Svg = function(size, foreground, background){\n        this.size       = size;\n        this.foreground = this.color.apply(this, foreground);\n        this.background = this.color.apply(this, background);\n        this.rectangles = [];\n    };\n\n    Svg.prototype = {\n        size:       null,\n        foreground: null,\n        background: null,\n        rectangles: null,\n\n        color: function(r, g, b, a){\n            var values = [r, g, b].map(Math.round);\n            values.push((a >= 0) && (a <= 255) ? a/255 : 1);\n            return 'rgba(' + values.join(',') + ')';\n        },\n\n        getDump: function(){\n          var i,\n                xml,\n                rect,\n                fg     = this.foreground,\n                bg     = this.background,\n                stroke = this.size * 0.005;\n\n            xml = \"<svg xmlns='http://www.w3.org/2000/svg'\"\n                + \" width='\" + this.size + \"' height='\" + this.size + \"'\"\n                + \" style='background-color:\" + bg + \";'>\"\n                + \"<g style='fill:\" + fg + \"; stroke:\" + fg + \"; stroke-width:\" + stroke + \";'>\";\n\n            for (i = 0; i < this.rectangles.length; i++) {\n                rect = this.rectangles[i];\n                if (rect.color == bg) continue;\n                xml += \"<rect \"\n                    + \" x='\"      + rect.x + \"'\"\n                    + \" y='\"      + rect.y + \"'\"\n                    + \" width='\"  + rect.w + \"'\"\n                    + \" height='\" + rect.h + \"'\"\n                    + \"/>\";\n            }\n            xml += \"</g></svg>\"\n\n            return xml;\n        },\n\n        getBase64: function(){\n            if ('function' === typeof btoa) {\n                return btoa(this.getDump());\n            } else if (Buffer) {\n                return new Buffer(this.getDump(), 'binary').toString('base64');\n            } else {\n                throw 'Cannot generate base64 output';\n            }\n        }\n    };\n\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n        module.exports = Identicon;\n    } else {\n        window.Identicon = Identicon;\n    }\n})();\n"],
  "mappings": ";;;;;AAAA;AAAA;AAWA,KAAC,WAAW;AAGX,eAAS,MAAM,QAAQ,MAAM;AAC5B,iBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAC1C,mBAAS,IAAI,GAAG,IAAI,UAAU,CAAC,EAAE,QAAQ,KAAK;AAC7C,mBAAO,MAAM,IAAI,UAAU,CAAC,EAAE,OAAO,CAAC;AAAA,UACvC;AAAA,QACD;AAAA,MACD;AAEA,eAAS,MAAM,GAAG;AACjB,eAAO,OAAO,aAAc,KAAK,IAAK,KAAK,IAAI,GAAG;AAAA,MACnD;AAEA,eAAS,MAAM,GAAG;AACjB,eAAO,OAAO,aAAc,KAAK,KAAM,KAAM,KAAK,KAAM,KAAM,KAAK,IAAK,KAAK,IAAI,GAAG;AAAA,MACrF;AAEA,eAAS,SAAS,GAAG;AACpB,eAAO,OAAO,aAAa,IAAI,KAAM,KAAK,IAAK,GAAG;AAAA,MACnD;AAGA,UAAI,SAAS,SAAS,OAAM,QAAO,OAAO;AAEzC,aAAK,QAAU;AACf,aAAK,SAAU;AACf,aAAK,QAAU;AAGf,aAAK,WAAW,UAAU,QAAQ;AAGlC,aAAK,YAAY,IAAI,KAAK,WAAW,IAAI,KAAK,OAAO,QAAS,KAAK,YAAY,KAAM,IAAI;AAGzF,aAAK,YAAY;AACjB,aAAK,YAAY,IAAI,IAAI,KAAK;AAC9B,aAAK,YAAY,KAAK,YAAY,KAAK;AACvC,aAAK,YAAY,IAAI,IAAI,IAAI,QAAQ;AACrC,aAAK,YAAY,KAAK,YAAY,KAAK;AACvC,aAAK,YAAY,IAAI,IAAI,QAAQ;AACjC,aAAK,YAAY,KAAK,YAAY,KAAK;AACvC,aAAK,YAAY,IAAI,IAAI,KAAK,YAAY;AAC1C,aAAK,YAAY,KAAK,YAAY,KAAK;AACvC,aAAK,YAAY,IAAI,IAAI;AACzB,aAAK,cAAe,KAAK,YAAY,KAAK;AAE1C,aAAK,SAAU,IAAI,MAAM;AACzB,aAAK,UAAU,IAAI,OAAO;AAC1B,aAAK,SAAU;AAEf,YAAI,SAAS,IAAI,MAAM;AAGvB,iBAAS,IAAI,GAAG,IAAI,KAAK,aAAa,KAAK;AAC1C,eAAK,OAAO,CAAC,IAAI;AAAA,QAClB;AAGA,cAAM,KAAK,QAAQ,KAAK,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,QAAQ,MAAM,KAAK,GAAG,MAAM,MAAM,GAAG,KAAU;AAC9G,cAAM,KAAK,QAAQ,KAAK,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,MAAM;AACrE,cAAM,KAAK,QAAQ,KAAK,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,MAAM;AACrE,cAAM,KAAK,QAAQ,KAAK,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,MAAM;AACrE,cAAM,KAAK,QAAQ,KAAK,WAAW,MAAM,KAAK,YAAY,EAAE,GAAG,MAAM;AAGrE,YAAI,SAAW,KAAK,KAAK,MAAO,IAAM,KAAK;AAC3C,kBAAS,KAAM,SAAS;AAExB,cAAM,KAAK,QAAQ,KAAK,YAAY,GAAG,MAAM,MAAM,CAAC;AAGpD,iBAAS,IAAI,IAAI,KAAK,MAAM,IAAI,KAAK,UAAU,KAAK;AACnD,cAAI,MAAM;AACV,cAAI,IAAI,QAAS,KAAK,UAAU;AAC/B,mBAAO;AACP,mBAAO;AAAA,UACR,OAAO;AACN,mBAAO,KAAK,YAAY,KAAK,MAAM;AACnC,mBAAO;AAAA,UACR;AACA,gBAAM,KAAK,QAAQ,KAAK,YAAY,IAAI,KAAK,KAAK,OAAO,KAAK,IAAI,MAAM,SAAS,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;AAAA,QACxG;AAGA,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,cAAI,IAAI;AACR,mBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,gBAAI,IAAI,GAAG;AACV,kBAAI,aAAe,KAAK,IAAK;AAAA,YAC9B,OAAO;AACN,kBAAK,KAAK,IAAK;AAAA,YAChB;AAAA,UACD;AACA,iBAAO,CAAC,IAAI;AAAA,QACb;AAGA,aAAK,QAAQ,SAAS,GAAE,GAAG;AAC1B,cAAIA,KAAI,KAAK,KAAK,QAAQ,KAAK,IAAI;AACnC,cAAIC,KAAI,KAAK,YAAY,IAAI,IAAI,IAAI,KAAK,MAAOD,KAAI,QAAU,CAAC,IAAIA;AACpE,iBAAOC;AAAA,QACR;AAGA,aAAK,QAAQ,SAAS,KAAK,OAAO,MAAM,OAAO;AAE9C,kBAAQ,SAAS,IAAI,QAAQ;AAC7B,cAAI,UAAa,SAAS,IAAK,QAAQ,IAAK,UAAU,IAAK;AAE3D,cAAI,OAAO,KAAK,QAAQ,KAAK,KAAK,aAAa;AAC9C,gBAAI,KAAK,UAAU,KAAK,MAAO,QAAO;AAEtC,gBAAI,MAAM,KAAK,YAAY,IAAI,IAAI,KAAK;AAExC,iBAAK,OAAO,MAAM,CAAC,IAAI,OAAO,aAAa,GAAG;AAC9C,iBAAK,OAAO,MAAM,CAAC,IAAI,OAAO,aAAa,KAAK;AAChD,iBAAK,OAAO,MAAM,CAAC,IAAI,OAAO,aAAa,IAAI;AAC/C,iBAAK,OAAO,KAAK,YAAU,IAAE,KAAK,MAAM,IAAI,OAAO,aAAa,KAAK;AAErE,iBAAK,QAAQ,KAAK,IAAI,OAAO,aAAa,KAAK,QAAQ;AAAA,UACxD;AACA,iBAAO,KAAK,QAAQ,KAAK;AAAA,QAC1B;AAGA,aAAK,YAAY,WAAW;AAE3B,cAAI,IAAI,KAAK,QAAQ;AAErB,cAAI,KAAK;AACT,cAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC5B,cAAI,IAAI,EAAE;AACV,cAAID,KAAI;AACR,cAAI,IAAI;AAER,aAAG;AACF,iBAAK,EAAE,WAAWA,EAAC;AACnB,iBAAK,MAAM;AACX,iBAAK,EAAE,WAAWA,KAAE,CAAC;AACrB,kBAAO,KAAK,MAAM,IAAM,MAAM;AAC9B,iBAAK,EAAE,WAAWA,KAAE,CAAC;AACrB,gBAAI,IAAIA,KAAE,GAAG;AAAE,mBAAK;AAAA,YAAI,OAAO;AAAE,oBAAO,KAAK,OAAQ,IAAM,MAAM;AAAA,YAAI;AACrE,gBAAI,IAAIA,KAAE,GAAG;AAAE,mBAAK;AAAA,YAAI,OAAO;AAAE,mBAAK,KAAK;AAAA,YAAM;AACjD,iBAAI,GAAG,OAAO,EAAE,IAAI,GAAG,OAAO,EAAE,IAAI,GAAG,OAAO,EAAE,IAAI,GAAG,OAAO,EAAE;AAAA,UACjE,UAAUA,MAAI,KAAK;AACnB,iBAAO;AAAA,QACR;AAGA,aAAK,UAAU,WAAW;AAGzB,cAAI,OAAO;AACX,cAAI,OAAO;AACX,cAAI,KAAK;AACT,cAAI,KAAK;AACT,cAAI,IAAI;AAER,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,qBAAS,IAAI,IAAI,IAAI,KAAK,OAAO,KAAK;AACrC,oBAAK,KAAK,OAAO,KAAK,MAAM,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;AAC/C,oBAAK;AACL,mBAAK,KAAI,MAAM,GAAG;AACjB,sBAAK;AACL,sBAAK;AACL,oBAAI;AAAA,cACL;AAAA,YACD;AAAA,UACD;AACA,gBAAK;AACL,gBAAK;AACL,gBAAM,KAAK,QAAQ,KAAK,YAAY,KAAK,YAAY,GAAG,MAAO,MAAM,KAAM,EAAE,CAAC;AAG9E,mBAAS,MAAM,KAAK,MAAME,OAAM;AAC/B,gBAAI,MAAM;AACV,qBAASF,KAAI,GAAGA,KAAIE,QAAK,GAAGF,MAAK,GAAG;AACnC,oBAAM,QAAQ,MAAM,IAAI,OAAKA,EAAC,EAAE,WAAW,CAAC,KAAK,GAAI,IAAM,OAAO,IAAK;AAAA,YACxE;AACA,kBAAM,KAAK,OAAKE,QAAK,GAAG,MAAM,MAAM,EAAE,CAAC;AAAA,UACxC;AAEA,gBAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS;AACjD,gBAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS;AACjD,gBAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS;AACjD,gBAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS;AACjD,gBAAM,KAAK,QAAQ,KAAK,WAAW,KAAK,SAAS;AAGjD,iBAAO,gBAAoB,KAAK,OAAO,KAAK,EAAE;AAAA,QAC/C;AAAA,MACD;AAGA,UAAI,OAAO,WAAW,eAAe,OAAO,OAAO,YAAY,aAAa;AAC3E,eAAO,UAAU;AAAA,MAClB,OAAO;AACN,eAAO,SAAS;AAAA,MACjB;AAAA,IACD,GAAG;AAAA;AAAA;;;ACrNH;AAAA;AAYA,KAAC,WAAW;AACR,UAAI;AACJ,UAAI,OAAO,WAAW,eAAe,OAAO,OAAO,YAAY,aAAa;AACxE,iBAAS;AAAA,MACb,OAAO;AACH,iBAAS,OAAO;AAAA,MACpB;AAEA,UAAI,YAAY,SAAS,MAAM,SAAQ;AACnC,YAAI,OAAO,SAAU,YAAY,KAAK,SAAS,IAAI;AAC/C,gBAAM;AAAA,QACV;AAEA,aAAK,WAAW;AAAA,UACZ,YAAY,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,UAC/B,QAAY;AAAA,UACZ,MAAY;AAAA,UACZ,YAAY;AAAA,UACZ,YAAY;AAAA,UACZ,QAAY;AAAA,QAChB;AAEA,aAAK,UAAU,OAAO,YAAa,WAAW,UAAU,KAAK;AAG7D,YAAI,OAAO,UAAU,CAAC,MAAO,UAAU;AAAE,eAAK,QAAQ,OAAS,UAAU,CAAC;AAAA,QAAG;AAC7E,YAAI,UAAU,CAAC,GAAwB;AAAE,eAAK,QAAQ,SAAS,UAAU,CAAC;AAAA,QAAG;AAE7E,aAAK,OAAc;AACnB,aAAK,aAAc,KAAK,QAAQ,cAAc,KAAK,SAAS;AAC5D,aAAK,OAAc,KAAK,QAAQ,QAAc,KAAK,SAAS;AAC5D,aAAK,SAAc,KAAK,QAAQ,UAAc,KAAK,SAAS;AAC5D,aAAK,SAAc,KAAK,QAAQ,WAAW,SAAY,KAAK,QAAQ,SAAS,KAAK,SAAS;AAG3F,YAAI,MAAe,SAAS,KAAK,KAAK,OAAO,EAAE,GAAG,EAAE,IAAI;AACxD,YAAI,aAAe,KAAK,QAAQ,cAAc,KAAK,SAAS;AAC5D,YAAI,aAAe,KAAK,QAAQ,cAAc,KAAK,SAAS;AAC5D,aAAK,aAAc,KAAK,QAAQ,cAAc,KAAK,QAAQ,KAAK,YAAY,UAAU;AAAA,MAC1F;AAEA,gBAAU,YAAY;AAAA,QAClB,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,MAAY;AAAA,QACZ,QAAY;AAAA,QACZ,MAAY;AAAA,QACZ,QAAY;AAAA,QAEZ,OAAO,WAAU;AACb,iBAAO,KAAK,MAAM,IACZ,IAAI,IAAI,KAAK,MAAM,KAAK,YAAY,KAAK,UAAU,IACnD,IAAI,OAAO,KAAK,MAAM,KAAK,MAAM,GAAG;AAAA,QAC9C;AAAA,QAEA,QAAQ,WAAU;AACd,cAAI,QAAa,KAAK,MAAM,GACxB,OAAa,KAAK,MAClB,aAAa,KAAK,MAAM,OAAO,KAAK,MAAM,GAC1C,OAAa,KAAK,OAAO,OAAQ,aAAa,KAAM,CAAC,GACrD,SAAa,KAAK,OAAO,OAAO,OAAO,KAAK,CAAC,GAC7C,KAAa,MAAM,MAAM,MAAM,OAAO,KAAK,UAAU,GACrD,KAAa,MAAM,MAAM,MAAM,OAAO,KAAK,UAAU;AAIzD,cAAI,GAAG;AACP,eAAK,IAAI,GAAG,IAAI,IAAI,KAAK;AACrB,oBAAQ,SAAS,KAAK,KAAK,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,KAAK;AACrD,gBAAI,IAAI,GAAG;AACP,mBAAK,UAAU,IAAI,OAAO,QAAQ,IAAI,OAAO,QAAQ,MAAM,MAAM,OAAO,KAAK;AAAA,YACjF,WAAW,IAAI,IAAI;AACf,mBAAK,UAAU,IAAI,OAAO,SAAS,IAAI,KAAK,OAAO,QAAQ,MAAM,MAAM,OAAO,KAAK;AACnF,mBAAK,UAAU,IAAI,OAAO,SAAS,IAAI,KAAK,OAAO,QAAQ,MAAM,MAAM,OAAO,KAAK;AAAA,YACvF,WAAW,IAAI,IAAI;AACf,mBAAK,UAAU,IAAI,OAAO,SAAS,IAAI,MAAM,OAAO,QAAQ,MAAM,MAAM,OAAO,KAAK;AACpF,mBAAK,UAAU,IAAI,OAAO,SAAS,IAAI,MAAM,OAAO,QAAQ,MAAM,MAAM,OAAO,KAAK;AAAA,YACxF;AAAA,UACJ;AAEA,iBAAO;AAAA,QACX;AAAA,QAEA,WAAW,SAAS,GAAG,GAAG,GAAG,GAAG,OAAO,OAAM;AACzC,cAAI,KAAK,MAAM,GAAG;AACd,kBAAM,WAAW,KAAK,EAAC,GAAM,GAAM,GAAM,GAAM,MAAY,CAAC;AAAA,UAChE,OAAO;AACH,gBAAI,GAAG;AACP,iBAAK,IAAI,GAAG,IAAI,IAAI,GAAG,KAAK;AACxB,mBAAK,IAAI,GAAG,IAAI,IAAI,GAAG,KAAK;AACxB,sBAAM,OAAO,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI;AAAA,cACtC;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA;AAAA,QAGA,SAAS,SAAS,GAAG,GAAG,GAAE;AACtB,eAAK;AACL,cAAI;AAAA,YACA,KAAK,KAAK,IAAI,MAAK,IAAI,IAAI;AAAA,YAC3B,IAAI,IAAI,IAAI,IAAI;AAAA,YAChB,KAAK,KAAK;AAAA,YACV;AAAA,YACA,IAAI,IAAI,IAAI;AAAA,YACZ,IAAI;AAAA,UACR;AAEA,iBAAM;AAAA,YACF,EAAG,CAAC,CAAC,IAAO,CAAE,IAAI;AAAA;AAAA,YAClB,GAAI,IAAE,MAAM,CAAE,IAAI;AAAA;AAAA,YAClB,GAAI,IAAE,KAAM,CAAE,IAAI;AAAA;AAAA,UACtB;AAAA,QACJ;AAAA,QAEA,UAAU,SAAS,KAAI;AAEnB,cAAI,KAAK;AACL,mBAAO,KAAK,OAAO,EAAE,QAAQ;AAAA,UACjC,OAAO;AACH,mBAAO,KAAK,OAAO,EAAE,UAAU;AAAA,UACnC;AAAA,QACJ;AAAA,QAEA,OAAO,WAAU;AACb,iBAAO,KAAK,OAAO,MAAM,MAAM;AAAA,QACnC;AAAA,MACJ;AAEA,UAAI,MAAM,SAAS,MAAM,YAAY,YAAW;AAC5C,aAAK,OAAa;AAClB,aAAK,aAAa,KAAK,MAAM,MAAM,MAAM,UAAU;AACnD,aAAK,aAAa,KAAK,MAAM,MAAM,MAAM,UAAU;AACnD,aAAK,aAAa,CAAC;AAAA,MACvB;AAEA,UAAI,YAAY;AAAA,QACZ,MAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QACZ,YAAY;AAAA,QAEZ,OAAO,SAAS,GAAG,GAAG,GAAG,GAAE;AACvB,cAAI,SAAS,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,KAAK,KAAK;AACrC,iBAAO,KAAM,KAAK,KAAO,KAAK,MAAO,IAAE,MAAM,CAAC;AAC9C,iBAAO,UAAU,OAAO,KAAK,GAAG,IAAI;AAAA,QACxC;AAAA,QAEA,SAAS,WAAU;AACjB,cAAI,GACE,KACA,MACA,KAAS,KAAK,YACd,KAAS,KAAK,YACd,SAAS,KAAK,OAAO;AAEzB,gBAAM,oDACa,KAAK,OAAO,eAAe,KAAK,OAAO,+BACtB,KAAK,uBACf,KAAK,cAAc,KAAK,oBAAoB,SAAS;AAE/E,eAAK,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,KAAK;AACzC,mBAAO,KAAK,WAAW,CAAC;AACxB,gBAAI,KAAK,SAAS,GAAI;AACtB,mBAAO,eACa,KAAK,IAAI,UACT,KAAK,IAAI,cACT,KAAK,IAAI,eACT,KAAK,IAAI;AAAA,UAEjC;AACA,iBAAO;AAEP,iBAAO;AAAA,QACX;AAAA,QAEA,WAAW,WAAU;AACjB,cAAI,eAAe,OAAO,MAAM;AAC5B,mBAAO,KAAK,KAAK,QAAQ,CAAC;AAAA,UAC9B,WAAW,QAAQ;AACf,mBAAO,IAAI,OAAO,KAAK,QAAQ,GAAG,QAAQ,EAAE,SAAS,QAAQ;AAAA,UACjE,OAAO;AACH,kBAAM;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,OAAO,WAAW,eAAe,OAAO,OAAO,YAAY,aAAa;AACxE,eAAO,UAAU;AAAA,MACrB,OAAO;AACH,eAAO,YAAY;AAAA,MACvB;AAAA,IACJ,GAAG;AAAA;AAAA;",
  "names": ["i", "j", "size"]
}
