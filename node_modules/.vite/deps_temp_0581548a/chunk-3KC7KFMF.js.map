{
  "version": 3,
  "sources": ["../../.pnpm/applesauce-content@0.7.0_typescript@5.6.2/node_modules/applesauce-content/dist/nast/find-and-replace.js"],
  "sourcesContent": ["import { visitParents } from \"unist-util-visit-parents\";\nexport function findAndReplace(tree, list) {\n    const pairs = list;\n    let pairIndex = -1;\n    const visitor = (node, parents) => {\n        let index = -1;\n        /** @type {Parents | undefined} */\n        let grandparent;\n        while (++index < parents.length) {\n            const parent = parents[index];\n            // const siblings = grandparent ? grandparent.children : undefined;\n            grandparent = parent;\n        }\n        if (grandparent) {\n            return handler(node, parents);\n        }\n        return undefined;\n    };\n    while (++pairIndex < pairs.length) {\n        visitParents(tree, \"text\", visitor);\n    }\n    /**\n     * Handle a text node which is not in an ignored parent.\n     *\n     * @param {Text} node\n     *   Text node.\n     * @param {Array<Parents>} parents\n     *   Parents.\n     * @returns {VisitorResult}\n     *   Result.\n     */\n    function handler(node, parents) {\n        const parent = parents[parents.length - 1];\n        const find = pairs[pairIndex][0];\n        const replace = pairs[pairIndex][1];\n        let start = 0;\n        const siblings = parent.children;\n        const index = siblings.indexOf(node);\n        let change = false;\n        let nodes = [];\n        find.lastIndex = 0;\n        let match = find.exec(node.value);\n        while (match) {\n            const position = match.index;\n            /** @type {RegExpMatchObject} */\n            // const matchObject = {\n            //   index: match.index,\n            //   input: match.input,\n            //   stack: [...parents, node],\n            // };\n            // let value = replace(...match, matchObject);\n            let value = replace(...match);\n            if (typeof value === \"string\") {\n                value = value.length > 0 ? { type: \"text\", value } : undefined;\n            }\n            // It wasnâ€™t a match after all.\n            if (value === false) {\n                // False acts as if there was no match.\n                // So we need to reset `lastIndex`, which currently being at the end of\n                // the current match, to the beginning.\n                find.lastIndex = position + 1;\n            }\n            else {\n                if (start !== position) {\n                    nodes.push({\n                        type: \"text\",\n                        value: node.value.slice(start, position),\n                    });\n                }\n                if (Array.isArray(value)) {\n                    nodes.push(...value);\n                }\n                else if (value) {\n                    nodes.push(value);\n                }\n                start = position + match[0].length;\n                change = true;\n            }\n            if (!find.global) {\n                break;\n            }\n            match = find.exec(node.value);\n        }\n        if (change) {\n            if (start < node.value.length) {\n                nodes.push({ type: \"text\", value: node.value.slice(start) });\n            }\n            parent.children.splice(index, 1, ...nodes);\n        }\n        else {\n            nodes = [node];\n        }\n        return index + nodes.length;\n    }\n}\n"],
  "mappings": ";;;;;AACO,SAAS,eAAe,MAAM,MAAM;AACvC,QAAM,QAAQ;AACd,MAAI,YAAY;AAChB,QAAM,UAAU,CAAC,MAAM,YAAY;AAC/B,QAAI,QAAQ;AAEZ,QAAI;AACJ,WAAO,EAAE,QAAQ,QAAQ,QAAQ;AAC7B,YAAM,SAAS,QAAQ,KAAK;AAE5B,oBAAc;AAAA,IAClB;AACA,QAAI,aAAa;AACb,aAAO,QAAQ,MAAM,OAAO;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AACA,SAAO,EAAE,YAAY,MAAM,QAAQ;AAC/B,iBAAa,MAAM,QAAQ,OAAO;AAAA,EACtC;AAWA,WAAS,QAAQ,MAAM,SAAS;AAC5B,UAAM,SAAS,QAAQ,QAAQ,SAAS,CAAC;AACzC,UAAM,OAAO,MAAM,SAAS,EAAE,CAAC;AAC/B,UAAM,UAAU,MAAM,SAAS,EAAE,CAAC;AAClC,QAAI,QAAQ;AACZ,UAAM,WAAW,OAAO;AACxB,UAAM,QAAQ,SAAS,QAAQ,IAAI;AACnC,QAAI,SAAS;AACb,QAAI,QAAQ,CAAC;AACb,SAAK,YAAY;AACjB,QAAI,QAAQ,KAAK,KAAK,KAAK,KAAK;AAChC,WAAO,OAAO;AACV,YAAM,WAAW,MAAM;AAQvB,UAAI,QAAQ,QAAQ,GAAG,KAAK;AAC5B,UAAI,OAAO,UAAU,UAAU;AAC3B,gBAAQ,MAAM,SAAS,IAAI,EAAE,MAAM,QAAQ,MAAM,IAAI;AAAA,MACzD;AAEA,UAAI,UAAU,OAAO;AAIjB,aAAK,YAAY,WAAW;AAAA,MAChC,OACK;AACD,YAAI,UAAU,UAAU;AACpB,gBAAM,KAAK;AAAA,YACP,MAAM;AAAA,YACN,OAAO,KAAK,MAAM,MAAM,OAAO,QAAQ;AAAA,UAC3C,CAAC;AAAA,QACL;AACA,YAAI,MAAM,QAAQ,KAAK,GAAG;AACtB,gBAAM,KAAK,GAAG,KAAK;AAAA,QACvB,WACS,OAAO;AACZ,gBAAM,KAAK,KAAK;AAAA,QACpB;AACA,gBAAQ,WAAW,MAAM,CAAC,EAAE;AAC5B,iBAAS;AAAA,MACb;AACA,UAAI,CAAC,KAAK,QAAQ;AACd;AAAA,MACJ;AACA,cAAQ,KAAK,KAAK,KAAK,KAAK;AAAA,IAChC;AACA,QAAI,QAAQ;AACR,UAAI,QAAQ,KAAK,MAAM,QAAQ;AAC3B,cAAM,KAAK,EAAE,MAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,KAAK,EAAE,CAAC;AAAA,MAC/D;AACA,aAAO,SAAS,OAAO,OAAO,GAAG,GAAG,KAAK;AAAA,IAC7C,OACK;AACD,cAAQ,CAAC,IAAI;AAAA,IACjB;AACA,WAAO,QAAQ,MAAM;AAAA,EACzB;AACJ;",
  "names": []
}
