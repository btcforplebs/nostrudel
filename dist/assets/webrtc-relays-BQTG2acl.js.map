{"version":3,"file":"webrtc-relays-BQTG2acl.js","sources":["../../src/classes/webrtc/nostr-webrtc-peer.tsx","../../src/classes/webrtc/nostr-webrtc-broker.ts","../../src/classes/webrtc/webrtc-relay-client.ts","../../src/classes/webrtc/webrtc-relay-server.ts","../../src/services/webrtc-relays.ts"],"sourcesContent":["import { Debugger } from \"debug\";\nimport EventEmitter from \"eventemitter3\";\nimport dayjs from \"dayjs\";\nimport { EventTemplate, Filter, NostrEvent } from \"nostr-tools\";\nimport { SubCloser, SubscribeManyParams } from \"nostr-tools/abstract-pool\";\nimport { logger } from \"../../helpers/debug\";\n\nexport const RTCDescriptionEventKind = 25050;\nexport const RTCICEEventKind = 25051;\n\nexport type Signer = {\n  getPublicKey: () => Promise<string> | string;\n  signEvent: (event: EventTemplate) => Promise<NostrEvent> | NostrEvent;\n  nip44: {\n    encrypt: (pubkey: string, plaintext: string) => Promise<string> | string;\n    decrypt: (pubkey: string, ciphertext: string) => Promise<string> | string;\n  };\n};\n\nexport type Pool = {\n  subscribeMany(relays: string[], filters: Filter[], params: SubscribeManyParams): SubCloser;\n  publish(relays: string[], event: NostrEvent): Promise<string>[];\n};\n\ntype EventMap = {\n  connected: [];\n  disconnected: [];\n  message: [string];\n};\n\nexport default class NostrWebRTCPeer extends EventEmitter<EventMap> {\n  log: Debugger;\n  signer: Signer;\n  pool: Pool;\n  peer?: string;\n  relays: string[] = [];\n  iceServers: RTCIceServer[] = [];\n\n  connection: RTCPeerConnection;\n  channel?: RTCDataChannel;\n\n  subscription?: SubCloser;\n\n  async isCaller() {\n    if (!this.offerEvent) return null;\n    return (await this.signer.getPublicKey()) === this.offerEvent?.pubkey;\n  }\n  get offer() {\n    return this.connection?.localDescription;\n  }\n  offerEvent?: NostrEvent;\n  get answer() {\n    return this.connection?.remoteDescription;\n  }\n  answerEvent?: NostrEvent;\n\n  private candidateQueue: RTCIceCandidateInit[] = [];\n\n  constructor(signer: Signer, pool: Pool, relays?: string[], iceServers?: RTCIceServer[]) {\n    super();\n    this.log = logger.extend(`NostrWebRTCPeer`);\n    this.signer = signer;\n    this.pool = pool;\n\n    if (iceServers) this.iceServers = iceServers;\n    if (relays) this.relays = relays;\n\n    // create connection\n    this.connection = new RTCPeerConnection({ iceServers: this.iceServers });\n    this.log(\"Created local connection\");\n\n    this.connection.onicecandidate = async ({ candidate }) => {\n      if (candidate) {\n        this.candidateQueue.push(candidate.toJSON());\n      } else this.flushCandidateQueue();\n    };\n    this.connection.onicegatheringstatechange = this.flushCandidateQueue.bind(this);\n    this.connection.onconnectionstatechange = (event) => {\n      switch (this.connection?.connectionState) {\n        case \"connected\":\n          this.emit(\"connected\");\n          break;\n        case \"disconnected\":\n          this.emit(\"disconnected\");\n          break;\n      }\n    };\n\n    // receive data channel\n    this.connection.ondatachannel = ({ channel }) => {\n      this.log(\"Got data channel\", channel.id, channel.label);\n\n      if (channel.label !== \"nostr\") return;\n\n      this.channel = channel;\n      this.channel.onclose = this.onChannelStateChange.bind(this);\n      this.channel.onopen = this.onChannelStateChange.bind(this);\n      this.channel.onmessage = this.handleChannelMessage.bind(this);\n    };\n  }\n\n  private async flushCandidateQueue() {\n    if (this.connection?.iceGatheringState !== \"complete\") return;\n\n    if (this.offerEvent && this.answerEvent && this.peer && this.candidateQueue.length > 0) {\n      const cipherText = await this.signer.nip44.encrypt(this.peer, JSON.stringify(this.candidateQueue));\n      const iceEvent = await this.signer.signEvent({\n        kind: RTCICEEventKind,\n        content: cipherText,\n        tags: [[\"e\", this.offerEvent.id]],\n        created_at: dayjs().unix(),\n      });\n\n      this.log(`Publishing ${this.candidateQueue.length} ICE candidates`);\n      await this.pool.publish(this.relays, iceEvent);\n      this.candidateQueue = [];\n    }\n  }\n\n  async makeCall(peer: string) {\n    if (this.peer) throw new Error(\"Already calling peer\");\n\n    const pc = this.connection;\n\n    this.channel = pc.createDataChannel(\"nostr\", { ordered: true });\n    this.channel.onopen = this.onChannelStateChange.bind(this);\n    this.channel.onclose = this.onChannelStateChange.bind(this);\n    this.channel.onmessage = this.handleChannelMessage.bind(this);\n\n    this.log(`Making call to ${peer} `);\n\n    const offer = await pc.createOffer();\n    const cipherText = await this.signer.nip44.encrypt(peer, JSON.stringify(offer));\n    const offerEvent = await this.signer.signEvent({\n      kind: RTCDescriptionEventKind,\n      content: cipherText,\n      tags: [[\"p\", peer], ...this.relays.map((r) => [\"relay\", r])],\n      created_at: dayjs().unix(),\n    });\n\n    this.log(\"Created offer\");\n\n    // listen for answers and ice events\n    this.subscription = this.pool.subscribeMany(\n      this.relays,\n      [\n        {\n          kinds: [RTCDescriptionEventKind, RTCICEEventKind],\n          \"#e\": [offerEvent.id],\n          authors: [peer],\n        },\n      ],\n      {\n        onevent: async (event: NostrEvent) => {\n          if (!this.offerEvent) return;\n          if (!event.tags.some((t) => t[0] === \"e\" && t[1] === this.offerEvent?.id)) return;\n\n          console.log(event);\n\n          switch (event.kind) {\n            case RTCDescriptionEventKind:\n              await this.handleAnswer(event);\n              // got answer, send ICE candidates\n              await this.flushCandidateQueue();\n              break;\n            case RTCICEEventKind:\n              await this.handleICEEvent(event);\n              break;\n          }\n        },\n        onclose: () => {\n          this.log(\"Signaling subscription closed\");\n        },\n      },\n    );\n\n    this.peer = peer;\n\n    this.log(\"Publishing event\", offerEvent.id);\n    await this.pool.publish(this.relays, offerEvent);\n    await pc.setLocalDescription(offer);\n\n    this.offerEvent = offerEvent;\n  }\n\n  async handleAnswer(event: NostrEvent) {\n    const pc = this.connection;\n\n    if (!pc.localDescription) throw new Error(\"Got answer without offering\");\n\n    const plaintext = await this.signer.nip44.decrypt(event.pubkey, event.content);\n    const answer = JSON.parse(plaintext) as RTCSessionDescriptionInit;\n    if (answer.type !== \"answer\") throw new Error(\"Unexpected rtc description type\");\n\n    this.log(\"Got answer\");\n\n    await pc.setRemoteDescription(answer);\n\n    this.answerEvent = event;\n  }\n\n  async answerCall(event: NostrEvent) {\n    const pc = this.connection;\n\n    this.log(`Answering call ${event.id} from ${event.pubkey}`);\n\n    const plaintext = await this.signer.nip44.decrypt(event.pubkey, event.content);\n    const offer = JSON.parse(plaintext) as RTCSessionDescriptionInit;\n    if (offer.type !== \"offer\") throw new Error(\"Unexpected rtc description type\");\n\n    this.relays = event.tags.filter((t) => t[0] === \"relay\" && t[1]).map((t) => t[1]);\n    this.log(`Switching to callers signaling relays`, this.relays);\n\n    await pc.setRemoteDescription(offer);\n\n    const answer = await pc.createAnswer();\n    const cipherText = await this.signer.nip44.encrypt(event.pubkey, JSON.stringify(answer));\n    const answerEvent = await this.signer.signEvent({\n      kind: RTCDescriptionEventKind,\n      content: cipherText,\n      tags: [\n        [\"p\", event.pubkey],\n        [\"e\", event.id],\n      ],\n      created_at: dayjs().unix(),\n    });\n\n    this.log(\"Created answer\");\n\n    this.peer = event.pubkey;\n    this.offerEvent = event;\n\n    // listen for ice events\n    this.subscription = this.pool.subscribeMany(\n      this.relays,\n      [{ kinds: [RTCICEEventKind], \"#e\": [event.id], authors: [event.pubkey] }],\n      {\n        onevent: async (event) => {\n          if (!this.offerEvent) return;\n          if (!event.tags.some((t) => t[0] === \"e\" && t[1] === this.offerEvent?.id)) return;\n\n          switch (event.kind) {\n            case RTCICEEventKind:\n              await this.handleICEEvent(event);\n              break;\n          }\n        },\n        onclose: () => {\n          this.log(\"Signaling subscription closed\");\n        },\n      },\n    );\n\n    this.log(\"Publishing event\", answerEvent.id);\n\n    await this.pool.publish(this.relays, answerEvent);\n    await pc.setLocalDescription(answer);\n    this.answerEvent = answerEvent;\n\n    // answered call, send ICE candidates\n    await this.flushCandidateQueue();\n  }\n\n  private async handleICEEvent(event: NostrEvent) {\n    if (!this.connection) throw new Error(\"Got ICE event without connection\");\n    const pc = this.connection;\n\n    const plaintext = await this.signer.nip44.decrypt(event.pubkey, event.content);\n    const candidates = JSON.parse(plaintext) as RTCIceCandidateInit[];\n\n    this.log(`Got ${candidates.length} candidates`);\n\n    for (let candidate of candidates) {\n      await pc.addIceCandidate(candidate);\n    }\n  }\n\n  private onChannelStateChange() {\n    const readyState = this.channel?.readyState;\n    console.log(\"Send channel state is: \" + readyState);\n  }\n\n  private handleChannelMessage(event: MessageEvent<any>) {\n    if (typeof event.data === \"string\") this.emit(\"message\", event.data);\n  }\n\n  send(message: string) {\n    this.channel?.send(message);\n  }\n\n  hangup() {\n    this.log(\"Closing data channel\");\n    if (this.channel) this.channel.close();\n    this.log(\"Closing connection\");\n    if (this.connection) this.connection.close();\n  }\n}\n\nif (import.meta.env.DEV) {\n  // @ts-expect-error\n  window.WebRTCPeer = NostrWebRTCPeer;\n}\n","import { SubCloser } from \"nostr-tools/abstract-pool\";\nimport EventEmitter from \"eventemitter3\";\nimport { generateSecretKey, nip19, NostrEvent } from \"nostr-tools\";\nimport { bytesToHex, hexToBytes } from \"@noble/hashes/utils\";\nimport { SimpleSigner } from \"applesauce-signer\";\nimport dayjs from \"dayjs\";\n\nimport NostrWebRTCPeer, { Pool, RTCDescriptionEventKind, Signer } from \"./nostr-webrtc-peer\";\nimport { isHex } from \"../../helpers/nip19\";\nimport { logger } from \"../../helpers/debug\";\n\ntype EventMap = {\n  call: [NostrEvent];\n};\n\nexport default class NostrWebRtcBroker extends EventEmitter<EventMap> {\n  log = logger.extend(\"NostrWebRtcBroker\");\n  signer: Signer;\n  pool: Pool;\n  defaultRelays: string[];\n  iceServers: RTCIceServer[] = [];\n\n  peers = new Map<string, NostrWebRTCPeer>();\n  signers = new Map<string, Signer>();\n  relays = new Map<string, string[]>();\n\n  constructor(signer: Signer, pool: Pool, relays: string[]) {\n    super();\n    this.signer = signer;\n    this.pool = pool;\n    this.defaultRelays = relays;\n  }\n\n  getConnection(pubkey: string) {\n    return this.peers.get(pubkey);\n  }\n\n  async requestConnection(uri: string) {\n    const { pubkey, relays, key } = NostrWebRtcBroker.parseNostrWebRtcURI(uri);\n\n    const cached = this.peers.get(pubkey);\n    if (cached) return cached;\n\n    this.log(`Creating new connection for ${pubkey}`);\n\n    // set signer\n    let signer = this.signer;\n    if (key) {\n      signer = new SimpleSigner(key);\n      this.signers.set(pubkey, signer);\n    }\n\n    // set relays\n    if (relays.length > 0) this.relays.set(pubkey, relays);\n    else this.relays.set(pubkey, this.defaultRelays);\n\n    const peer = new NostrWebRTCPeer(\n      signer,\n      this.pool,\n      relays.length > 0 ? relays : this.defaultRelays,\n      this.iceServers,\n    );\n    this.peers.set(pubkey, peer);\n    await peer.makeCall(pubkey);\n\n    return peer;\n  }\n\n  setPeerSigner(pubkey: string, signer: Signer) {\n    this.signers.set(pubkey, signer);\n  }\n\n  async answerCall(event: NostrEvent): Promise<NostrWebRTCPeer> {\n    if (this.peers.has(event.pubkey)) throw new Error(\"Already have a peer connection for this pubkey\");\n\n    // set signer\n    let signer = this.signers.get(event.pubkey);\n    if (!signer) {\n      signer = this.signer;\n      this.signers.set(event.pubkey, signer);\n    }\n\n    const peer = new NostrWebRTCPeer(signer, this.pool, this.defaultRelays, this.iceServers);\n    this.peers.set(event.pubkey, peer);\n    await peer.answerCall(event);\n\n    return peer;\n  }\n\n  closeConnection(pubkey: string) {\n    const peer = this.peers.get(pubkey);\n    if (peer) {\n      this.log(`Hanging up connection to ${pubkey}`);\n      peer.hangup();\n      this.peers.delete(pubkey);\n    }\n  }\n\n  listening = false;\n  subscription?: SubCloser;\n\n  async listenForCalls() {\n    if (this.listening) throw new Error(\"Already listening\");\n\n    this.log(\"Listening for calls\");\n\n    this.listening = true;\n    this.subscription = this.pool.subscribeMany(\n      this.defaultRelays,\n      [{ kinds: [RTCDescriptionEventKind], \"#p\": [await this.signer.getPublicKey()], since: dayjs().unix() }],\n      {\n        onevent: (event) => {\n          this.emit(\"call\", event);\n        },\n        onclose: () => {\n          this.listening = false;\n        },\n      },\n    );\n  }\n\n  stopListening() {\n    if (!this.listening) return;\n\n    this.log(\"Stop listening for calls\");\n\n    if (this.subscription) this.subscription.close();\n    this.subscription = undefined;\n    this.listening = false;\n  }\n\n  static parseNostrWebRtcURI(uri: string | URL) {\n    const url = typeof uri === \"string\" ? new URL(uri) : uri;\n    if (url.protocol !== \"webrtc+nostr:\") throw new Error(\"Incorrect protocol\");\n    const parsedPath = nip19.decode(url.pathname);\n    const keyParam = url.searchParams.get(\"key\");\n    const relays = url.searchParams.getAll(\"relay\");\n    if (parsedPath.type !== \"npub\") throw new Error(\"Incorrect npub\");\n    const pubkey = parsedPath.data;\n    if (keyParam && !isHex(keyParam)) throw new Error(\"Key must be in hex format\");\n    const key = keyParam ? hexToBytes(keyParam) : null;\n    return { pubkey, key, relays };\n  }\n\n  static createNostrWebRtcURI(pubkey: string, relays: string[], key?: Uint8Array | boolean) {\n    const uri = new URL(`webrtc+nostr:${nip19.npubEncode(pubkey)}`);\n    for (const relay of relays) uri.searchParams.append(\"relay\", relay);\n    if (key === true) uri.searchParams.append(\"key\", bytesToHex(generateSecretKey()));\n    else if (key instanceof Uint8Array) uri.searchParams.append(\"key\", bytesToHex(key));\n    return uri.toString();\n  }\n}\n\nif (import.meta.env.DEV) {\n  // @ts-expect-error\n  window.NostrWebRtcBroker = NostrWebRtcBroker;\n}\n","import { NostrEvent } from \"nostr-tools\";\nimport NostrWebRTCPeer from \"./nostr-webrtc-peer\";\nimport { AbstractRelay, AbstractRelayConstructorOptions } from \"nostr-tools/abstract-relay\";\n\nexport class WebRtcWebSocket extends EventTarget implements WebSocket {\n  binaryType: BinaryType = \"blob\";\n  bufferedAmount: number = 0;\n  extensions: string = \"\";\n  protocol: string = \"webrtc\";\n\n  peer: NostrWebRTCPeer;\n  url: string;\n\n  onclose: ((this: WebSocket, ev: CloseEvent) => any) | null = null;\n  onerror: ((this: WebSocket, ev: Event) => any) | null = null;\n  onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null = null;\n  onopen: ((this: WebSocket, ev: Event) => any) | null = null;\n\n  constructor(peer: NostrWebRTCPeer) {\n    super();\n    this.peer = peer;\n    this.url = `webrtc+nostr:` + peer.answerEvent?.pubkey;\n\n    this.peer.on(\"message\", this.handleMessage, this);\n    this.peer.on(\"connected\", this.handleConnect, this);\n    this.peer.on(\"disconnected\", this.handleDisconnect, this);\n\n    if (this.readyState === WebRtcWebSocket.OPEN) {\n      setTimeout(() => this.handleConnect(), 100);\n    }\n  }\n\n  get readyState() {\n    const state = this.peer.connection?.connectionState;\n    switch (state) {\n      case \"closed\":\n      case \"disconnected\":\n        return this.CLOSED;\n      case \"failed\":\n        return this.CLOSED;\n      case \"connected\":\n        return this.OPEN;\n      case \"new\":\n      case \"connecting\":\n      default:\n        return this.CONNECTING;\n    }\n  }\n\n  private handleMessage(data: string) {\n    const event = new MessageEvent(\"message\", { data });\n    this.onmessage?.(event);\n    this.dispatchEvent(event);\n  }\n  private handleConnect() {\n    const event = new Event(\"open\");\n    this.onopen?.(event);\n    this.dispatchEvent(event);\n  }\n  private handleDisconnect() {\n    const event = new CloseEvent(\"close\", { reason: \"none\" });\n    this.onclose?.(event);\n    this.dispatchEvent(event);\n\n    this.peer.off(\"message\", this.handleMessage, this);\n    this.peer.off(\"connected\", this.handleConnect, this);\n    this.peer.off(\"disconnected\", this.handleDisconnect, this);\n  }\n\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\n  send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;\n  send(data: unknown): void {\n    if (typeof data === \"string\") {\n      this.peer.send(data);\n    } else throw new Error(\"Unsupported data type\");\n  }\n\n  close(code?: number, reason?: string): void;\n  close(code?: number, reason?: string): void;\n  close(code?: unknown, reason?: unknown): void {\n    this.peer.hangup();\n\n    this.peer.off(\"message\", this.handleMessage, this);\n    this.peer.off(\"connected\", this.handleConnect, this);\n    this.peer.off(\"disconnected\", this.handleDisconnect, this);\n  }\n\n  readonly CONNECTING = WebSocket.CONNECTING;\n  readonly OPEN = WebSocket.OPEN;\n  readonly CLOSING = WebSocket.CLOSING;\n  readonly CLOSED = WebSocket.CLOSED;\n  static readonly CONNECTING = WebSocket.CONNECTING;\n  static readonly OPEN = WebSocket.OPEN;\n  static readonly CLOSING = WebSocket.CLOSING;\n  static readonly CLOSED = WebSocket.CLOSED;\n}\n\nexport default class WebRtcRelayClient extends AbstractRelay {\n  stats = {\n    events: {\n      published: 0,\n      received: 0,\n    },\n  };\n\n  constructor(peer: NostrWebRTCPeer, opts: AbstractRelayConstructorOptions) {\n    super(\"wss://example.com\", opts);\n\n    // @ts-expect-error\n    this.url = `webrtc+nostr:` + peer.answerEvent?.pubkey;\n\n    this.connectionTimeout = 30_000;\n\n    // @ts-expect-error\n    this._WebSocket = function () {\n      return new WebRtcWebSocket(peer);\n    };\n  }\n\n  publish(event: NostrEvent): Promise<string> {\n    this.stats.events.published++;\n    return super.publish(event);\n  }\n}\n\nif (import.meta.env.DEV) {\n  // @ts-expect-error\n  window.WebRtcWebSocket = WebRtcWebSocket;\n  // @ts-expect-error\n  window.WebRtcRelayClient = WebRtcRelayClient;\n}\n","import EventEmitter from \"eventemitter3\";\nimport { Filter, NostrEvent } from \"nostr-tools\";\nimport { AbstractRelay, Subscription } from \"nostr-tools/abstract-relay\";\n\nimport NostrWebRTCPeer from \"./nostr-webrtc-peer\";\nimport { logger } from \"../../helpers/debug\";\n\ntype EventMap = {\n  call: [NostrEvent];\n};\n\nexport default class WebRtcRelayServer extends EventEmitter<EventMap> {\n  log = logger.extend(\"WebRtcRelayServer\");\n\n  peer: NostrWebRTCPeer;\n  upstream: AbstractRelay;\n\n  // A map of subscriptions\n  subscriptions = new Map<string, Subscription>();\n\n  stats = {\n    events: {\n      sent: 0,\n      received: 0,\n    },\n  };\n\n  constructor(peer: NostrWebRTCPeer, upstream: AbstractRelay) {\n    super();\n    this.peer = peer;\n    this.upstream = upstream;\n\n    this.peer.on(\"message\", this.handleMessage, this);\n    this.peer.on(\"disconnected\", this.handleDisconnect, this);\n  }\n\n  private send(data: any[]) {\n    this.peer.send(JSON.stringify(data));\n  }\n\n  async handleMessage(message: string) {\n    let data;\n\n    try {\n      data = JSON.parse(message);\n\n      if (!Array.isArray(data)) throw new Error(\"Message is not an array\");\n\n      // Pass the data to appropriate handler\n      switch (data[0]) {\n        case \"REQ\":\n          await this.handleSubscriptionMessage(data);\n          break;\n        case \"EVENT\":\n          // only handle publish EVENT methods\n          if (typeof data[1] !== \"string\") {\n            await this.handleEventMessage(data);\n          }\n          break;\n        case \"CLOSE\":\n          await this.handleCloseMessage(data);\n          break;\n      }\n    } catch (err) {\n      this.log(\"Failed to handle message\", message, err);\n    }\n\n    return data;\n  }\n\n  handleSubscriptionMessage(data: any[]) {\n    const [_, id, ...filters] = data as [string, string, ...Filter[]];\n\n    let sub = this.subscriptions.get(id);\n    if (sub) {\n      sub.filters = filters;\n      sub.fire();\n    } else {\n      sub = this.upstream.subscribe(filters, {\n        onevent: (event) => {\n          this.stats.events.sent++;\n          this.send([\"EVENT\", id, event]);\n        },\n        onclose: (reason) => this.send([\"CLOSED\", id, reason]),\n        oneose: () => this.send([\"EOSE\", id]),\n      });\n    }\n  }\n\n  handleCloseMessage(data: any[]) {\n    const [_, id] = data as [string, string, ...Filter[]];\n\n    let sub = this.subscriptions.get(id);\n    if (sub) {\n      sub.close();\n      this.subscriptions.delete(id);\n    }\n  }\n\n  async handleEventMessage(data: any[]) {\n    const [_, event] = data as [string, NostrEvent];\n\n    try {\n      const result = await this.upstream.publish(event);\n      this.stats.events.received++;\n      this.peer.send(JSON.stringify([\"OK\", event.id, true, result]));\n    } catch (error) {\n      if (error instanceof Error) this.peer.send(JSON.stringify([\"OK\", event.id, false, error.message]));\n    }\n  }\n\n  handleDisconnect() {\n    for (const [id, sub] of this.subscriptions) sub.close();\n    this.subscriptions.clear();\n  }\n\n  destroy() {\n    this.peer.off(\"message\", this.handleMessage, this);\n    this.peer.off(\"disconnected\", this.handleDisconnect, this);\n  }\n}\n","import { NostrEvent, SimplePool } from \"nostr-tools\";\nimport { AbstractRelay } from \"nostr-tools/abstract-relay\";\nimport { SimpleSigner } from \"applesauce-signer\";\n\nimport { logger } from \"../helpers/debug\";\nimport NostrWebRtcBroker from \"../classes/webrtc/nostr-webrtc-broker\";\nimport WebRtcRelayClient from \"../classes/webrtc/webrtc-relay-client\";\nimport WebRtcRelayServer from \"../classes/webrtc/webrtc-relay-server\";\nimport NostrWebRTCPeer from \"../classes/webrtc/nostr-webrtc-peer\";\nimport verifyEventMethod from \"./verify-event\";\nimport { localRelay } from \"./local-relay\";\nimport localSettings from \"./local-settings\";\nimport { DEFAULT_ICE_SERVERS } from \"../const\";\n\nclass WebRtcRelaysService {\n  log = logger.extend(\"NostrWebRtcBroker\");\n  broker: NostrWebRtcBroker;\n  pubkey?: string;\n  upstream: AbstractRelay | null;\n\n  approved: string[] = [];\n\n  calls: NostrEvent[] = [];\n  get answered() {\n    const answered: { call: NostrEvent; peer: NostrWebRTCPeer; pubkey: string }[] = [];\n    for (const call of this.calls) {\n      const peer = this.broker.peers.get(call.pubkey);\n      if (peer && peer.peer && peer.connection.connectionState !== \"new\") {\n        answered.push({ call, peer, pubkey: peer.peer });\n      }\n    }\n    return answered;\n  }\n  get pendingOutgoing() {\n    const pending: { call: NostrEvent; peer: NostrWebRTCPeer }[] = [];\n    for (const call of this.calls) {\n      const pubkey = call.tags.find((t) => t[0] === \"p\" && t[1])?.[1];\n      if (!pubkey) continue;\n      const peer = this.broker.peers.get(pubkey);\n      if (peer && peer.connection.connectionState === \"new\") pending.push({ call, peer });\n    }\n    return pending;\n  }\n  get pendingIncoming() {\n    return this.calls.filter((event) => event.pubkey !== this.pubkey && this.broker.peers.has(event.pubkey) === false);\n  }\n\n  clients = new Map<string, WebRtcRelayClient>();\n  servers = new Map<string, WebRtcRelayServer>();\n\n  get relays() {\n    return Array.from(this.clients.values());\n  }\n\n  constructor(broker: NostrWebRtcBroker, upstream: AbstractRelay | null) {\n    this.upstream = upstream;\n    this.broker = broker;\n\n    this.getPubkey();\n  }\n\n  private async getPubkey() {\n    const pubkey = await this.broker.signer.getPublicKey();\n    this.pubkey = pubkey;\n  }\n\n  async handleCall(event: NostrEvent) {\n    if (!this.calls.includes(event)) {\n      this.log(`Received call from ${event.pubkey}`);\n      this.calls.push(event);\n    }\n\n    if (this.approved.includes(event.pubkey)) {\n      this.log(`Answering call from ${event.pubkey}`);\n      const peer = await this.broker.answerCall(event);\n      if (!peer.peer) return;\n\n      if (this.upstream) {\n        const server = new WebRtcRelayServer(peer, this.upstream);\n        this.servers.set(peer.peer, server);\n      }\n\n      const client = new WebRtcRelayClient(peer, {\n        websocketImplementation: WebSocket,\n        verifyEvent: verifyEventMethod,\n      });\n      this.clients.set(peer.peer, client);\n    }\n  }\n\n  async acceptCall(event: NostrEvent) {\n    this.log(`Approving calls from ${event.pubkey}`);\n    this.approved.push(event.pubkey);\n    await this.handleCall(event);\n  }\n\n  async connect(uri: string) {\n    this.log(`Connecting to ${uri}`);\n    const peer = await this.broker.requestConnection(uri);\n    if (!peer.peer) return;\n\n    // add to the list of calls\n    if (peer.offerEvent) this.calls.push(peer.offerEvent);\n\n    if (this.upstream) {\n      const server = new WebRtcRelayServer(peer, this.upstream);\n      this.servers.set(peer.peer, server);\n    }\n\n    const client = new WebRtcRelayClient(peer, {\n      websocketImplementation: WebSocket,\n      verifyEvent: verifyEventMethod,\n    });\n    this.clients.set(peer.peer, client);\n    await client.connect();\n  }\n\n  start() {\n    this.broker.listenForCalls();\n    this.broker.on(\"call\", this.handleCall, this);\n  }\n\n  stop() {\n    this.broker.stopListening();\n    this.broker.off(\"call\", this.handleCall, this);\n  }\n}\n\nconst signer = new SimpleSigner(localSettings.webRtcLocalIdentity.value);\nconst broker = new NostrWebRtcBroker(signer, new SimplePool(), [\"wss://nos.lol\", \"wss://nostrue.com\"]);\nbroker.iceServers = DEFAULT_ICE_SERVERS;\n\nconst webRtcRelaysService = new WebRtcRelaysService(broker, localRelay as AbstractRelay | null);\n\nwebRtcRelaysService.start();\n\n// if (import.meta.env.DEV) {\n// @ts-expect-error\nwindow.webRtcRelaysService = webRtcRelaysService;\n// }\n\nexport default webRtcRelaysService;\n"],"names":["RTCDescriptionEventKind","RTCICEEventKind","NostrWebRTCPeer","EventEmitter","_a","signer","pool","relays","iceServers","logger","candidate","event","channel","cipherText","iceEvent","dayjs","peer","pc","offer","offerEvent","r","t","plaintext","answer","answerEvent","candidates","readyState","message","NostrWebRtcBroker","pubkey","uri","key","cached","SimpleSigner","url","parsedPath","nip19","keyParam","isHex","hexToBytes","relay","bytesToHex","generateSecretKey","WebRtcWebSocket","data","code","reason","WebRtcRelayClient","AbstractRelay","opts","WebRtcRelayServer","upstream","err","_","id","filters","sub","result","error","WebRtcRelaysService","answered","call","pending","broker","server","client","verifyEventMethod","localSettings","SimplePool","DEFAULT_ICE_SERVERS","webRtcRelaysService","localRelay"],"mappings":"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"}