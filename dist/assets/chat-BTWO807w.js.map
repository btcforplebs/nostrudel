{"version":3,"file":"chat-BTWO807w.js","sources":["../../src/views/dms/components/send-message-form.tsx","../../src/views/dms/components/direct-message-block.tsx","../../src/views/dms/components/thread-drawer.tsx","../../src/views/dms/chat.tsx"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport dayjs from \"dayjs\";\nimport { kinds } from \"nostr-tools\";\n\nimport { Button, Flex, FlexProps, Heading } from \"@chakra-ui/react\";\nimport { useSigningContext } from \"../../../providers/global/signing-provider\";\nimport MagicTextArea, { RefType } from \"../../../components/magic-textarea\";\nimport { useTextAreaUploadFileWithForm } from \"../../../hooks/use-textarea-upload-file\";\nimport { DraftNostrEvent } from \"../../../types/nostr-event\";\nimport useUserMailboxes from \"../../../hooks/use-user-mailboxes\";\nimport { usePublishEvent } from \"../../../providers/global/publish-provider\";\nimport useCacheForm from \"../../../hooks/use-cache-form\";\nimport decryptionCacheService from \"../../../services/decryption-cache\";\n\nexport default function SendMessageForm({\n  pubkey,\n  rootId,\n  ...props\n}: { pubkey: string; rootId?: string } & Omit<FlexProps, \"children\">) {\n  const publish = usePublishEvent();\n  const { requestEncrypt } = useSigningContext();\n\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const { getValues, setValue, watch, handleSubmit, formState, reset } = useForm({\n    defaultValues: {\n      content: \"\",\n    },\n    mode: \"all\",\n  });\n  watch(\"content\");\n\n  const clearCache = useCacheForm<{ content: string }>(`dm-${pubkey}`, getValues, reset, formState, {\n    clearOnKeyChange: true,\n  });\n\n  const autocompleteRef = useRef<RefType | null>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\n  const { onPaste } = useTextAreaUploadFileWithForm(autocompleteRef, getValues, setValue);\n\n  const userMailboxes = useUserMailboxes(pubkey);\n  const sendMessage = handleSubmit(async (values) => {\n    if (!values.content) return;\n    setLoadingMessage(\"Encrypting...\");\n    const encrypted = await requestEncrypt(values.content, pubkey);\n\n    const draft: DraftNostrEvent = {\n      kind: kinds.EncryptedDirectMessage,\n      content: encrypted,\n      tags: [[\"p\", pubkey]],\n      created_at: dayjs().unix(),\n    };\n\n    if (rootId) {\n      draft.tags.push([\"e\", rootId, \"\", \"root\"]);\n    }\n\n    setLoadingMessage(\"Signing...\");\n    const pub = await publish(\"Send DM\", draft, userMailboxes?.inboxes);\n\n    if (pub) {\n      clearCache();\n      reset({ content: \"\" });\n\n      // add plaintext to decryption context\n      decryptionCacheService\n        .getOrCreateContainer(pub.event.id, \"nip04\", pubkey, encrypted)\n        .plaintext.next(values.content);\n\n      // refocus input\n      setTimeout(() => textAreaRef.current?.focus(), 50);\n    }\n    setLoadingMessage(\"\");\n  });\n\n  const formRef = useRef<HTMLFormElement | null>(null);\n\n  return (\n    <Flex as=\"form\" gap=\"2\" onSubmit={sendMessage} ref={formRef} {...props}>\n      {loadingMessage ? (\n        <Heading size=\"md\" mx=\"auto\" my=\"4\">\n          {loadingMessage}\n        </Heading>\n      ) : (\n        <>\n          <MagicTextArea\n            mb=\"2\"\n            value={getValues().content}\n            onChange={(e) => setValue(\"content\", e.target.value, { shouldDirty: true, shouldTouch: true })}\n            rows={2}\n            isRequired\n            instanceRef={(inst) => (autocompleteRef.current = inst)}\n            ref={textAreaRef}\n            onPaste={onPaste}\n            onKeyDown={(e) => {\n              if ((e.ctrlKey || e.metaKey) && e.key === \"Enter\" && formRef.current) formRef.current.requestSubmit();\n            }}\n          />\n          <Button type=\"submit\">Send</Button>\n        </>\n      )}\n    </Flex>\n  );\n}\n","import { ReactNode, memo, useCallback } from \"react\";\n\nimport MessageBlock, { MessageBlockProps } from \"../../../components/message/message-block\";\nimport DecryptPlaceholder from \"./decrypt-placeholder\";\nimport DirectMessageContent from \"./direct-message-content\";\nimport { NostrEvent } from \"nostr-tools\";\n\nfunction DirectMessageBlock({ ...props }: Omit<MessageBlockProps, \"renderContent\">) {\n  const renderContent = useCallback(\n    (message: NostrEvent, buttons: ReactNode | null) => (\n      <DecryptPlaceholder message={message} variant=\"link\" py=\"4\" px=\"6rem\">\n        {(plaintext) => (\n          <DirectMessageContent event={message} text={plaintext} display=\"inline\">\n            {buttons}\n          </DirectMessageContent>\n        )}\n      </DecryptPlaceholder>\n    ),\n    [],\n  );\n\n  return <MessageBlock renderContent={renderContent} {...props} />;\n}\n\nexport default memo(DirectMessageBlock);\n","import { useState } from \"react\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerProps,\n  Flex,\n  Spinner,\n  Text,\n  TextProps,\n} from \"@chakra-ui/react\";\nimport { NostrEvent } from \"nostr-tools\";\n\nimport UserAvatar from \"../../../components/user/user-avatar\";\nimport UserLink from \"../../../components/user/user-link\";\nimport DecryptPlaceholder from \"./decrypt-placeholder\";\nimport Timestamp from \"../../../components/timestamp\";\nimport { Thread, useThreadsContext } from \"../../../providers/local/thread-provider\";\nimport ThreadButton from \"../../../components/message/thread-button\";\nimport SendMessageForm from \"./send-message-form\";\nimport { groupMessages } from \"../../../helpers/nostr/dms\";\nimport DirectMessageBlock from \"./direct-message-block\";\nimport decryptionCacheService from \"../../../services/decryption-cache\";\n\nfunction MessagePreview({ message, ...props }: { message: NostrEvent } & Omit<TextProps, \"children\">) {\n  return (\n    <DecryptPlaceholder message={message} variant=\"link\" py=\"4\" px=\"6rem\" zIndex={1}>\n      {(plaintext) => (\n        <Text isTruncated {...props}>\n          {plaintext}\n        </Text>\n      )}\n    </DecryptPlaceholder>\n  );\n}\n\nfunction ThreadCard({ thread }: { thread: Thread }) {\n  const latestMessage = thread.messages[thread.messages.length - 1];\n\n  return (\n    <Card>\n      {thread.root && (\n        <CardHeader px=\"2\" pt=\"2\" pb=\"1\" gap=\"2\" display=\"flex\">\n          <UserAvatar pubkey={thread.root.pubkey} size=\"xs\" />\n          <UserLink fontWeight=\"bold\" pubkey={thread.root.pubkey} />\n          <Timestamp timestamp={latestMessage.created_at} ml=\"auto\" />\n        </CardHeader>\n      )}\n      <CardBody px=\"2\" py=\"1\">\n        {thread.root ? <MessagePreview message={thread.root} /> : <Spinner />}\n      </CardBody>\n      <CardFooter px=\"2\" pb=\"2\" pt=\"0\">\n        <ThreadButton thread={thread} />\n      </CardFooter>\n    </Card>\n  );\n}\n\nfunction ListThreads() {\n  const { threads } = useThreadsContext();\n\n  const latestThreads = Object.values(threads).sort(\n    (a, b) => b.messages[b.messages.length - 1].created_at - a.messages[a.messages.length - 1].created_at,\n  );\n\n  return (\n    <>\n      {latestThreads.map((thread) => (\n        <ThreadCard key={thread.rootId} thread={thread} />\n      ))}\n    </>\n  );\n}\n\nfunction ThreadMessages({ thread, pubkey }: { thread: Thread; pubkey: string }) {\n  const grouped = groupMessages(thread.messages, 5, true);\n\n  return (\n    <>\n      <Flex h=\"0\" flex={1} overflowX=\"hidden\" overflowY=\"scroll\" direction=\"column\" gap=\"2\">\n        {thread.root && <DirectMessageBlock messages={[thread.root]} showThreadButton={false} />}\n        {grouped.map((group) => (\n          <DirectMessageBlock key={group.id} messages={group.events} showThreadButton={false} />\n        ))}\n      </Flex>\n      <SendMessageForm flexShrink={0} pubkey={pubkey} rootId={thread.rootId} />\n    </>\n  );\n}\n\nexport default function ThreadDrawer({\n  threadId,\n  pubkey,\n  ...props\n}: Omit<DrawerProps, \"children\"> & { threadId: string; pubkey: string }) {\n  const { threads, getRoot } = useThreadsContext();\n\n  const thread = threads[threadId];\n  const [loading, setLoading] = useState(false);\n  const decryptAll = async () => {\n    if (!thread) return <Spinner />;\n\n    const promises = thread.messages\n      .map((message) => {\n        const container = decryptionCacheService.getOrCreateContainer(message.id, \"nip04\", pubkey, message.content);\n        if (container.plaintext.value === undefined) return decryptionCacheService.requestDecrypt(container);\n      })\n      .filter(Boolean);\n\n    if (thread.root) {\n      const rootContainer = decryptionCacheService.getOrCreateContainer(\n        thread.root.id,\n        \"nip04\",\n        pubkey,\n        thread.root.content,\n      );\n      if (rootContainer.plaintext.value === undefined) decryptionCacheService.requestDecrypt(rootContainer);\n    }\n\n    setLoading(true);\n    Promise.all(promises).finally(() => setLoading(false));\n  };\n\n  const renderContent = () => {\n    if (threadId === \"list\") return <ListThreads />;\n    if (!thread) {\n      return <ThreadMessages thread={{ rootId: threadId, messages: [], root: getRoot(threadId) }} pubkey={pubkey} />;\n    } else return <ThreadMessages thread={thread} pubkey={pubkey} />;\n  };\n\n  return (\n    <Drawer placement=\"right\" size=\"lg\" {...props}>\n      <DrawerOverlay />\n      <DrawerContent bgColor=\"var(--chakra-colors-chakra-body-bg)\">\n        <DrawerCloseButton />\n        <DrawerHeader p=\"2\" display=\"flex\" gap=\"4\">\n          <Text>Threads</Text>\n          <Button size=\"sm\" onClick={decryptAll} isLoading={loading}>\n            Decrypt All\n          </Button>\n        </DrawerHeader>\n\n        <DrawerBody px=\"2\" pt=\"0\" pb=\"2\" gap=\"2\" display=\"flex\" flexDirection=\"column\">\n          {renderContent()}\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","import { memo, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport { Button, ButtonGroup, Card, Flex, IconButton } from \"@chakra-ui/react\";\nimport { UNSAFE_DataRouterContext, useLocation, useNavigate } from \"react-router-dom\";\nimport { NostrEvent, kinds } from \"nostr-tools\";\n\nimport { ThreadIcon } from \"../../components/icons\";\nimport UserAvatar from \"../../components/user/user-avatar\";\nimport UserLink from \"../../components/user/user-link\";\nimport RequireCurrentAccount from \"../../providers/route/require-current-account\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport useCurrentAccount from \"../../hooks/use-current-account\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport TimelineActionAndStatus from \"../../components/timeline/timeline-action-and-status\";\nimport UserDnsIdentity from \"../../components/user/user-dns-identity\";\nimport SendMessageForm from \"./components/send-message-form\";\nimport { groupMessages } from \"../../helpers/nostr/dms\";\nimport ThreadDrawer from \"./components/thread-drawer\";\nimport ThreadsProvider from \"../../providers/local/thread-provider\";\nimport DirectMessageBlock from \"./components/direct-message-block\";\nimport useParamsProfilePointer from \"../../hooks/use-params-pubkey-pointer\";\nimport useUserMailboxes from \"../../hooks/use-user-mailboxes\";\nimport RelaySet from \"../../classes/relay-set\";\nimport useAppSettings from \"../../hooks/use-app-settings\";\nimport { truncateId } from \"../../helpers/string\";\nimport useRouterMarker from \"../../hooks/use-router-marker\";\nimport { BackIconButton } from \"../../components/router/back-button\";\nimport decryptionCacheService from \"../../services/decryption-cache\";\n\n/** This is broken out from DirectMessageChatPage for performance reasons. Don't use outside of file */\nconst ChatLog = memo(({ messages }: { messages: NostrEvent[] }) => {\n  const filteredMessages = useMemo(\n    () => messages.filter((e) => !e.tags.some((t) => t[0] === \"e\" && t[3] === \"root\")),\n    [messages.length],\n  );\n  const grouped = useMemo(() => groupMessages(filteredMessages), [filteredMessages]);\n\n  return (\n    <>\n      {grouped.map((group) => (\n        <DirectMessageBlock key={group.id} messages={group.events} reverse />\n      ))}\n    </>\n  );\n});\n\nfunction DirectMessageChatPage({ pubkey }: { pubkey: string }) {\n  const account = useCurrentAccount()!;\n  const { autoDecryptDMs } = useAppSettings();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const { router } = useContext(UNSAFE_DataRouterContext)!;\n  const marker = useRouterMarker(router);\n  useEffect(() => {\n    if (location.state?.thread && marker.index.current === null) {\n      // the drawer just open, set the marker\n      marker.set(1);\n    }\n  }, [location]);\n\n  const openDrawerList = useCallback(() => {\n    marker.set(0);\n    navigate(\".\", { state: { thread: \"list\" } });\n  }, [marker, navigate]);\n\n  const closeDrawer = useCallback(() => {\n    if (marker.index.current !== null && marker.index.current > 0) {\n      navigate(-marker.index.current);\n    } else navigate(\".\", { state: { thread: undefined } });\n    marker.reset();\n  }, [marker, navigate]);\n\n  const eventFilter = useCallback(\n    (event: NostrEvent) => {\n      const from = event.pubkey;\n      const to = event.tags.find((t) => t[0] === \"p\")?.[1];\n\n      return (from === account.pubkey && to === pubkey) || (from === pubkey && to === account.pubkey);\n    },\n    [account, pubkey],\n  );\n\n  const otherMailboxes = useUserMailboxes(pubkey);\n  const mailboxes = useUserMailboxes(account.pubkey);\n  const { loader, timeline: messages } = useTimelineLoader(\n    `${truncateId(pubkey)}-${truncateId(account.pubkey)}-messages`,\n    RelaySet.from(mailboxes?.inboxes, mailboxes?.outboxes, otherMailboxes?.inboxes, otherMailboxes?.outboxes),\n    [\n      {\n        kinds: [kinds.EncryptedDirectMessage],\n        \"#p\": [account.pubkey, pubkey],\n        authors: [pubkey, account.pubkey],\n      },\n    ],\n    { eventFilter },\n  );\n\n  const [loading, setLoading] = useState(false);\n  const decryptAll = async () => {\n    const promises = messages\n      .map((message) => {\n        const container = decryptionCacheService.getOrCreateContainer(message.id, \"nip04\", pubkey, message.content);\n        return decryptionCacheService.requestDecrypt(container);\n      })\n      .filter(Boolean);\n\n    setLoading(true);\n    Promise.all(promises).finally(() => setLoading(false));\n  };\n\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <ThreadsProvider timeline={loader}>\n      <IntersectionObserverProvider callback={callback}>\n        <Card size=\"sm\" flexShrink={0} p=\"2\" flexDirection=\"row\">\n          <Flex gap=\"2\" alignItems=\"center\">\n            <BackIconButton />\n            <UserAvatar pubkey={pubkey} size=\"sm\" />\n            <UserLink pubkey={pubkey} fontWeight=\"bold\" />\n            <UserDnsIdentity pubkey={pubkey} onlyIcon />\n          </Flex>\n          <ButtonGroup ml=\"auto\">\n            {!autoDecryptDMs && (\n              <Button onClick={decryptAll} isLoading={loading}>\n                Decrypt All\n              </Button>\n            )}\n            <IconButton\n              aria-label=\"Threads\"\n              title=\"Threads\"\n              icon={<ThreadIcon boxSize={5} />}\n              onClick={openDrawerList}\n            />\n          </ButtonGroup>\n        </Card>\n        <Flex h=\"0\" flex={1} overflowX=\"hidden\" overflowY=\"scroll\" direction=\"column-reverse\" gap=\"2\" py=\"4\" px=\"2\">\n          <ChatLog messages={messages} />\n          <TimelineActionAndStatus timeline={loader} />\n        </Flex>\n        <SendMessageForm flexShrink={0} pubkey={pubkey} />\n        {location.state?.thread && (\n          <ThreadDrawer isOpen onClose={closeDrawer} threadId={location.state.thread} pubkey={pubkey} />\n        )}\n      </IntersectionObserverProvider>\n    </ThreadsProvider>\n  );\n}\n\nexport default function DirectMessageChatView() {\n  const { pubkey } = useParamsProfilePointer();\n\n  return (\n    <RequireCurrentAccount>\n      <DirectMessageChatPage pubkey={pubkey} />\n    </RequireCurrentAccount>\n  );\n}\n"],"names":["SendMessageForm","pubkey","rootId","props","publish","usePublishEvent","requestEncrypt","useSigningContext","loadingMessage","setLoadingMessage","useState","getValues","setValue","watch","handleSubmit","formState","reset","useForm","clearCache","useCacheForm","autocompleteRef","useRef","textAreaRef","onPaste","useTextAreaUploadFileWithForm","userMailboxes","useUserMailboxes","sendMessage","values","encrypted","draft","kinds","dayjs","pub","decryptionCacheService","_a","formRef","jsx","Flex","Heading","jsxs","Fragment","MagicTextArea","e","inst","Button","DirectMessageBlock","renderContent","useCallback","message","buttons","DecryptPlaceholder","plaintext","DirectMessageContent","MessageBlock","memo","MessagePreview","Text","ThreadCard","thread","latestMessage","Card","CardHeader","UserAvatar","UserLink","Timestamp","CardBody","Spinner","CardFooter","ThreadButton","ListThreads","threads","useThreadsContext","latestThreads","a","b","ThreadMessages","grouped","groupMessages","group","ThreadDrawer","threadId","getRoot","loading","setLoading","decryptAll","promises","container","rootContainer","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","ChatLog","messages","filteredMessages","useMemo","t","DirectMessageChatPage","account","useCurrentAccount","autoDecryptDMs","useAppSettings","navigate","useNavigate","location","useLocation","router","useContext","UNSAFE_DataRouterContext","marker","useRouterMarker","useEffect","openDrawerList","closeDrawer","eventFilter","event","from","to","otherMailboxes","mailboxes","loader","useTimelineLoader","truncateId","RelaySet","callback","useTimelineCurserIntersectionCallback","ThreadsProvider","IntersectionObserverProvider","BackIconButton","UserDnsIdentity","ButtonGroup","IconButton","ThreadIcon","TimelineActionAndStatus","DirectMessageChatView","useParamsProfilePointer","RequireCurrentAccount"],"mappings":"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"}