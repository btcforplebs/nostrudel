{"version":3,"file":"index-CRu-rICt.js","sources":["../../src/views/streams/components/top-zappers.tsx","../../src/views/streams/stream/stream-chat/index.tsx","../../src/views/streams/components/stream-summary-content.tsx","../../src/views/streams/components/streamer-cards.tsx","../../src/views/streams/components/stream-sats-per-minute.tsx","../../src/views/streams/components/stream-goal.tsx","../../src/views/streams/components/stream-share-button.tsx","../../src/views/streams/stream/index.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { Flex, FlexProps, Text } from \"@chakra-ui/react\";\nimport { kinds } from \"nostr-tools\";\n\nimport { parseZapEvents } from \"../../../helpers/nostr/zaps\";\nimport UserLink from \"../../../components/user/user-link\";\nimport { LightningIcon } from \"../../../components/icons\";\nimport { readablizeSats } from \"../../../helpers/bolt11\";\nimport useStreamChatTimeline from \"../stream/stream-chat/use-stream-chat-timeline\";\nimport { ParsedStream } from \"../../../helpers/nostr/stream\";\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\n\nexport default function TopZappers({ stream, ...props }: FlexProps & { stream: ParsedStream }) {\n  const { timeline } = useStreamChatTimeline(stream);\n  const zaps = useMemo(() => parseZapEvents(timeline.filter((e) => e.kind === kinds.Zap)), [timeline]);\n\n  const totals: Record<string, number> = {};\n  for (const zap of zaps) {\n    const p = zap.request.pubkey;\n    if (zap.payment.amount) {\n      totals[p] = (totals[p] || 0) + zap.payment.amount;\n    }\n  }\n\n  const sortedTotals = Array.from(Object.entries(totals)).sort((a, b) => b[1] - a[1]);\n\n  return (\n    <Flex overflowX=\"auto\" overflowY=\"hidden\" gap=\"4\" {...props}>\n      {sortedTotals.map(([pubkey, total]) => (\n        <Flex key={pubkey} gap=\"2\" alignItems=\"center\" maxW=\"2xs\">\n          <UserAvatarLink pubkey={pubkey} size=\"sm\" noProxy />\n          <Text whiteSpace=\"nowrap\" isTruncated>\n            <UserLink pubkey={pubkey} fontWeight=\"bold\" />\n            <br />\n            <LightningIcon />\n            {readablizeSats(total / 1000)}\n          </Text>\n        </Flex>\n      ))}\n    </Flex>\n  );\n}\n","import { useRef } from \"react\";\nimport { Card, CardBody, CardHeader, CardProps, Heading } from \"@chakra-ui/react\";\n\nimport { ParsedStream } from \"../../../../helpers/nostr/stream\";\nimport { LightboxProvider } from \"../../../../components/lightbox-provider\";\nimport IntersectionObserverProvider from \"../../../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../../../hooks/use-timeline-cursor-intersection-callback\";\nimport TopZappers from \"../../components/top-zappers\";\nimport ChatMessageForm from \"./stream-chat-form\";\nimport useStreamChatTimeline from \"./use-stream-chat-timeline\";\nimport StreamChatLog from \"./chat-log\";\n\nexport type ChatDisplayMode = \"log\" | \"popup\";\n\nexport default function StreamChat({\n  stream,\n  actions,\n  displayMode,\n  ...props\n}: CardProps & { stream: ParsedStream; actions?: React.ReactNode; displayMode?: ChatDisplayMode }) {\n  const { loader } = useStreamChatTimeline(stream);\n\n  const scrollBox = useRef<HTMLDivElement | null>(null);\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  const isPopup = !!displayMode;\n  const isChatLog = displayMode === \"log\";\n\n  return (\n    <IntersectionObserverProvider callback={callback} root={scrollBox}>\n      <LightboxProvider>\n        <Card {...props} overflow=\"hidden\" background={isChatLog ? \"transparent\" : undefined}>\n          {!isPopup && (\n            <CardHeader py=\"3\" display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n              <Heading size=\"md\">Stream Chat</Heading>\n              {actions}\n            </CardHeader>\n          )}\n          <CardBody display=\"flex\" flexDirection=\"column\" overflow=\"hidden\" p={0}>\n            <TopZappers stream={stream} py=\"2\" px=\"4\" pt={!isPopup ? 0 : undefined} />\n            <StreamChatLog ref={scrollBox} stream={stream} flex={1} px=\"4\" py=\"2\" mb=\"2\" />\n            {!isChatLog && <ChatMessageForm stream={stream} />}\n          </CardBody>\n        </Card>\n      </LightboxProvider>\n    </IntersectionObserverProvider>\n  );\n}\n","import { Box, BoxProps } from \"@chakra-ui/react\";\nimport { useRenderedContent } from \"applesauce-react\";\n\nimport { ParsedStream } from \"../../../helpers/nostr/stream\";\nimport { renderGenericUrl, renderImageUrl } from \"../../../components/content/links\";\nimport { components } from \"../../../components/content\";\n\nconst linkRenderers = [renderImageUrl, renderGenericUrl];\n\nexport default function StreamSummaryContent({ stream, ...props }: BoxProps & { stream: ParsedStream }) {\n  const content = useRenderedContent(stream.event, components, { linkRenderers });\n\n  return (\n    content && (\n      <Box whiteSpace=\"pre-wrap\" {...props}>\n        {content}\n      </Box>\n    )\n  );\n}\n","import { useMemo } from \"react\";\nimport { Card, CardBody, CardHeader, CardProps, Heading, Image, LinkBox, LinkOverlay } from \"@chakra-ui/react\";\n\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\nimport replaceableEventsService from \"../../../services/replaceable-events\";\nimport useSubject from \"../../../hooks/use-subject\";\nimport { isATag } from \"../../../types/nostr-event\";\nimport useReplaceableEvent from \"../../../hooks/use-replaceable-event\";\nimport OpenGraphCard from \"../../../components/open-graph/open-graph-card\";\nimport { useAdditionalRelayContext } from \"../../../providers/local/additional-relay-context\";\nimport { TextNoteContents } from \"../../../components/note/timeline-note/text-note-contents\";\n\nexport const STREAMER_CARDS_TYPE = 17777;\nexport const STREAMER_CARD_TYPE = 37777;\n\nfunction useStreamerCardsCords(pubkey: string, relays: Iterable<string>) {\n  const sub = useMemo(\n    () => replaceableEventsService.requestEvent(relays, STREAMER_CARDS_TYPE, pubkey),\n    [pubkey, relays],\n  );\n  const streamerCards = useSubject(sub);\n\n  return streamerCards?.tags.filter(isATag) ?? [];\n}\n\nfunction StreamerCard({ cord, relay, ...props }: { cord: string; relay?: string } & CardProps) {\n  const contextRelays = useAdditionalRelayContext();\n  const readRelays = useReadRelays(relay ? [...contextRelays, relay] : contextRelays);\n\n  const card = useReplaceableEvent(cord, readRelays);\n  if (!card || card.kind !== STREAMER_CARD_TYPE) return null;\n\n  const title = card.tags.find((t) => t[0] === \"title\")?.[1];\n  const image = card.tags.find((t) => t[0] === \"image\")?.[1];\n  const link = card.tags.find((t) => t[0] === \"r\")?.[1];\n\n  if (!card.content && !image && link) {\n    return <OpenGraphCard url={new URL(link)} />;\n  }\n\n  return (\n    <Card as={LinkBox} variant=\"outline\" {...props}>\n      {image && <Image src={image} />}\n      {title && (\n        <CardHeader p=\"2\">\n          <Heading size=\"md\">{title}</Heading>\n        </CardHeader>\n      )}\n      {card.content && (\n        <CardBody p=\"2\">\n          <TextNoteContents event={card} />\n        </CardBody>\n      )}\n      {link && (\n        <LinkOverlay isExternal href={link} color=\"blue.500\">\n          {!image && link}\n        </LinkOverlay>\n      )}\n    </Card>\n  );\n}\n\nexport default function StreamerCards({ pubkey, ...props }: Omit<CardProps, \"children\"> & { pubkey: string }) {\n  const contextRelays = useAdditionalRelayContext();\n  const readRelays = useReadRelays(contextRelays);\n\n  const cardCords = useStreamerCardsCords(pubkey, readRelays);\n\n  return (\n    <>\n      {cardCords.map(([_, cord, relay]) => (\n        <StreamerCard key={cord} cord={cord} relay={relay} {...props} />\n      ))}\n    </>\n  );\n}\n","import { useCallback, useState } from \"react\";\nimport {\n  Button,\n  Flex,\n  FlexProps,\n  NumberDecrementStepper,\n  NumberIncrementStepper,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverCloseButton,\n  PopoverContent,\n  PopoverHeader,\n  PopoverTrigger,\n  Spinner,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useInterval } from \"react-use\";\n\nimport useUserLNURLMetadata from \"../../../hooks/use-user-lnurl-metadata\";\nimport { parsePaymentRequest } from \"../../../helpers/bolt11\";\nimport { V4VStreamIcon, V4VStopIcon } from \"../../../components/icons\";\n\nexport default function StreamSatsPerMinute({ pubkey, ...props }: { pubkey: string } & FlexProps) {\n  const [enabled, setEnabled] = useState(false);\n  const [paying, setPaying] = useState(false);\n  const [amountStr, setAmountStr] = useState(\"4\");\n\n  const { metadata } = useUserLNURLMetadata(pubkey);\n\n  const isAvailable = !!window.webln;\n  const isEnabled = isAvailable && enabled && !!metadata?.callback;\n\n  const sendSats = useCallback(async () => {\n    if (isEnabled && window.webln) {\n      try {\n        setPaying(true);\n        if (!window.webln.enabled) await window.webln.enable();\n\n        const amountMsats = parseInt(amountStr) * 1000;\n        if (!Number.isFinite(amountMsats)) throw new Error(\"invalid amount\");\n\n        const callbackUrl = new URL(metadata.callback);\n        callbackUrl.searchParams.append(\"amount\", String(amountMsats));\n\n        const { pr: payRequest } = await fetch(callbackUrl).then((res) => res.json());\n\n        if (payRequest as string) {\n          const parsed = parsePaymentRequest(payRequest);\n          if (parsed.amount !== amountMsats) throw new Error(\"incorrect amount\");\n        } else throw new Error(\"Failed to get invoice\");\n\n        await window.webln.sendPayment(payRequest);\n      } catch (e) {\n        setEnabled(false);\n      }\n      setPaying(false);\n    }\n  }, [setPaying, metadata?.callback, enabled, isEnabled]);\n\n  useInterval(sendSats, 1000 * 60);\n\n  return (\n    <Flex gap=\"2\">\n      <Popover>\n        <PopoverTrigger>\n          <Button rightIcon={isEnabled ? <Spinner size=\"sm\" /> : undefined}>Stream sats</Button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <PopoverArrow />\n          <PopoverCloseButton />\n          <PopoverHeader>Stream {amountStr} sats per minute</PopoverHeader>\n          <PopoverBody>\n            {isAvailable ? (\n              <Flex gap=\"2\">\n                <NumberInput\n                  step={1}\n                  min={1}\n                  value={amountStr}\n                  onChange={(v) => setAmountStr(v)}\n                  isDisabled={!isAvailable}\n                >\n                  <NumberInputField />\n                  <NumberInputStepper>\n                    <NumberIncrementStepper />\n                    <NumberDecrementStepper />\n                  </NumberInputStepper>\n                </NumberInput>\n                <Button\n                  leftIcon={isEnabled ? <V4VStopIcon /> : <V4VStreamIcon />}\n                  onClick={() => setEnabled((v) => !v)}\n                  isDisabled={!isAvailable}\n                >\n                  {isEnabled ? \"Stop\" : \"Start\"}\n                </Button>\n              </Flex>\n            ) : (\n              <Text colorScheme=\"orange\">Missing WebLN</Text>\n            )}\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n    </Flex>\n  );\n}\n","import { Link as RouterLink } from \"react-router-dom\";\nimport { Card, CardBody, CardHeader, CardProps, Flex, Heading, Link } from \"@chakra-ui/react\";\n\nimport { ParsedStream } from \"../../../helpers/nostr/stream\";\nimport { getGoalName } from \"../../../helpers/nostr/goal\";\nimport GoalProgress from \"../../goals/components/goal-progress\";\nimport GoalTopZappers from \"../../goals/components/goal-top-zappers\";\nimport GoalZapButton from \"../../goals/components/goal-zap-button\";\nimport useStreamGoal from \"../../../hooks/use-stream-goal\";\nimport relayHintService from \"../../../services/event-relay-hint\";\n\nexport default function StreamGoal({ stream, ...props }: Omit<CardProps, \"children\"> & { stream: ParsedStream }) {\n  const goal = useStreamGoal(stream);\n\n  if (!goal) return null;\n  const address = relayHintService.getSharableEventAddress(goal);\n\n  return (\n    <Card direction=\"column\" gap=\"1\" {...props}>\n      <CardHeader px=\"2\" pt=\"2\" pb=\"0\">\n        <Heading size=\"md\">\n          <Link as={RouterLink} to={`/goals/${address}`}>\n            {getGoalName(goal)}\n          </Link>\n        </Heading>\n      </CardHeader>\n      <CardBody p=\"2\" display=\"flex\" gap=\"2\" flexDirection=\"column\">\n        <GoalProgress goal={goal} />\n        <Flex gap=\"2\" alignItems=\"flex-end\">\n          <GoalTopZappers goal={goal} overflow=\"hidden\" flex={1} />\n          <GoalZapButton goal={goal} flexShrink={0} />\n        </Flex>\n      </CardBody>\n    </Card>\n  );\n}\n","import { useContext } from \"react\";\nimport { Button, ButtonProps } from \"@chakra-ui/react\";\n\nimport { PostModalContext } from \"../../../providers/route/post-modal-provider\";\nimport { RepostIcon } from \"../../../components/icons\";\nimport { ParsedStream } from \"../../../helpers/nostr/stream\";\nimport useShareableEventAddress from \"../../../hooks/use-shareable-event-address\";\n\nexport type StreamShareButtonProps = Omit<ButtonProps, \"children\" | \"onClick\"> & {\n  stream: ParsedStream;\n};\n\nexport default function StreamShareButton({\n  stream,\n  \"aria-label\": ariaLabel,\n  title = \"Quote repost\",\n  ...props\n}: StreamShareButtonProps) {\n  const { openModal } = useContext(PostModalContext);\n\n  const handleClick = () => {\n    const address = useShareableEventAddress(stream.event);\n    openModal({ initContent: \"\\nnostr:\" + address });\n  };\n\n  return (\n    <Button leftIcon={<RepostIcon />} onClick={handleClick} aria-label={ariaLabel || title} title={title} {...props}>\n      Share\n    </Button>\n  );\n}\n","import { useEffect, useMemo, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  ButtonGroup,\n  Divider,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  Flex,\n  Heading,\n  Spacer,\n  Spinner,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { useParams, Navigate, useSearchParams, useNavigate } from \"react-router-dom\";\nimport { kinds, nip19 } from \"nostr-tools\";\nimport { Global, css } from \"@emotion/react\";\n\nimport { ParsedStream, parseStreamEvent } from \"../../../helpers/nostr/stream\";\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\nimport { unique } from \"../../../helpers/array\";\nimport LiveVideoPlayer from \"../../../components/live-video-player\";\nimport StreamChat, { ChatDisplayMode } from \"./stream-chat\";\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../components/user/user-link\";\nimport StreamSummaryContent from \"../components/stream-summary-content\";\nimport { ChevronLeftIcon, ExternalLinkIcon } from \"../../../components/icons\";\nimport useSetColorMode from \"../../../hooks/use-set-color-mode\";\nimport { CopyIconButton } from \"../../../components/copy-icon-button\";\nimport replaceableEventsService from \"../../../services/replaceable-events\";\nimport useSubject from \"../../../hooks/use-subject\";\nimport StreamerCards from \"../components/streamer-cards\";\nimport { useAppTitle } from \"../../../hooks/use-app-title\";\nimport StreamSatsPerMinute from \"../components/stream-sats-per-minute\";\nimport { UserEmojiProvider } from \"../../../providers/global/emoji-provider\";\nimport StreamStatusBadge from \"../components/status-badge\";\nimport ChatMessageForm from \"./stream-chat/stream-chat-form\";\nimport StreamChatLog from \"./stream-chat/chat-log\";\nimport TopZappers from \"../components/top-zappers\";\nimport StreamHashtags from \"../components/stream-hashtags\";\nimport StreamZapButton from \"../components/stream-zap-button\";\nimport StreamGoal from \"../components/stream-goal\";\nimport StreamShareButton from \"../components/stream-share-button\";\nimport VerticalPageLayout from \"../../../components/vertical-page-layout\";\nimport { useBreakpointValue } from \"../../../providers/global/breakpoint-provider\";\nimport { AdditionalRelayProvider } from \"../../../providers/local/additional-relay-context\";\nimport DebugEventButton from \"../../../components/debug-modal/debug-event-button\";\n\nfunction DesktopStreamPage({ stream }: { stream: ParsedStream }) {\n  useAppTitle(stream.title);\n  const navigate = useNavigate();\n\n  const [showChat, setShowChat] = useState(true);\n\n  const renderActions = () => {\n    return (\n      <ButtonGroup>\n        <CopyIconButton\n          value={location.href + \"?displayMode=log&colorMode=dark\"}\n          aria-label=\"Copy chat log URL\"\n          title=\"Copy chat log URL\"\n          size=\"sm\"\n        />\n        <Button\n          rightIcon={<ExternalLinkIcon />}\n          size=\"sm\"\n          onClick={() => {\n            const w = 512;\n            const h = 910;\n            const y = window.screenTop + window.innerHeight - h;\n            const x = window.screenLeft + window.innerWidth - w;\n            window.open(location.href + \"?displayMode=popup\", \"_blank\", `width=${w},height=${h},left=${x},top=${y}`);\n          }}\n        >\n          Open\n        </Button>\n      </ButtonGroup>\n    );\n  };\n\n  return (\n    <VerticalPageLayout>\n      <Flex gap=\"2\" alignItems=\"center\">\n        <Button onClick={() => navigate(-1)} leftIcon={<ChevronLeftIcon boxSize={6} />}>\n          Back\n        </Button>\n        <UserAvatarLink pubkey={stream.host} size=\"sm\" display={{ base: \"none\", md: \"block\" }} />\n        <Heading size=\"md\" isTruncated display={{ base: \"none\", md: \"initial\" }}>\n          {stream.title}\n        </Heading>\n        <StreamStatusBadge stream={stream} fontSize=\"lg\" />\n        <Spacer />\n        <StreamShareButton stream={stream} title=\"Share stream\" />\n        <DebugEventButton event={stream.event} variant=\"ghost\" />\n        <Button onClick={() => setShowChat((v) => !v)}>{showChat ? \"Hide\" : \"Show\"} Chat</Button>\n      </Flex>\n      <Flex gap=\"2\" maxH=\"calc(100vh - 4rem)\" overflow=\"hidden\">\n        <LiveVideoPlayer\n          stream={stream.streaming || stream.recording}\n          autoPlay={!!stream.streaming}\n          poster={stream.image}\n          // NOTE: width=0 is used for chromium browser to stop the video element from pushing the chat off screen\n          w={0}\n          flexGrow={1}\n          mx=\"auto\"\n        />\n        {showChat && (\n          <Flex direction=\"column\" gap=\"2\" flexGrow={1} maxW=\"lg\" flexShrink={0}>\n            <StreamGoal stream={stream} />\n            <StreamChat stream={stream} actions={renderActions()} flex={1} />\n          </Flex>\n        )}\n      </Flex>\n      <Flex gap=\"2\" alignItems=\"center\">\n        <UserAvatarLink pubkey={stream.host} noProxy />\n        <Box>\n          <Heading size=\"md\">{stream.title}</Heading>\n          <UserLink pubkey={stream.host} />\n        </Box>\n        <Spacer />\n        {!!window.webln && <StreamSatsPerMinute pubkey={stream.host} />}\n      </Flex>\n      <StreamSummaryContent stream={stream} />\n      {stream.tags.length > 0 && (\n        <Flex gap=\"2\" wrap=\"wrap\">\n          <StreamHashtags stream={stream} />\n        </Flex>\n      )}\n\n      <Flex gap=\"2\" wrap=\"wrap\">\n        <StreamerCards pubkey={stream.host} maxW=\"lg\" minW=\"md\" />\n      </Flex>\n    </VerticalPageLayout>\n  );\n}\n\nfunction MobileStreamPage({ stream }: { stream: ParsedStream }) {\n  useAppTitle(stream.title);\n  const navigate = useNavigate();\n  const showChat = useDisclosure();\n\n  return (\n    <VerticalPageLayout px={0}>\n      <Flex gap=\"2\" alignItems=\"center\" px=\"2\" flexShrink={0}>\n        <Button onClick={() => navigate(-1)} leftIcon={<ChevronLeftIcon />} size=\"sm\">\n          Back\n        </Button>\n        <Spacer />\n        <StreamShareButton stream={stream} size=\"sm\" />\n        <Button onClick={showChat.onOpen} size=\"sm\">\n          Show Chat\n        </Button>\n      </Flex>\n      <LiveVideoPlayer\n        stream={stream.streaming || stream.recording}\n        autoPlay={!!stream.streaming}\n        poster={stream.image}\n      />\n      <Flex direction=\"column\" gap=\"2\" overflow=\"hidden\" px=\"2\">\n        <Flex gap=\"2\">\n          <UserAvatarLink pubkey={stream.host} noProxy />\n          <Box>\n            <Heading size=\"md\">{stream.title}</Heading>\n            <UserLink pubkey={stream.host} />\n          </Box>\n        </Flex>\n        <StreamSummaryContent stream={stream} />\n        {stream.tags.length > 0 && (\n          <Flex gap=\"2\" wrap=\"wrap\">\n            <StreamHashtags stream={stream} />\n          </Flex>\n        )}\n        <StreamZapButton stream={stream} label=\"Zap Stream\" />\n        <Heading size=\"sm\">Stream goal</Heading>\n        <Divider />\n        <StreamGoal stream={stream} />\n        <StreamerCards pubkey={stream.host} />\n      </Flex>\n      <Drawer onClose={showChat.onClose} isOpen={showChat.isOpen} size=\"full\" isFullHeight>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader px=\"4\" pb=\"0\">\n            Stream Chat\n          </DrawerHeader>\n          <DrawerBody p={0} overflow=\"hidden\" display=\"flex\" gap=\"2\" flexDirection=\"column\">\n            <TopZappers stream={stream} px=\"2\" />\n            <StreamChatLog stream={stream} flex={1} px=\"2\" />\n            <ChatMessageForm stream={stream} />\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </VerticalPageLayout>\n  );\n}\n\nfunction StreamPage({ stream }: { stream: ParsedStream }) {\n  const isMobile = useBreakpointValue({ base: true, lg: false });\n  const Layout = isMobile ? MobileStreamPage : DesktopStreamPage;\n\n  // const chatTimeline = useStreamChatTimeline(stream);\n  // const chatLog = useSubject(chatTimeline.timeline);\n  // const pubkeysInChat = useMemo(() => {\n  //   const set = new Set<string>();\n  //   for (const event of chatLog) {\n  //     set.add(event.pubkey);\n  //   }\n  //   return Array.from(set);\n  // }, [chatLog]);\n\n  return (\n    // <UserDirectoryProvider getDirectory={() => pubkeysInChat}>\n    <Layout stream={stream} />\n    // </UserDirectoryProvider>\n  );\n}\n\nfunction ChatWidget({ stream, displayMode }: { stream: ParsedStream; displayMode: ChatDisplayMode }) {\n  return (\n    <>\n      <Global\n        styles={css`\n          body {\n            background: transparent;\n          }\n        `}\n      />\n      <StreamChat stream={stream} flexGrow={1} h=\"100vh\" w=\"100vw\" displayMode={displayMode} />\n    </>\n  );\n}\n\nexport default function StreamView() {\n  const { naddr } = useParams();\n  const [params] = useSearchParams();\n  useSetColorMode();\n\n  if (!naddr) return <Navigate replace to=\"/streams\" />;\n\n  const readRelays = useReadRelays();\n  const [streamRelays, setStreamRelays] = useState<string[]>([]);\n\n  const subject = useMemo(() => {\n    try {\n      const parsed = nip19.decode(naddr);\n      if (parsed.type !== \"naddr\") throw new Error(\"Invalid stream address\");\n      if (parsed.data.kind !== kinds.LiveEvent) throw new Error(\"Invalid stream kind\");\n\n      const addrRelays = parsed.data.relays ?? [];\n      return replaceableEventsService.requestEvent(\n        unique([...readRelays, ...streamRelays, ...addrRelays]),\n        parsed.data.kind,\n        parsed.data.pubkey,\n        parsed.data.identifier,\n        { alwaysRequest: true },\n      );\n    } catch (e) {\n      console.log(e);\n    }\n  }, [naddr, streamRelays.join(\"|\")]);\n\n  const streamEvent = useSubject(subject);\n  const stream = useMemo(() => streamEvent && parseStreamEvent(streamEvent), [streamEvent]);\n\n  // refetch the stream from the correct relays when its loaded to ensure we have the latest\n  useEffect(() => {\n    if (stream?.relays) setStreamRelays(stream.relays);\n  }, [stream?.relays]);\n\n  const displayMode = (params.get(\"displayMode\") as ChatDisplayMode) ?? undefined;\n\n  if (!stream) return <Spinner />;\n  return (\n    // add snort and damus relays so zap.stream will always see zaps\n    <AdditionalRelayProvider relays={streamRelays}>\n      <UserEmojiProvider pubkey={stream.host}>\n        {displayMode ? <ChatWidget stream={stream} displayMode={displayMode} /> : <StreamPage stream={stream} />}\n      </UserEmojiProvider>\n    </AdditionalRelayProvider>\n  );\n}\n"],"names":["TopZappers","stream","props","timeline","useStreamChatTimeline","zaps","useMemo","parseZapEvents","e","kinds","totals","zap","p","sortedTotals","a","b","jsx","Flex","pubkey","total","jsxs","UserAvatarLink","Text","UserLink","LightningIcon","readablizeSats","StreamChat","actions","displayMode","loader","scrollBox","useRef","callback","useTimelineCurserIntersectionCallback","isPopup","isChatLog","IntersectionObserverProvider","LightboxProvider","Card","CardHeader","Heading","CardBody","StreamChatLog","ChatMessageForm","linkRenderers","renderImageUrl","renderGenericUrl","StreamSummaryContent","content","useRenderedContent","components","Box","STREAMER_CARDS_TYPE","STREAMER_CARD_TYPE","useStreamerCardsCords","relays","sub","replaceableEventsService","streamerCards","useSubject","isATag","StreamerCard","cord","relay","contextRelays","useAdditionalRelayContext","readRelays","useReadRelays","card","useReplaceableEvent","title","_a","t","image","_b","link","_c","OpenGraphCard","LinkBox","Image","TextNoteContents","LinkOverlay","StreamerCards","cardCords","_","StreamSatsPerMinute","enabled","setEnabled","useState","paying","setPaying","amountStr","setAmountStr","metadata","useUserLNURLMetadata","isAvailable","isEnabled","sendSats","useCallback","amountMsats","callbackUrl","payRequest","res","parsePaymentRequest","useInterval","Popover","PopoverTrigger","Button","Spinner","PopoverContent","PopoverArrow","PopoverCloseButton","PopoverHeader","PopoverBody","NumberInput","v","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","V4VStopIcon","V4VStreamIcon","StreamGoal","goal","useStreamGoal","address","relayHintService","Link","RouterLink","getGoalName","GoalProgress","GoalTopZappers","GoalZapButton","StreamShareButton","ariaLabel","openModal","useContext","PostModalContext","handleClick","useShareableEventAddress","RepostIcon","DesktopStreamPage","useAppTitle","navigate","useNavigate","showChat","setShowChat","renderActions","ButtonGroup","CopyIconButton","ExternalLinkIcon","y","x","VerticalPageLayout","ChevronLeftIcon","StreamStatusBadge","Spacer","DebugEventButton","LiveVideoPlayer","StreamHashtags","MobileStreamPage","useDisclosure","StreamZapButton","Divider","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","StreamPage","Layout","useBreakpointValue","ChatWidget","Fragment","Global","css","StreamView","naddr","useParams","params","useSearchParams","useSetColorMode","Navigate","streamRelays","setStreamRelays","subject","parsed","nip19","addrRelays","unique","streamEvent","parseStreamEvent","useEffect","AdditionalRelayProvider","UserEmojiProvider"],"mappings":"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"}