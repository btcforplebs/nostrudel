{"version":3,"file":"network-mute-graph-CeEegtHE.js","sources":["../../src/views/tools/network-mute-graph.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { Box, Button, Flex, Text } from \"@chakra-ui/react\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport { useNavigate } from \"react-router-dom\";\nimport ForceGraph, { LinkObject, NodeObject } from \"react-force-graph-3d\";\nimport { Mesh, MeshBasicMaterial, SRGBColorSpace, SphereGeometry, Sprite, SpriteMaterial, TextureLoader } from \"three\";\n\nimport useCurrentAccount from \"../../hooks/use-current-account\";\nimport RequireCurrentAccount from \"../../providers/route/require-current-account\";\nimport { useUsersMetadata } from \"../../hooks/use-user-network\";\nimport { MUTE_LIST_KIND, getPubkeysFromList, isPubkeyInList } from \"../../helpers/nostr/lists\";\nimport useUserContactList from \"../../hooks/use-user-contact-list\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport replaceableEventsService from \"../../services/replaceable-events\";\nimport useSubjects from \"../../hooks/use-subjects\";\nimport useUserProfile from \"../../hooks/use-user-profile\";\nimport { ChevronLeftIcon } from \"../../components/icons\";\n\nexport function useUsersMuteLists(pubkeys: string[], additionalRelays?: Iterable<string>) {\n  const readRelays = useReadRelays(additionalRelays);\n  const muteListSubjects = useMemo(() => {\n    return pubkeys.map((pubkey) => replaceableEventsService.requestEvent(readRelays, MUTE_LIST_KIND, pubkey));\n  }, [pubkeys]);\n  return useSubjects(muteListSubjects);\n}\n\ntype NodeType = { id: string; image?: string; name?: string };\n\nfunction NetworkGraphPage() {\n  const navigate = useNavigate();\n  const account = useCurrentAccount()!;\n\n  const selfMetadata = useUserProfile(account.pubkey);\n  const contacts = useUserContactList(account.pubkey);\n  const contactsPubkeys = useMemo(\n    () => (contacts ? getPubkeysFromList(contacts).map((p) => p.pubkey) : []),\n    [contacts],\n  );\n  const usersMetadata = useUsersMetadata(contactsPubkeys);\n  const usersMuteLists = useUsersMuteLists(contactsPubkeys);\n\n  const graphData = useMemo(() => {\n    if (!contacts) return { nodes: [], links: [] };\n\n    const nodes: Record<string, NodeObject<NodeType>> = {};\n    const links: Record<string, LinkObject<NodeType>> = {};\n\n    const getOrCreateNode = (pubkey: string) => {\n      if (!nodes[pubkey]) {\n        const node: NodeType = {\n          id: pubkey,\n        };\n\n        const metadata = usersMetadata[pubkey];\n        if (metadata) {\n          node.image = metadata.picture || metadata.image;\n          node.name = metadata.name;\n        }\n\n        nodes[pubkey] = node;\n      }\n      return nodes[pubkey];\n    };\n\n    for (const muteList of usersMuteLists) {\n      const author = muteList.pubkey;\n      for (const user of getPubkeysFromList(muteList)) {\n        if (isPubkeyInList(contacts, user.pubkey)) {\n          const keyA = [author, user.pubkey].join(\"|\");\n          links[keyA] = { source: getOrCreateNode(author), target: getOrCreateNode(user.pubkey) };\n        }\n      }\n    }\n\n    return { nodes: Object.values(nodes), links: Object.values(links) };\n  }, [contacts, usersMuteLists, usersMetadata, selfMetadata]);\n\n  return (\n    <Flex direction=\"column\" gap=\"2\" h=\"full\" pt=\"2\">\n      <Flex gap=\"2\" alignItems=\"center\">\n        <Button leftIcon={<ChevronLeftIcon />} onClick={() => navigate(-1)}>\n          Back\n        </Button>\n        <Text>Showing how many of your contacts are muting each other</Text>\n      </Flex>\n      <Box overflow=\"hidden\" flex={1}>\n        <AutoSizer>\n          {({ height, width }) => (\n            <ForceGraph<NodeType>\n              graphData={graphData}\n              enableNodeDrag={false}\n              width={width}\n              height={height}\n              linkDirectionalArrowLength={3.5}\n              linkDirectionalArrowRelPos={1}\n              linkCurvature={0.25}\n              nodeThreeObject={(node: NodeType) => {\n                if (!node.image) {\n                  return new Mesh(\n                    new SphereGeometry(5, 12, 6),\n                    new MeshBasicMaterial({ color: parseInt(node.id.slice(0, 6), 16) }),\n                  );\n                }\n\n                const imgTexture = new TextureLoader().load(node.image);\n                imgTexture.colorSpace = SRGBColorSpace;\n                const material = new SpriteMaterial({ map: imgTexture });\n                const sprite = new Sprite(material);\n                sprite.scale.set(10, 10, 10);\n\n                return sprite;\n              }}\n            />\n          )}\n        </AutoSizer>\n      </Box>\n    </Flex>\n  );\n}\n\nexport default function NetworkGraphView() {\n  return (\n    <RequireCurrentAccount>\n      <NetworkGraphPage />\n    </RequireCurrentAccount>\n  );\n}\n"],"names":["useUsersMuteLists","pubkeys","additionalRelays","readRelays","useReadRelays","muteListSubjects","useMemo","pubkey","replaceableEventsService","MUTE_LIST_KIND","useSubjects","NetworkGraphPage","navigate","useNavigate","account","useCurrentAccount","selfMetadata","useUserProfile","contacts","useUserContactList","contactsPubkeys","getPubkeysFromList","p","usersMetadata","useUsersMetadata","usersMuteLists","graphData","nodes","links","getOrCreateNode","node","metadata","muteList","author","user","isPubkeyInList","keyA","jsxs","Flex","jsx","Button","ChevronLeftIcon","Text","Box","AutoSizer","height","width","ForceGraph","Mesh","SphereGeometry","MeshBasicMaterial","imgTexture","TextureLoader","SRGBColorSpace","material","SpriteMaterial","sprite","Sprite","NetworkGraphView","RequireCurrentAccount"],"mappings":"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"}