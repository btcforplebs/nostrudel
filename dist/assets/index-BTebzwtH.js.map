{"version":3,"file":"index-BTebzwtH.js","sources":["../../src/views/tools/transform-note/text-to-speech/tts-result.tsx","../../src/views/tools/transform-note/text-to-speech/tts-status.tsx","../../src/views/tools/transform-note/text-to-speech/tts-response.tsx","../../src/views/tools/transform-note/text-to-speech/tts-job.tsx","../../src/views/tools/transform-note/text-to-speech/index.tsx","../../src/views/tools/transform-note/index.tsx"],"sourcesContent":["import { Flex, Text } from \"@chakra-ui/react\";\n\nimport UserAvatarLink from \"../../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../../components/user/user-link\";\nimport { NostrEvent } from \"../../../../types/nostr-event\";\n\nexport default function TextToSpeechResult({ result }: { result: NostrEvent }) {\n  return (\n    <>\n      <Flex gap=\"2\" alignItems=\"center\" grow={1}>\n        <UserAvatarLink pubkey={result.pubkey} size=\"sm\" />\n        <UserLink pubkey={result.pubkey} fontWeight=\"bold\" />\n        <Text>Finished job</Text>\n      </Flex>\n      <audio src={result.content} controls />\n    </>\n  );\n}\n","import { MouseEventHandler, useState } from \"react\";\nimport { Button, Flex, Spacer, Text, useToast } from \"@chakra-ui/react\";\n\nimport { NostrEvent } from \"../../../../types/nostr-event\";\nimport UserAvatarLink from \"../../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../../components/user/user-link\";\nimport { LightningIcon } from \"../../../../components/icons\";\nimport { readablizeSats } from \"../../../../helpers/bolt11\";\n\nexport default function TextToSpeechStatus({ status }: { status: NostrEvent }) {\n  const toast = useToast();\n\n  const amountTag = status.tags.find((t) => t[0] === \"amount\" && t[1] && t[2]);\n  const amountMsat = amountTag?.[1] && parseInt(amountTag[1]);\n  const invoice = amountTag?.[2];\n\n  const [paid, setPaid] = useState(false);\n  const [paying, setPaying] = useState(false);\n  const payInvoice: MouseEventHandler = async (e) => {\n    try {\n      if (window.webln && invoice) {\n        setPaying(true);\n        e.stopPropagation();\n        await window.webln.sendPayment(invoice);\n        setPaid(true);\n      }\n    } catch (e) {\n      if (e instanceof Error) toast({ status: \"error\", description: e.message });\n    }\n    setPaying(false);\n  };\n\n  return (\n    <>\n      <Flex gap=\"2\" alignItems=\"center\" grow={1}>\n        <UserAvatarLink pubkey={status.pubkey} size=\"sm\" />\n        <UserLink pubkey={status.pubkey} fontWeight=\"bold\" />\n        <Text>Offered</Text>\n        <Spacer />\n\n        {invoice && amountMsat && (\n          <Button\n            colorScheme=\"yellow\"\n            size=\"sm\"\n            variant=\"solid\"\n            leftIcon={<LightningIcon />}\n            onClick={payInvoice}\n            isLoading={paying || paid}\n            isDisabled={!window.webln}\n          >\n            Pay {readablizeSats(amountMsat / 1000)} sats\n          </Button>\n        )}\n      </Flex>\n      <Text>{status.content}</Text>\n    </>\n  );\n}\n","import { DVMResponse } from \"../../../../helpers/nostr/dvm\";\nimport TextToSpeechResult from \"./tts-result\";\nimport TextToSpeechStatus from \"./tts-status\";\n\nexport default function TextToSpeechResponse({ response }: { response: DVMResponse }) {\n  if (response.result) return <TextToSpeechResult result={response.result} />;\n  if (response.status) return <TextToSpeechStatus status={response.status} />;\n  return null;\n}\n","import { Card, CardBody, CardHeader, Flex, IconButton, Spacer, Spinner, Text, useDisclosure } from \"@chakra-ui/react\";\nimport codes from \"iso-language-codes\";\n\nimport { DVMJob, getRequestInputParam } from \"../../../../helpers/nostr/dvm\";\nimport { NostrEvent } from \"../../../../types/nostr-event\";\nimport UserAvatarLink from \"../../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../../components/user/user-link\";\nimport Timestamp from \"../../../../components/timestamp\";\nimport { CodeIcon } from \"../../../../components/icons\";\nimport TextToSpeechResponse from \"./tts-response\";\nimport EventDebugModal from \"../../../../components/debug-modal/event-debug-modal\";\n\nfunction getTranslationRequestLanguage(request: NostrEvent) {\n  const targetLanguage = getRequestInputParam(request, \"language\", false);\n  return codes.find((code) => code.iso639_1 === targetLanguage);\n}\n\nexport default function TextToSpeechJob({ job }: { job: DVMJob }) {\n  const lang = getTranslationRequestLanguage(job.request);\n  const debug = useDisclosure();\n\n  return (\n    <>\n      <Card variant=\"outline\">\n        <CardHeader px=\"4\" py=\"4\" pb=\"2\" display=\"flex\" gap=\"2\" alignItems=\"center\" flexWrap=\"wrap\">\n          <UserAvatarLink pubkey={job.request.pubkey} size=\"sm\" />\n          <UserLink pubkey={job.request.pubkey} fontWeight=\"bold\" />\n          <Text>\n            Requested reading in <strong>{lang?.nativeName}</strong>\n          </Text>\n          <Timestamp timestamp={job.request.created_at} />\n          <Spacer />\n          <IconButton\n            icon={<CodeIcon />}\n            aria-label=\"Show Raw\"\n            title=\"Show Raw\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={debug.onOpen}\n          />\n        </CardHeader>\n        <CardBody px=\"4\" py=\"4\" gap=\"2\" display=\"flex\" flexDirection=\"column\">\n          {job.responses.length === 0 && (\n            <Flex gap=\"2\" alignItems=\"center\">\n              <Spinner />\n              Waiting for response\n            </Flex>\n          )}\n          {Object.values(job.responses).map((response) => (\n            <TextToSpeechResponse key={response.pubkey} response={response} />\n          ))}\n        </CardBody>\n      </Card>\n      {debug.isOpen && <EventDebugModal isOpen onClose={debug.onClose} event={job.request} />}\n    </>\n  );\n}\n","import { useCallback, useState } from \"react\";\nimport { Button, Flex, Select } from \"@chakra-ui/react\";\nimport dayjs from \"dayjs\";\nimport codes from \"iso-language-codes\";\nimport { Filter } from \"nostr-tools\";\n\nimport { useReadRelays } from \"../../../../hooks/use-client-relays\";\nimport useTimelineLoader from \"../../../../hooks/use-timeline-loader\";\nimport { getEventUID } from \"../../../../helpers/nostr/event\";\nimport {\n  DVM_STATUS_KIND,\n  DVM_TTS_JOB_KIND,\n  DVM_TTS_RESULT_KIND,\n  groupEventsIntoJobs,\n} from \"../../../../helpers/nostr/dvm\";\nimport { DraftNostrEvent, NostrEvent } from \"../../../../types/nostr-event\";\nimport relayScoreboardService from \"../../../../services/relay-scoreboard\";\nimport useCurrentAccount from \"../../../../hooks/use-current-account\";\nimport TextToSpeechJob from \"./tts-job\";\nimport { usePublishEvent } from \"../../../../providers/global/publish-provider\";\n\nexport default function NoteTextToSpeechPage({ note }: { note: NostrEvent }) {\n  const publish = usePublishEvent();\n  const account = useCurrentAccount();\n\n  const [lang, setLang] = useState(navigator.language.split(\"-\")[0] ?? \"en\");\n  const readRelays = useReadRelays();\n  const requestReading = useCallback(async () => {\n    const top8Relays = relayScoreboardService.getRankedRelays(readRelays).slice(0, 8);\n    const draft: DraftNostrEvent = {\n      kind: DVM_TTS_JOB_KIND,\n      content: \"\",\n      created_at: dayjs().unix(),\n      tags: [\n        [\"i\", note.id, \"event\"],\n        [\"param\", \"language\", lang],\n        [\"relays\", ...top8Relays],\n      ],\n    };\n\n    await publish(\"Request Reading\", draft);\n  }, [publish, note, readRelays, lang]);\n\n  const { loader, timeline: events } = useTimelineLoader(\n    `${getEventUID(note)}-readings`,\n    readRelays,\n    [\n      {\n        kinds: [DVM_TTS_JOB_KIND, DVM_TTS_RESULT_KIND],\n        \"#i\": [note.id],\n      },\n      account && { kinds: [DVM_STATUS_KIND], \"#p\": [account.pubkey] },\n    ].filter(Boolean) as Filter[],\n  );\n\n  const jobs = groupEventsIntoJobs(events);\n\n  return (\n    <>\n      <Flex gap=\"2\">\n        <Select value={lang} onChange={(e) => setLang(e.target.value)} w=\"60\">\n          {codes.map((code) => (\n            <option key={code.iso639_1} value={code.iso639_1}>\n              {code.name} ({code.nativeName})\n            </option>\n          ))}\n        </Select>\n        <Button size=\"md\" variant=\"solid\" colorScheme=\"primary\" onClick={requestReading} flexShrink={0}>\n          Request new reading\n        </Button>\n      </Flex>\n      {Array.from(Object.values(jobs)).map((job) => (\n        <TextToSpeechJob key={job.request.id} job={job} />\n      ))}\n    </>\n  );\n}\n","import { Flex, Spacer, Spinner, Tab, TabList, TabPanel, TabPanels, Tabs } from \"@chakra-ui/react\";\n\nimport useParamsEventPointer from \"../../../hooks/use-params-event-pointer\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport useSingleEvent from \"../../../hooks/use-single-event\";\nimport { NoteTranslationsPage } from \"./translation\";\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\nimport UserDnsIdentity from \"../../../components/user/user-dns-identity\";\nimport UserLink from \"../../../components/user/user-link\";\nimport NoteTextToSpeechPage from \"./text-to-speech\";\nimport useRouteSearchValue from \"../../../hooks/use-route-search-value\";\nimport NoteMenu from \"../../../components/note/note-menu\";\nimport TextNoteContents from \"../../../components/note/timeline-note/text-note-contents\";\n\nconst tabs = [\"original\", \"translation\", \"tts\"];\n\nfunction TransformNotePage({ note }: { note: NostrEvent }) {\n  const tab = useRouteSearchValue(\"tab\", \"original\");\n  const tabProps = { px: \"2\", pt: \"2\", pb: \"10\", display: \"flex\", flexDirection: \"column\", gap: \"2\" } as const;\n\n  return (\n    <Tabs\n      colorScheme=\"primary\"\n      isLazy\n      index={tab ? tabs.indexOf(tab.value) : 0}\n      onChange={(v) => tab.setValue(tabs[v])}\n    >\n      <TabList>\n        <Tab>Original</Tab>\n        <Tab>Translation</Tab>\n        <Tab>Text to speech</Tab>\n      </TabList>\n\n      <TabPanels>\n        <TabPanel {...tabProps}>\n          <Flex gap=\"2\" alignItems=\"center\">\n            <UserAvatarLink pubkey={note.pubkey} size={[\"xs\", \"sm\"]} />\n            <UserLink pubkey={note.pubkey} isTruncated fontWeight=\"bold\" fontSize=\"lg\" />\n            <UserDnsIdentity pubkey={note.pubkey} onlyIcon />\n            <Spacer />\n            <NoteMenu event={note} aria-label=\"Note Options\" />\n          </Flex>\n\n          <TextNoteContents event={note} />\n        </TabPanel>\n        <TabPanel {...tabProps}>\n          <NoteTranslationsPage note={note} />\n        </TabPanel>\n        <TabPanel {...tabProps}>\n          <NoteTextToSpeechPage note={note} />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\nexport default function TransformNoteView() {\n  const pointer = useParamsEventPointer(\"id\");\n  const event = useSingleEvent(pointer.id, pointer.relays);\n\n  return event ? <TransformNotePage note={event} /> : <Spinner />;\n}\n"],"names":["TextToSpeechResult","result","jsxs","Fragment","Flex","jsx","UserAvatarLink","UserLink","Text","TextToSpeechStatus","status","toast","useToast","amountTag","amountMsat","invoice","paid","setPaid","useState","paying","setPaying","payInvoice","e","Spacer","Button","LightningIcon","readablizeSats","TextToSpeechResponse","response","getTranslationRequestLanguage","request","targetLanguage","getRequestInputParam","codes","code","TextToSpeechJob","job","lang","debug","useDisclosure","Card","CardHeader","Timestamp","IconButton","CodeIcon","CardBody","Spinner","EventDebugModal","NoteTextToSpeechPage","note","publish","usePublishEvent","account","useCurrentAccount","setLang","readRelays","useReadRelays","requestReading","useCallback","top8Relays","relayScoreboardService","draft","DVM_TTS_JOB_KIND","dayjs","loader","events","useTimelineLoader","getEventUID","DVM_TTS_RESULT_KIND","DVM_STATUS_KIND","jobs","groupEventsIntoJobs","Select","tabs","TransformNotePage","tab","useRouteSearchValue","tabProps","Tabs","v","TabList","Tab","TabPanels","TabPanel","UserDnsIdentity","NoteMenu","TextNoteContents","NoteTranslationsPage","TransformNoteView","pointer","useParamsEventPointer","event","useSingleEvent"],"mappings":"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"}