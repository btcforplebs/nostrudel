{"version":3,"file":"browse-DwVZCnoG.js","sources":["../../src/views/emoji-packs/browse.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport { Flex, SimpleGrid, Switch, useDisclosure } from \"@chakra-ui/react\";\nimport { getEventUID } from \"applesauce-core/helpers\";\n\nimport PeopleListProvider, { usePeopleListContext } from \"../../providers/local/people-list-provider\";\nimport PeopleListSelection from \"../../components/people-list-selection/people-list-selection\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport EmojiPackCard from \"./components/emoji-pack-card\";\nimport { EMOJI_PACK_KIND, getEmojisFromPack } from \"../../helpers/nostr/emoji-packs\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\n\nfunction EmojiPacksBrowsePage() {\n  const { filter, listId } = usePeopleListContext();\n  const showEmpty = useDisclosure();\n\n  const eventFilter = useCallback(\n    (event: NostrEvent) => {\n      if (!showEmpty.isOpen && getEmojisFromPack(event).length === 0) return false;\n      return true;\n    },\n    [showEmpty.isOpen],\n  );\n  const readRelays = useReadRelays();\n  const { loader, timeline: packs } = useTimelineLoader(\n    `${listId}-browse-emoji-packs`,\n    readRelays,\n    filter ? { ...filter, kinds: [EMOJI_PACK_KIND] } : undefined,\n    { eventFilter },\n  );\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <IntersectionObserverProvider callback={callback}>\n      <VerticalPageLayout>\n        <Flex gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n          <PeopleListSelection />\n          <Switch isChecked={showEmpty.isOpen} onChange={showEmpty.onToggle} whiteSpace=\"pre\">\n            Show Empty\n          </Switch>\n        </Flex>\n\n        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing=\"2\">\n          {packs?.map((event) => <EmojiPackCard key={getEventUID(event)} pack={event} />)}\n        </SimpleGrid>\n      </VerticalPageLayout>\n    </IntersectionObserverProvider>\n  );\n}\n\nexport default function EmojiPacksBrowseView() {\n  return (\n    <PeopleListProvider>\n      <EmojiPacksBrowsePage />\n    </PeopleListProvider>\n  );\n}\n"],"names":["EmojiPacksBrowsePage","filter","listId","usePeopleListContext","showEmpty","useDisclosure","eventFilter","useCallback","event","getEmojisFromPack","readRelays","useReadRelays","loader","packs","useTimelineLoader","EMOJI_PACK_KIND","callback","useTimelineCurserIntersectionCallback","jsx","IntersectionObserverProvider","jsxs","VerticalPageLayout","Flex","PeopleListSelection","Switch","SimpleGrid","EmojiPackCard","getEventUID","EmojiPacksBrowseView","PeopleListProvider"],"mappings":"uPAeA,SAASA,GAAuB,CAC9B,KAAM,CAAE,OAAAC,EAAQ,OAAAC,CAAO,EAAIC,EAAqB,EAC1CC,EAAYC,IAEZC,EAAcC,EAAA,YACjBC,GACK,GAACJ,EAAU,QAAUK,EAAkBD,CAAK,EAAE,SAAW,GAG/D,CAACJ,EAAU,MAAM,CAAA,EAEbM,EAAaC,IACb,CAAE,OAAAC,EAAQ,SAAUC,CAAU,EAAAC,EAClC,GAAGZ,CAAM,sBACTQ,EACAT,EAAS,CAAE,GAAGA,EAAQ,MAAO,CAACc,CAAe,CAAM,EAAA,OACnD,CAAE,YAAAT,CAAY,CAAA,EAEVU,EAAWC,EAAsCL,CAAM,EAE7D,OACGM,EAAA,IAAAC,EAAA,CAA6B,SAAAH,EAC5B,SAAAI,OAACC,EACC,CAAA,SAAA,CAAAD,OAACE,GAAK,IAAI,IAAI,WAAW,SAAS,KAAK,OACrC,SAAA,CAAAJ,EAAA,IAACK,EAAoB,EAAA,EACrBL,EAAAA,IAACM,EAAO,CAAA,UAAWpB,EAAU,OAAQ,SAAUA,EAAU,SAAU,WAAW,MAAM,SAEpF,YAAA,CAAA,CAAA,EACF,EAEAc,EAAAA,IAACO,GAAW,QAAS,CAAE,KAAM,EAAG,GAAI,CAAE,EAAG,QAAQ,IAC9C,0BAAO,IAAKjB,GAAUU,EAAA,IAACQ,EAAuC,CAAA,KAAMlB,GAA1BmB,EAAYnB,CAAK,CAAgB,EAC9E,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CAEA,SAAwBoB,GAAuB,CAC7C,OACGV,EAAA,IAAAW,EAAA,CACC,SAACX,EAAA,IAAAlB,EAAA,CAAA,CAAqB,CACxB,CAAA,CAEJ"}