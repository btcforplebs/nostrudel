{"version":3,"file":"embedded-channel-ByTMntI9.js","sources":["../../src/components/embed-event/event-types/embedded-channel.tsx"],"sourcesContent":["import { Link as RouterLink } from \"react-router-dom\";\nimport { Box, Card, CardBody, CardFooter, CardHeader, CardProps, Flex, Heading, LinkBox, Text } from \"@chakra-ui/react\";\nimport { nip19 } from \"nostr-tools\";\n\nimport UserAvatarLink from \"../../user/user-avatar-link\";\nimport UserLink from \"../../user/user-link\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport useChannelMetadata from \"../../../hooks/use-channel-metadata\";\nimport HoverLinkOverlay from \"../../hover-link-overlay\";\nimport singleEventService from \"../../../services/single-event\";\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\n\nexport default function EmbeddedChannel({\n  channel,\n  additionalRelays,\n  ...props\n}: Omit<CardProps, \"children\"> & { channel: NostrEvent; additionalRelays?: string[] }) {\n  const readRelays = useReadRelays(additionalRelays);\n  const metadata = useChannelMetadata(channel.id, readRelays);\n\n  if (!channel || !metadata) return null;\n\n  return (\n    <Card as={LinkBox} flexDirection=\"row\" gap=\"2\" overflow=\"hidden\" alignItems=\"flex-start\" {...props}>\n      <Box\n        backgroundImage={metadata.picture}\n        backgroundSize=\"cover\"\n        backgroundPosition=\"center\"\n        backgroundRepeat=\"no-repeat\"\n        aspectRatio={1}\n        w=\"7rem\"\n        flexShrink={0}\n      />\n      <Flex direction=\"column\" flex={1} overflow=\"hidden\" h=\"full\">\n        <CardHeader p=\"2\" display=\"flex\" gap=\"2\" alignItems=\"center\">\n          <Heading size=\"md\" isTruncated>\n            <HoverLinkOverlay\n              as={RouterLink}\n              to={`/channels/${nip19.neventEncode({ id: channel.id })}`}\n              onClick={() => singleEventService.handleEvent(channel)}\n            >\n              {metadata.name}\n            </HoverLinkOverlay>\n          </Heading>\n        </CardHeader>\n        <CardBody px=\"2\" py=\"0\" overflow=\"hidden\" flexGrow={1}>\n          <Text isTruncated>{metadata.about}</Text>\n        </CardBody>\n        <CardFooter p=\"2\" gap=\"2\">\n          <UserAvatarLink pubkey={channel.pubkey} size=\"xs\" />\n          <UserLink pubkey={channel.pubkey} fontWeight=\"bold\" />\n        </CardFooter>\n      </Flex>\n    </Card>\n  );\n}\n"],"names":["EmbeddedChannel","channel","additionalRelays","props","readRelays","useReadRelays","metadata","useChannelMetadata","jsxs","Card","LinkBox","jsx","Box","Flex","CardHeader","Heading","HoverLinkOverlay","RouterLink","nip19","singleEventService","CardBody","Text","CardFooter","UserAvatarLink","UserLink"],"mappings":"qKAYA,SAAwBA,EAAgB,CACtC,QAAAC,EACA,iBAAAC,EACA,GAAGC,CACL,EAAuF,CAC/E,MAAAC,EAAaC,EAAcH,CAAgB,EAC3CI,EAAWC,EAAmBN,EAAQ,GAAIG,CAAU,EAE1D,MAAI,CAACH,GAAW,CAACK,EAAiB,KAG/BE,EAAAA,KAAAC,EAAA,CAAK,GAAIC,EAAS,cAAc,MAAM,IAAI,IAAI,SAAS,SAAS,WAAW,aAAc,GAAGP,EAC3F,SAAA,CAAAQ,EAAA,IAACC,EAAA,CACC,gBAAiBN,EAAS,QAC1B,eAAe,QACf,mBAAmB,SACnB,iBAAiB,YACjB,YAAa,EACb,EAAE,OACF,WAAY,CAAA,CACd,EACAE,EAAAA,KAACK,GAAK,UAAU,SAAS,KAAM,EAAG,SAAS,SAAS,EAAE,OACpD,SAAA,CAAAF,MAACG,EAAW,CAAA,EAAE,IAAI,QAAQ,OAAO,IAAI,IAAI,WAAW,SAClD,SAACH,EAAAA,IAAAI,EAAA,CAAQ,KAAK,KAAK,YAAW,GAC5B,SAAAJ,EAAA,IAACK,EAAA,CACC,GAAIC,EACJ,GAAI,aAAaC,EAAM,aAAa,CAAE,GAAIjB,EAAQ,EAAI,CAAA,CAAC,GACvD,QAAS,IAAMkB,EAAmB,YAAYlB,CAAO,EAEpD,SAASK,EAAA,IAAA,GAEd,CACF,CAAA,QACCc,EAAS,CAAA,GAAG,IAAI,GAAG,IAAI,SAAS,SAAS,SAAU,EAClD,eAACC,EAAK,CAAA,YAAW,GAAE,SAAAf,EAAS,KAAM,CAAA,EACpC,EACCE,EAAA,KAAAc,EAAA,CAAW,EAAE,IAAI,IAAI,IACpB,SAAA,CAAAX,EAAA,IAACY,EAAe,CAAA,OAAQtB,EAAQ,OAAQ,KAAK,KAAK,QACjDuB,EAAS,CAAA,OAAQvB,EAAQ,OAAQ,WAAW,OAAO,CAAA,EACtD,CAAA,EACF,CACF,CAAA,CAAA,CAEJ"}