{"version":3,"file":"browse-BxpaSNJX.js","sources":["../../src/views/badges/components/badge-card.tsx","../../src/views/badges/browse.tsx"],"sourcesContent":["import { memo } from \"react\";\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\nimport { ButtonGroup, Card, CardBody, CardHeader, CardProps, Flex, Heading, Image, Link, Text } from \"@chakra-ui/react\";\nimport { kinds } from \"nostr-tools\";\n\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../components/user/user-link\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport { getEventCoordinate } from \"../../../helpers/nostr/event\";\nimport BadgeMenu from \"./badge-menu\";\nimport { getBadgeImage, getBadgeName } from \"../../../helpers/nostr/badges\";\nimport Timestamp from \"../../../components/timestamp\";\nimport useEventCount from \"../../../hooks/use-event-count\";\nimport useEventIntersectionRef from \"../../../hooks/use-event-intersection-ref\";\nimport useShareableEventAddress from \"../../../hooks/use-shareable-event-address\";\n\nfunction BadgeCard({ badge, ...props }: Omit<CardProps, \"children\"> & { badge: NostrEvent }) {\n  const address = useShareableEventAddress(badge);\n  const image = getBadgeImage(badge);\n  const navigate = useNavigate();\n\n  // if there is a parent intersection observer, register this card\n  const ref = useEventIntersectionRef(badge);\n\n  const timesAwarded = useEventCount({ kinds: [kinds.BadgeAward], \"#a\": [getEventCoordinate(badge)] });\n\n  return (\n    <Card ref={ref} variant=\"outline\" {...props}>\n      {image && (\n        <Image src={image.src} cursor=\"pointer\" onClick={() => navigate(`/badges/${address}`)} borderRadius=\"lg\" />\n      )}\n      <CardHeader display=\"flex\" alignItems=\"center\" p=\"2\" pb=\"0\">\n        <Heading size=\"md\">\n          <Link as={RouterLink} to={`/badges/${address}`}>\n            {getBadgeName(badge)}\n          </Link>\n        </Heading>\n        <ButtonGroup size=\"sm\" ml=\"auto\">\n          <BadgeMenu badge={badge} aria-label=\"badge menu\" />\n        </ButtonGroup>\n      </CardHeader>\n      <CardBody p=\"2\">\n        <Flex gap=\"2\">\n          <Text>Created by:</Text>\n          <UserAvatarLink pubkey={badge.pubkey} size=\"xs\" />\n          <UserLink pubkey={badge.pubkey} isTruncated fontWeight=\"bold\" fontSize=\"lg\" />\n        </Flex>\n        <Text>\n          Updated: <Timestamp timestamp={badge.created_at} />\n        </Text>\n        <Text>Times Awarded: {timesAwarded}</Text>\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default memo(BadgeCard);\n","import { Flex, SimpleGrid } from \"@chakra-ui/react\";\nimport { kinds } from \"nostr-tools\";\n\nimport PeopleListProvider, { usePeopleListContext } from \"../../providers/local/people-list-provider\";\nimport PeopleListSelection from \"../../components/people-list-selection/people-list-selection\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport { getEventUID } from \"../../helpers/nostr/event\";\nimport BadgeCard from \"./components/badge-card\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\n\nfunction BadgesBrowsePage() {\n  const { filter, listId } = usePeopleListContext();\n\n  const readRelays = useReadRelays();\n  const { loader, timeline: lists } = useTimelineLoader(\n    `${listId}-badges`,\n    readRelays,\n    filter ? { ...filter, kinds: [kinds.BadgeDefinition] } : undefined,\n  );\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <IntersectionObserverProvider callback={callback}>\n      <VerticalPageLayout>\n        <Flex gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n          <PeopleListSelection />\n        </Flex>\n\n        <SimpleGrid columns={{ base: 1, sm: 2, md: 2, lg: 3, xl: 4 }} spacing=\"2\">\n          {lists?.map((badge) => <BadgeCard key={getEventUID(badge)} badge={badge} />)}\n        </SimpleGrid>\n      </VerticalPageLayout>\n    </IntersectionObserverProvider>\n  );\n}\n\nexport default function BadgesBrowseView() {\n  return (\n    <PeopleListProvider>\n      <BadgesBrowsePage />\n    </PeopleListProvider>\n  );\n}\n"],"names":["BadgeCard","badge","props","address","useShareableEventAddress","image","getBadgeImage","navigate","useNavigate","ref","useEventIntersectionRef","timesAwarded","useEventCount","kinds","getEventCoordinate","Card","jsx","Image","jsxs","CardHeader","Heading","Link","RouterLink","getBadgeName","ButtonGroup","BadgeMenu","CardBody","Flex","Text","UserAvatarLink","UserLink","Timestamp","memo","BadgesBrowsePage","filter","listId","usePeopleListContext","readRelays","useReadRelays","loader","lists","useTimelineLoader","callback","useTimelineCurserIntersectionCallback","IntersectionObserverProvider","VerticalPageLayout","PeopleListSelection","SimpleGrid","getEventUID","BadgesBrowseView","PeopleListProvider"],"mappings":"kUAgBA,SAASA,EAAU,CAAE,MAAAC,EAAO,GAAGC,GAA8D,CACrF,MAAAC,EAAUC,EAAyBH,CAAK,EACxCI,EAAQC,EAAcL,CAAK,EAC3BM,EAAWC,IAGXC,EAAMC,EAAwBT,CAAK,EAEnCU,EAAeC,EAAc,CAAE,MAAO,CAACC,EAAM,UAAU,EAAG,KAAM,CAACC,EAAmBb,CAAK,CAAC,CAAG,CAAA,EAEnG,cACGc,EAAK,CAAA,IAAAN,EAAU,QAAQ,UAAW,GAAGP,EACnC,SAAA,CAAAG,GACEW,EAAA,IAAAC,EAAA,CAAM,IAAKZ,EAAM,IAAK,OAAO,UAAU,QAAS,IAAME,EAAS,WAAWJ,CAAO,EAAE,EAAG,aAAa,KAAK,EAE3Ge,EAAAA,KAACC,GAAW,QAAQ,OAAO,WAAW,SAAS,EAAE,IAAI,GAAG,IACtD,SAAA,CAAAH,MAACI,EAAQ,CAAA,KAAK,KACZ,SAAAJ,EAAA,IAACK,GAAK,GAAIC,EAAY,GAAI,WAAWnB,CAAO,GACzC,SAAaoB,EAAAtB,CAAK,CACrB,CAAA,EACF,EACAe,EAAA,IAACQ,EAAY,CAAA,KAAK,KAAK,GAAG,OACxB,SAAAR,EAAAA,IAACS,EAAU,CAAA,MAAAxB,EAAc,aAAW,YAAA,CAAa,CACnD,CAAA,CAAA,EACF,EACAiB,EAAAA,KAACQ,EAAS,CAAA,EAAE,IACV,SAAA,CAACR,EAAAA,KAAAS,EAAA,CAAK,IAAI,IACR,SAAA,CAAAX,EAAAA,IAACY,GAAK,SAAW,aAAA,CAAA,QAChBC,EAAe,CAAA,OAAQ5B,EAAM,OAAQ,KAAK,KAAK,EAChDe,EAAAA,IAACc,EAAS,CAAA,OAAQ7B,EAAM,OAAQ,YAAW,GAAC,WAAW,OAAO,SAAS,IAAK,CAAA,CAAA,EAC9E,SACC2B,EAAK,CAAA,SAAA,CAAA,YACMZ,EAAAA,IAAAe,EAAA,CAAU,UAAW9B,EAAM,UAAY,CAAA,CAAA,EACnD,SACC2B,EAAK,CAAA,SAAA,CAAA,kBAAgBjB,CAAA,EAAa,CAAA,EACrC,CACF,CAAA,CAAA,CAEJ,CAEA,MAAeqB,EAAAA,EAAAA,KAAKhC,CAAS,EC3C7B,SAASiC,GAAmB,CAC1B,KAAM,CAAE,OAAAC,EAAQ,OAAAC,CAAO,EAAIC,EAAqB,EAE1CC,EAAaC,IACb,CAAE,OAAAC,EAAQ,SAAUC,CAAU,EAAAC,EAClC,GAAGN,CAAM,UACTE,EACAH,EAAS,CAAE,GAAGA,EAAQ,MAAO,CAACrB,EAAM,eAAe,CAAM,EAAA,MAAA,EAErD6B,EAAWC,EAAsCJ,CAAM,EAE7D,OACGvB,EAAA,IAAA4B,EAAA,CAA6B,SAAAF,EAC5B,SAAAxB,OAAC2B,EACC,CAAA,SAAA,CAAC7B,EAAAA,IAAAW,EAAA,CAAK,IAAI,IAAI,WAAW,SAAS,KAAK,OACrC,SAACX,EAAAA,IAAA8B,EAAA,CAAA,CAAoB,CACvB,CAAA,EAEC9B,EAAAA,IAAA+B,EAAA,CAAW,QAAS,CAAE,KAAM,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,CAAA,EAAK,QAAQ,IACnE,SAAAP,GAAA,YAAAA,EAAO,IAAKvC,GAAUe,EAAAA,IAAChB,EAAmC,CAAA,MAAAC,CAAA,EAApB+C,EAAY/C,CAAK,CAAiB,EAC3E,CAAA,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CAEA,SAAwBgD,GAAmB,CACzC,OACGjC,EAAA,IAAAkC,EAAA,CACC,SAAClC,EAAA,IAAAiB,EAAA,CAAA,CAAiB,CACpB,CAAA,CAEJ"}