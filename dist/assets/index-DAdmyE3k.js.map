{"version":3,"file":"index-DAdmyE3k.js","sources":["../../src/views/relays/webrtc/components/connection.tsx","../../src/views/relays/webrtc/index.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { NostrEvent } from \"nostr-tools\";\nimport { Button, ButtonGroup, Flex, Heading, SimpleGrid, Text, useForceUpdate, useInterval } from \"@chakra-ui/react\";\n\nimport UserAvatar from \"../../../../components/user/user-avatar\";\nimport UserName from \"../../../../components/user/user-name\";\nimport WebRtcRelayClient from \"../../../../classes/webrtc/webrtc-relay-client\";\nimport WebRtcRelayServer from \"../../../../classes/webrtc/webrtc-relay-server\";\nimport NostrWebRTCPeer from \"../../../../classes/webrtc/nostr-webrtc-peer\";\nimport { localRelay } from \"../../../../services/local-relay\";\nimport useCurrentAccount from \"../../../../hooks/use-current-account\";\nimport useUserContactList from \"../../../../hooks/use-user-contact-list\";\nimport { getPubkeysFromList } from \"../../../../helpers/nostr/lists\";\n\nexport default function Connection({\n  call,\n  peer,\n  client,\n  server,\n}: {\n  call: NostrEvent;\n  peer: NostrWebRTCPeer;\n  client: WebRtcRelayClient;\n  server: WebRtcRelayServer;\n}) {\n  const update = useForceUpdate();\n  useInterval(update, 1000);\n  // const toggleRead = () => {\n  // if(clientRelaysService.readRelays.value.has(client))\n  // };\n\n  const account = useCurrentAccount();\n  const contacts = useUserContactList(account?.pubkey);\n\n  const [sending, setSending] = useState(false);\n  const sendEvents = async () => {\n    if (!account?.pubkey || !localRelay) return;\n\n    setSending(true);\n    const sub = localRelay.subscribe([{ authors: [account.pubkey] }], {\n      onevent: (event) => {\n        client.publish(event);\n        update();\n      },\n      oneose: () => {\n        sub.close();\n        setSending(false);\n      },\n    });\n  };\n\n  const [requesting, setRequesting] = useState(false);\n  const requestEvents = async () => {\n    if (!contacts || !localRelay) return;\n\n    setRequesting(true);\n    const sub = client.subscribe([{ authors: getPubkeysFromList(contacts).map((p) => p.pubkey) }], {\n      onevent: (event) => {\n        if (localRelay) localRelay.publish(event);\n        update();\n      },\n      oneose: () => {\n        sub.close();\n        setRequesting(false);\n      },\n    });\n  };\n\n  return (\n    <Flex key={call.id} borderWidth=\"1px\" rounded=\"md\" p=\"2\" gap=\"2\" direction=\"column\">\n      <Flex gap=\"2\" alignItems=\"center\">\n        <UserAvatar pubkey={call.pubkey} size=\"sm\" />\n        <UserName pubkey={call.pubkey} />\n        <Text>{peer.connection?.connectionState ?? \"Unknown\"}</Text>\n        <Button size=\"sm\" ml=\"auto\" colorScheme=\"red\" isDisabled>\n          Close\n        </Button>\n      </Flex>\n      <Heading size=\"sm\">Server:</Heading>\n      <SimpleGrid spacing=\"2\" columns={{ base: 2, md: 3, lg: 4, xl: 5 }}>\n        <Text>Sent: {server.stats.events.sent}</Text>\n        <Text>Received: {server.stats.events.received}</Text>\n      </SimpleGrid>\n      <Heading size=\"sm\">Client:</Heading>\n      <SimpleGrid spacing=\"2\" columns={{ base: 2, md: 3, lg: 4, xl: 5 }}>\n        <Text>Published: {client.stats.events.published}</Text>\n        <Text>Received: {client.stats.events.received}</Text>\n      </SimpleGrid>\n      {account && (\n        <ButtonGroup ml=\"auto\" size=\"sm\">\n          <Button onClick={sendEvents} isLoading={sending}>\n            Send events\n          </Button>\n          <Button onClick={requestEvents} isLoading={requesting}>\n            Requests contacts\n          </Button>\n        </ButtonGroup>\n      )}\n    </Flex>\n  );\n}\n","import { useEffect } from \"react\";\nimport {\n  Alert,\n  AlertIcon,\n  Button,\n  ButtonGroup,\n  Flex,\n  Heading,\n  Link,\n  Text,\n  useForceUpdate,\n  useInterval,\n} from \"@chakra-ui/react\";\nimport { Link as RouterLink } from \"react-router-dom\";\n\nimport BackButton from \"../../../components/router/back-button\";\nimport webRtcRelaysService from \"../../../services/webrtc-relays\";\nimport { QrCodeIcon } from \"../../../components/icons\";\nimport Connection from \"./components/connection\";\n\nexport default function WebRtcRelaysView() {\n  const update = useForceUpdate();\n  useInterval(update, 1000);\n  useEffect(() => {\n    webRtcRelaysService.broker.on(\"call\", update);\n\n    return () => {\n      webRtcRelaysService.broker.off(\"call\", update);\n    };\n  }, [update]);\n\n  const unanswered = webRtcRelaysService.pendingIncoming.length;\n\n  return (\n    <Flex gap=\"2\" direction=\"column\" overflow=\"auto hidden\" flex={1} px={{ base: \"2\", lg: 0 }}>\n      <Flex gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n        <BackButton hideFrom=\"lg\" size=\"sm\" />\n        <Heading size=\"lg\">WebRTC Relays</Heading>\n\n        <ButtonGroup size=\"sm\" ml=\"auto\">\n          <Button as={RouterLink} to=\"/relays/webrtc/pair\" leftIcon={<QrCodeIcon />}>\n            Pair{unanswered > 0 ? ` (${unanswered})` : \"\"}\n          </Button>\n          <Button as={RouterLink} to=\"/relays/webrtc/connect\" colorScheme=\"primary\">\n            Connect\n          </Button>\n        </ButtonGroup>\n      </Flex>\n\n      <Text fontStyle=\"italic\" mt=\"-2\">\n        WebRTC Relays are temporary relays that can be accessed over{\" \"}\n        <Link href=\"https://webrtc.org/\" target=\"_blank\" color=\"blue.500\">\n          WebRTC\n        </Link>\n      </Text>\n\n      <Heading size=\"md\" mt=\"2\">\n        Connections:\n      </Heading>\n      {webRtcRelaysService.answered.length > 0 ? (\n        webRtcRelaysService.answered.map(({ call, peer, pubkey }) => (\n          <Connection\n            key={pubkey}\n            peer={peer}\n            call={call}\n            client={webRtcRelaysService.clients.get(pubkey)!}\n            server={webRtcRelaysService.servers.get(pubkey)!}\n          />\n        ))\n      ) : (\n        <Alert status=\"info\">\n          <AlertIcon />\n          No connections yet, use the \"Invite\" or \"Connect\" buttons to connect to peer\n        </Alert>\n      )}\n    </Flex>\n  );\n}\n"],"names":["Connection","call","peer","client","server","update","useForceUpdate","useInterval","account","useCurrentAccount","contacts","useUserContactList","sending","setSending","useState","sendEvents","localRelay","sub","event","requesting","setRequesting","requestEvents","getPubkeysFromList","p","jsxs","Flex","jsx","UserAvatar","UserName","Text","_a","Button","Heading","SimpleGrid","ButtonGroup","WebRtcRelaysView","useEffect","webRtcRelaysService","unanswered","BackButton","RouterLink","QrCodeIcon","Link","pubkey","Alert","AlertIcon"],"mappings":"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"}