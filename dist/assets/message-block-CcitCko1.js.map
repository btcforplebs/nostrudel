{"version":3,"file":"message-block-CcitCko1.js","sources":["../../src/providers/local/thread-provider.tsx","../../src/components/message/thread-button.tsx","../../src/components/message/message-bubble.tsx","../../src/components/message/message-block.tsx"],"sourcesContent":["import { PropsWithChildren, createContext, useCallback, useContext, useMemo } from \"react\";\nimport { NostrEvent } from \"nostr-tools\";\nimport { useObservable } from \"applesauce-react\";\n\nimport TimelineLoader from \"../../classes/timeline-loader\";\nimport { eventStore } from \"../../services/event-store\";\n\nexport type Thread = {\n  root?: NostrEvent;\n  rootId: string;\n  messages: NostrEvent[];\n};\ntype ThreadsContextType = {\n  threads: Record<string, Thread>;\n  getRoot: (id: string) => NostrEvent | undefined;\n};\nconst ThreadsContext = createContext<ThreadsContextType>({\n  threads: {},\n  getRoot: (id: string) => {\n    return undefined;\n  },\n});\n\nexport function useThreadsContext() {\n  return useContext(ThreadsContext);\n}\n\nexport default function ThreadsProvider({ timeline, children }: { timeline: TimelineLoader } & PropsWithChildren) {\n  const messages = useObservable(timeline.timeline) ?? [];\n\n  const threads = useMemo(() => {\n    const grouped: Record<string, Thread> = {};\n    for (const message of messages) {\n      const rootId = message.tags.find((t) => t[0] === \"e\" && t[3] === \"root\")?.[1];\n      if (rootId) {\n        if (!grouped[rootId]) {\n          grouped[rootId] = {\n            messages: [],\n            rootId,\n            root: eventStore.getEvent(rootId),\n          };\n        }\n        grouped[rootId].messages.push(message);\n      }\n    }\n    return grouped;\n  }, [messages.length]);\n\n  const getRoot = useCallback((id: string) => {\n    return eventStore.getEvent(id);\n  }, []);\n\n  const context = useMemo(() => ({ threads, getRoot }), [threads, getRoot]);\n\n  return <ThreadsContext.Provider value={context}>{children}</ThreadsContext.Provider>;\n}\n","import { Button, IconButton, IconButtonProps } from \"@chakra-ui/react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { NostrEvent } from \"nostr-tools\";\n\nimport UserAvatar from \"../user/user-avatar\";\nimport { Thread } from \"../../providers/local/thread-provider\";\nimport { ChevronRightIcon, ThreadIcon } from \"../icons\";\n\nexport default function ThreadButton({ thread }: { thread: Thread }) {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onClick = () => {\n    navigate(`.`, { state: { ...location.state, thread: thread.rootId } });\n  };\n\n  return (\n    <Button\n      variant=\"outline\"\n      size=\"sm\"\n      leftIcon={<UserAvatar pubkey={thread.messages[thread.messages.length - 1].pubkey} size=\"xs\" />}\n      rightIcon={<ChevronRightIcon />}\n      onClick={onClick}\n    >\n      {thread.messages.length} replies\n    </Button>\n  );\n}\n\nexport function IconThreadButton({\n  event,\n  ...props\n}: { event: NostrEvent } & Omit<IconButtonProps, \"aria-label\" | \"icon\">) {\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const onClick = () => {\n    navigate(`.`, { state: { ...location.state, thread: event.id } });\n  };\n\n  return (\n    <IconButton\n      icon={<ThreadIcon />}\n      onClick={onClick}\n      aria-label=\"Reply in thread\"\n      title=\"Reply in thread\"\n      {...props}\n    />\n  );\n}\n","import { ReactNode } from \"react\";\nimport { ButtonGroup, Card, CardBody, CardFooter, CardHeader, CardProps } from \"@chakra-ui/react\";\nimport { NostrEvent } from \"nostr-tools\";\n\nimport Timestamp from \"../timestamp\";\nimport UserLink from \"../user/user-link\";\nimport UserDnsIdentity from \"../user/user-dns-identity\";\nimport useEventReactions from \"../../hooks/use-event-reactions\";\nimport EventReactionButtons from \"../event-reactions/event-reactions\";\nimport { IconThreadButton } from \"./thread-button\";\nimport AddReactionButton from \"../note/timeline-note/components/add-reaction-button\";\nimport NoteZapButton from \"../note/note-zap-button\";\nimport useEventIntersectionRef from \"../../hooks/use-event-intersection-ref\";\n\nexport type MessageBubbleProps = {\n  message: NostrEvent;\n  showHeader?: boolean;\n  showThreadButton?: boolean;\n  renderContent: (message: NostrEvent, inlineButtons: ReactNode | null) => ReactNode;\n} & Omit<CardProps, \"children\">;\n\nexport default function MessageBubble({\n  message,\n  showHeader = true,\n  showThreadButton = true,\n  renderContent,\n  ...props\n}: MessageBubbleProps) {\n  const reactions = useEventReactions(message) ?? [];\n  const hasReactions = reactions.length > 0;\n\n  let actionPosition = showHeader ? \"header\" : \"inline\";\n  if (hasReactions && actionPosition === \"inline\") actionPosition = \"footer\";\n\n  const ref = useEventIntersectionRef(message);\n\n  const actions = (\n    <>\n      <NoteZapButton event={message} />\n      <AddReactionButton event={message} portal />\n      {showThreadButton && <IconThreadButton event={message} aria-label=\"Open Thread\" />}\n    </>\n  );\n\n  return (\n    <Card {...props} borderRadius=\"lg\" ref={ref}>\n      {showHeader && (\n        <CardHeader px=\"2\" pt=\"2\" pb=\"0\" gap=\"2\" display=\"flex\" alignItems=\"center\">\n          <UserLink pubkey={message.pubkey} fontWeight=\"bold\" />\n          <UserDnsIdentity pubkey={message.pubkey} onlyIcon />\n          {actionPosition === \"header\" && (\n            <ButtonGroup size=\"xs\" variant=\"ghost\" ml=\"auto\">\n              {actions}\n            </ButtonGroup>\n          )}\n        </CardHeader>\n      )}\n      <CardBody px=\"2\" py=\"2\">\n        {renderContent(\n          message,\n          !hasReactions ? (\n            <ButtonGroup size=\"xs\" variant=\"ghost\" float=\"right\" ml=\"2\">\n              {actionPosition === \"inline\" && actions}\n              <Timestamp timestamp={message.created_at} ml=\"2\" userSelect=\"none\" />\n            </ButtonGroup>\n          ) : null,\n        )}\n      </CardBody>\n      {hasReactions && (\n        <CardFooter alignItems=\"center\" display=\"flex\" gap=\"2\" px=\"2\" pt=\"0\" pb=\"2\">\n          <ButtonGroup size=\"xs\" variant=\"ghost\">\n            {actionPosition === \"footer\" ? actions : <AddReactionButton event={message} portal />}\n            <EventReactionButtons event={message} />\n          </ButtonGroup>\n          <Timestamp ml=\"auto\" timestamp={message.created_at} />\n        </CardFooter>\n      )}\n    </Card>\n  );\n}\n","import { CardProps, Flex } from \"@chakra-ui/react\";\nimport { NostrEvent } from \"nostr-tools\";\n\nimport useCurrentAccount from \"../../hooks/use-current-account\";\nimport MessageBubble, { MessageBubbleProps } from \"./message-bubble\";\nimport { useThreadsContext } from \"../../providers/local/thread-provider\";\nimport ThreadButton from \"./thread-button\";\nimport UserAvatarLink from \"../user/user-avatar-link\";\n\nfunction MessageBubbleWithThread({ message, showThreadButton = true, ...props }: MessageBubbleProps) {\n  const { threads } = useThreadsContext();\n  const thread = threads[message.id];\n\n  return (\n    <>\n      {showThreadButton && !!thread && <ThreadButton thread={thread} />}\n      <MessageBubble message={message} showThreadButton={showThreadButton && !thread} {...props} />\n    </>\n  );\n}\n\nexport type MessageBlockProps = Omit<CardProps, \"children\"> & {\n  messages: NostrEvent[];\n  showThreadButton?: boolean;\n  reverse?: boolean;\n  renderContent: MessageBubbleProps[\"renderContent\"];\n};\n\nexport default function MessageBlock({\n  messages,\n  showThreadButton = true,\n  reverse = false,\n  renderContent,\n}: MessageBlockProps) {\n  const lastEvent = messages[messages.length - 1];\n  const account = useCurrentAccount()!;\n  const isOwn = account.pubkey === lastEvent.pubkey;\n\n  const avatar = <UserAvatarLink pubkey={lastEvent.pubkey} size=\"sm\" my=\"1\" />;\n\n  const MessageBubbleComponent = showThreadButton ? MessageBubbleWithThread : MessageBubble;\n\n  return (\n    <Flex direction=\"row\" gap=\"2\" alignItems=\"flex-end\">\n      {!isOwn && avatar}\n      <Flex\n        direction={reverse ? \"column-reverse\" : \"column\"}\n        gap=\"1\"\n        ml={isOwn ? \"auto\" : 0}\n        mr={isOwn ? 0 : \"auto\"}\n        maxW=\"2xl\"\n        alignItems={isOwn ? \"flex-end\" : \"flex-start\"}\n      >\n        {messages.map((message, i, arr) => (\n          <MessageBubbleComponent\n            key={message.id}\n            message={message}\n            showHeader={reverse ? i === arr.length - 1 : i === 0}\n            minW={{ base: 0, sm: \"sm\", md: \"md\" }}\n            maxW=\"full\"\n            overflow=\"hidden\"\n            showThreadButton={showThreadButton}\n            renderContent={renderContent}\n          />\n        ))}\n      </Flex>\n      {isOwn && avatar}\n    </Flex>\n  );\n}\n"],"names":["ThreadsContext","createContext","id","useThreadsContext","useContext","ThreadsProvider","timeline","children","messages","useObservable","threads","useMemo","grouped","message","rootId","_a","t","eventStore","getRoot","useCallback","context","ThreadButton","thread","navigate","useNavigate","location","useLocation","onClick","jsxs","Button","jsx","UserAvatar","ChevronRightIcon","IconThreadButton","event","props","IconButton","ThreadIcon","MessageBubble","showHeader","showThreadButton","renderContent","hasReactions","useEventReactions","actionPosition","ref","useEventIntersectionRef","actions","Fragment","NoteZapButton","AddReactionButton","Card","CardHeader","UserLink","UserDnsIdentity","ButtonGroup","CardBody","Timestamp","CardFooter","EventReactionButtons","MessageBubbleWithThread","MessageBlock","reverse","lastEvent","isOwn","useCurrentAccount","avatar","UserAvatarLink","MessageBubbleComponent","Flex","i","arr"],"mappings":"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"}