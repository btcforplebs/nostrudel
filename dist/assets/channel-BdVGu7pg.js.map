{"version":3,"file":"channel-BdVGu7pg.js","sources":["../../src/views/channels/components/channel-join-button.tsx","../../src/views/channels/components/channel-metadata-drawer.tsx","../../src/views/channels/components/channel-menu.tsx","../../src/views/channels/components/channel-message-content.tsx","../../src/views/channels/components/channel-message-block.tsx","../../src/views/channels/components/send-message-form.tsx","../../src/views/channels/channel.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport dayjs from \"dayjs\";\nimport { Button, ButtonProps } from \"@chakra-ui/react\";\n\nimport { DraftNostrEvent, NostrEvent } from \"../../../types/nostr-event\";\nimport useCurrentAccount from \"../../../hooks/use-current-account\";\nimport { CHANNELS_LIST_KIND, listAddEvent, listRemoveEvent } from \"../../../helpers/nostr/lists\";\nimport useUserChannelsList from \"../../../hooks/use-user-channels-list\";\nimport { usePublishEvent } from \"../../../providers/global/publish-provider\";\n\nexport default function ChannelJoinButton({\n  channel,\n  ...props\n}: Omit<ButtonProps, \"children\"> & { channel: NostrEvent }) {\n  const publish = usePublishEvent();\n  const account = useCurrentAccount();\n  const { list, pointers } = useUserChannelsList(account?.pubkey);\n\n  const isSubscribed = pointers.find((e) => e.id === channel.id);\n\n  const handleClick = useCallback(async () => {\n    const favList = {\n      kind: CHANNELS_LIST_KIND,\n      content: list?.content ?? \"\",\n      created_at: dayjs().unix(),\n      tags: list?.tags ?? [],\n    };\n\n    let draft: DraftNostrEvent;\n    if (isSubscribed) {\n      draft = listRemoveEvent(favList, channel);\n    } else {\n      draft = listAddEvent(favList, channel);\n    }\n\n    await publish(isSubscribed ? \"Leave Channel\" : \"Join Channel\", draft);\n  }, [isSubscribed, list, channel, publish]);\n\n  return (\n    <Button\n      onClick={handleClick}\n      variant={isSubscribed ? \"outline\" : \"solid\"}\n      colorScheme={isSubscribed ? \"red\" : \"green\"}\n      {...props}\n    >\n      {isSubscribed ? \"Leave\" : \"Join\"}\n    </Button>\n  );\n}\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerProps,\n  Flex,\n  Heading,\n  Image,\n  Link,\n  LinkBox,\n  Text,\n} from \"@chakra-ui/react\";\n\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport useChannelMetadata from \"../../../hooks/use-channel-metadata\";\nimport useTimelineLoader from \"../../../hooks/use-timeline-loader\";\nimport { useTimelineCurserIntersectionCallback } from \"../../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../../providers/local/intersection-observer\";\nimport UserLink from \"../../../components/user/user-link\";\nimport HoverLinkOverlay from \"../../../components/hover-link-overlay\";\nimport UserAvatar from \"../../../components/user/user-avatar\";\nimport UserDnsIdentity from \"../../../components/user/user-dns-identity\";\nimport ChannelJoinButton from \"./channel-join-button\";\nimport { ExternalLinkIcon } from \"../../../components/icons\";\nimport { CHANNELS_LIST_KIND } from \"../../../helpers/nostr/lists\";\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\nimport { useAdditionalRelayContext } from \"../../../providers/local/additional-relay-context\";\n\nfunction UserCard({ pubkey }: { pubkey: string }) {\n  return (\n    <Card as={LinkBox} direction=\"row\" alignItems=\"center\" gap=\"2\" p=\"2\">\n      <UserAvatar pubkey={pubkey} size=\"sm\" />\n      <HoverLinkOverlay as={UserLink} pubkey={pubkey} fontWeight=\"bold\" />\n      <UserDnsIdentity pubkey={pubkey} onlyIcon />\n    </Card>\n  );\n}\nfunction ChannelMembers({ channel, relays }: { channel: NostrEvent; relays: Iterable<string> }) {\n  const { loader, timeline: userLists } = useTimelineLoader(`${channel.id}-members`, relays, {\n    kinds: [CHANNELS_LIST_KIND],\n    \"#e\": [channel.id],\n  });\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <IntersectionObserverProvider callback={callback}>\n      <Flex gap=\"2\" direction=\"column\">\n        {userLists?.map((list) => <UserCard key={list.pubkey} pubkey={list.pubkey} />)}\n      </Flex>\n    </IntersectionObserverProvider>\n  );\n}\n\nexport default function ChannelMetadataDrawer({\n  isOpen,\n  onClose,\n  channel,\n  ...props\n}: Omit<DrawerProps, \"children\"> & { channel: NostrEvent }) {\n  const metadata = useChannelMetadata(channel.id);\n  const relays = useReadRelays(useAdditionalRelayContext());\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={onClose} {...props}>\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerCloseButton />\n        <DrawerHeader p=\"4\">{metadata?.name}</DrawerHeader>\n\n        <DrawerBody px=\"4\" pt=\"0\" pb=\"4\">\n          <ButtonGroup>\n            <ChannelJoinButton channel={channel} />\n            <Button\n              as={Link}\n              href={`https://www.nostrchat.io/channel/${channel.id}`}\n              leftIcon={<Image src=\"https://www.nostrchat.io//favicon.ico\" w=\"6\" h=\"6\" />}\n              rightIcon={<ExternalLinkIcon />}\n              isExternal\n            >\n              Open NostrChat\n            </Button>\n          </ButtonGroup>\n          <Heading size=\"sm\" mt=\"2\">\n            About\n          </Heading>\n          <Text whiteSpace=\"pre\">{metadata?.about}</Text>\n          <Heading size=\"sm\" mt=\"2\">\n            Members\n          </Heading>\n          <ChannelMembers channel={channel} relays={relays} />\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n","import { DotsMenuButton, MenuIconButtonProps } from \"../../../components/dots-menu-button\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport OpenInAppMenuItem from \"../../../components/common-menu-items/open-in-app\";\nimport CopyEmbedCodeMenuItem from \"../../../components/common-menu-items/copy-embed-code\";\nimport DebugEventMenuItem from \"../../../components/debug-modal/debug-event-menu-item\";\n\nexport default function ChannelMenu({\n  channel,\n  ...props\n}: Omit<MenuIconButtonProps, \"children\"> & { channel: NostrEvent }) {\n  return (\n    <>\n      <DotsMenuButton {...props}>\n        <OpenInAppMenuItem event={channel} />\n        <CopyEmbedCodeMenuItem event={channel} />\n        <DebugEventMenuItem event={channel} />\n      </DotsMenuButton>\n    </>\n  );\n}\n","import { memo } from \"react\";\nimport { Box, BoxProps } from \"@chakra-ui/react\";\nimport { useRenderedContent } from \"applesauce-react\";\n\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport { TrustProvider } from \"../../../providers/local/trust-provider\";\nimport {\n  renderAppleMusicUrl,\n  renderGenericUrl,\n  renderImageUrl,\n  renderRedditUrl,\n  renderSimpleXLink,\n  renderSongDotLinkUrl,\n  renderSoundCloudUrl,\n  renderSpotifyUrl,\n  renderStemstrUrl,\n  renderStreamUrl,\n  renderTidalUrl,\n  renderTwitterUrl,\n  renderVideoUrl,\n  renderWavlakeUrl,\n  renderYoutubeURL,\n} from \"../../../components/content/links\";\nimport { LightboxProvider } from \"../../../components/lightbox-provider\";\nimport { renderAudioUrl } from \"../../../components/content/links/audio\";\nimport { components } from \"../../../components/content\";\n\nconst linkRenderers = [\n  renderSimpleXLink,\n  renderYoutubeURL,\n  renderTwitterUrl,\n  renderRedditUrl,\n  renderWavlakeUrl,\n  renderAppleMusicUrl,\n  renderSpotifyUrl,\n  renderTidalUrl,\n  renderSongDotLinkUrl,\n  renderStemstrUrl,\n  renderSoundCloudUrl,\n  renderImageUrl,\n  renderVideoUrl,\n  renderStreamUrl,\n  renderAudioUrl,\n  renderGenericUrl,\n];\n\nconst ChannelMessageContent = memo(({ message, children, ...props }: BoxProps & { message: NostrEvent }) => {\n  const content = useRenderedContent(message, components, { linkRenderers });\n\n  return (\n    <TrustProvider event={message}>\n      <LightboxProvider>\n        <Box whiteSpace=\"pre-wrap\" {...props}>\n          {content}\n          {children}\n        </Box>\n      </LightboxProvider>\n    </TrustProvider>\n  );\n});\n\nexport default ChannelMessageContent;\n","import { ReactNode, memo, useCallback } from \"react\";\n\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport MessageBlock, { MessageBlockProps } from \"../../../components/message/message-block\";\nimport ChannelMessageContent from \"./channel-message-content\";\n\nfunction ChannelMessageBlock({ ...props }: Omit<MessageBlockProps, \"renderContent\">) {\n  const renderContent = useCallback(\n    (message: NostrEvent, buttons: ReactNode | null) => (\n      <ChannelMessageContent message={message} display=\"inline\">\n        {buttons}\n      </ChannelMessageContent>\n    ),\n    [],\n  );\n\n  return <MessageBlock renderContent={renderContent} showThreadButton={false} {...props} />;\n}\n\nexport default memo(ChannelMessageBlock);\n","import { useRef, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport dayjs from \"dayjs\";\nimport { kinds } from \"nostr-tools\";\n\nimport { Button, Flex, FlexProps, Heading } from \"@chakra-ui/react\";\n\nimport MagicTextArea, { RefType } from \"../../../components/magic-textarea\";\nimport { useTextAreaUploadFileWithForm } from \"../../../hooks/use-textarea-upload-file\";\nimport { DraftNostrEvent, NostrEvent } from \"../../../types/nostr-event\";\nimport { createEmojiTags, ensureNotifyPubkeys, getPubkeysMentionedInContent } from \"../../../helpers/nostr/post\";\nimport { useContextEmojis } from \"../../../providers/global/emoji-provider\";\nimport { usePublishEvent } from \"../../../providers/global/publish-provider\";\n\nexport default function ChannelMessageForm({\n  channel,\n  rootId,\n  ...props\n}: { channel: NostrEvent; rootId?: string } & Omit<FlexProps, \"children\">) {\n  const publish = usePublishEvent();\n  const emojis = useContextEmojis();\n\n  const [loadingMessage, setLoadingMessage] = useState(\"\");\n  const { getValues, setValue, watch, handleSubmit, formState, reset } = useForm({\n    defaultValues: {\n      content: \"\",\n    },\n    mode: \"all\",\n  });\n  watch(\"content\");\n\n  const componentRef = useRef<RefType | null>(null);\n  const textAreaRef = useRef<HTMLTextAreaElement | null>(null);\n  const { onPaste } = useTextAreaUploadFileWithForm(componentRef, getValues, setValue);\n\n  const sendMessage = handleSubmit(async (values) => {\n    if (!values.content) return;\n\n    let draft: DraftNostrEvent = {\n      kind: kinds.ChannelMessage,\n      content: values.content,\n      tags: [[\"e\", rootId || channel.id, \"\", \"root\"]],\n      created_at: dayjs().unix(),\n    };\n\n    const contentMentions = getPubkeysMentionedInContent(draft.content);\n    draft = createEmojiTags(draft, emojis);\n    draft = ensureNotifyPubkeys(draft, contentMentions);\n\n    setLoadingMessage(\"Signing...\");\n    await publish(\"Send DM\", draft, undefined, false);\n    reset({ content: \"\" });\n\n    // refocus input\n    setTimeout(() => textAreaRef.current?.focus(), 50);\n    setLoadingMessage(\"\");\n  });\n\n  const formRef = useRef<HTMLFormElement | null>(null);\n\n  return (\n    <Flex as=\"form\" gap=\"2\" onSubmit={sendMessage} ref={formRef} {...props}>\n      {loadingMessage ? (\n        <Heading size=\"md\" mx=\"auto\" my=\"4\">\n          {loadingMessage}\n        </Heading>\n      ) : (\n        <>\n          <MagicTextArea\n            mb=\"2\"\n            value={getValues().content}\n            onChange={(e) => setValue(\"content\", e.target.value, { shouldDirty: true })}\n            rows={2}\n            isRequired\n            instanceRef={(inst) => (componentRef.current = inst)}\n            ref={textAreaRef}\n            onPaste={onPaste}\n            onKeyDown={(e) => {\n              if ((e.ctrlKey || e.metaKey) && e.key === \"Enter\" && formRef.current) formRef.current.requestSubmit();\n            }}\n          />\n          <Button type=\"submit\">Send</Button>\n        </>\n      )}\n    </Flex>\n  );\n}\n","import { memo, useCallback, useMemo } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Button, Flex, Heading, Spacer, Spinner, useDisclosure } from \"@chakra-ui/react\";\nimport { kinds } from \"nostr-tools\";\nimport { ChannelHiddenQuery, ChannelMessagesQuery, ChannelMutedQuery } from \"applesauce-channel\";\n\nimport useSingleEvent from \"../../hooks/use-single-event\";\nimport { ErrorBoundary } from \"../../components/error-boundary\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport useChannelMetadata from \"../../hooks/use-channel-metadata\";\nimport { ChevronLeftIcon } from \"../../components/icons\";\nimport ChannelMetadataDrawer from \"./components/channel-metadata-drawer\";\nimport ChannelJoinButton from \"./components/channel-join-button\";\nimport ChannelMenu from \"./components/channel-menu\";\nimport useClientSideMuteFilter from \"../../hooks/use-client-side-mute-filter\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport ThreadsProvider from \"../../providers/local/thread-provider\";\nimport TimelineLoader from \"../../classes/timeline-loader\";\nimport { groupMessages } from \"../../helpers/nostr/dms\";\nimport ChannelMessageBlock from \"./components/channel-message-block\";\nimport TimelineActionAndStatus from \"../../components/timeline/timeline-action-and-status\";\nimport ChannelMessageForm from \"./components/send-message-form\";\nimport useParamsEventPointer from \"../../hooks/use-params-event-pointer\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport { truncateId } from \"../../helpers/string\";\nimport { useStoreQuery } from \"../../hooks/use-store-query\";\n\nconst ChannelChatLog = memo(({ timeline, channel }: { timeline: TimelineLoader; channel: NostrEvent }) => {\n  const messages = useStoreQuery(ChannelMessagesQuery, [channel]) ?? [];\n  const mutes = useStoreQuery(ChannelMutedQuery, [channel]);\n  const hidden = useStoreQuery(ChannelHiddenQuery, [channel]);\n\n  const filteredMessages = useMemo(\n    () =>\n      messages.filter((e) => {\n        if (mutes?.has(e.pubkey)) return false;\n        if (hidden?.has(e.id)) return false;\n\n        return !e.tags.some((t) => t[0] === \"e\" && t[1] !== channel.id && t[3] === \"root\");\n      }),\n    [messages.length, channel.id, hidden?.size, mutes?.size],\n  );\n  const grouped = useMemo(() => groupMessages(filteredMessages), [filteredMessages]);\n\n  return (\n    <>\n      {grouped.map((group) => (\n        <ChannelMessageBlock key={group.id} messages={group.events} reverse />\n      ))}\n    </>\n  );\n});\n\nfunction ChannelPage({ channel }: { channel: NostrEvent }) {\n  const navigate = useNavigate();\n  const relays = useReadRelays();\n  const drawer = useDisclosure();\n\n  const metadata = useChannelMetadata(channel.id, relays);\n\n  const clientMuteFilter = useClientSideMuteFilter();\n  const eventFilter = useCallback(\n    (e: NostrEvent) => {\n      if (clientMuteFilter(e)) return false;\n      return true;\n    },\n    [clientMuteFilter],\n  );\n  const { loader, timeline } = useTimelineLoader(\n    `${truncateId(channel.id)}-chat-messages`,\n    relays,\n    {\n      kinds: [kinds.ChannelMessage],\n      \"#e\": [channel.id],\n    },\n    { eventFilter },\n  );\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <ThreadsProvider timeline={loader}>\n      <IntersectionObserverProvider callback={callback}>\n        <Flex h=\"full\" overflow=\"hidden\" direction=\"column\" p=\"2\" gap=\"2\" flexGrow={1}>\n          <Flex gap=\"2\" alignItems=\"center\">\n            <Button leftIcon={<ChevronLeftIcon />} onClick={() => navigate(-1)}>\n              Back\n            </Button>\n            <Heading hideBelow=\"lg\" size=\"lg\">\n              {metadata?.name}\n            </Heading>\n            <Spacer />\n            <ChannelJoinButton channel={channel} hideBelow=\"lg\" />\n            <Button onClick={drawer.onOpen}>Channel Info</Button>\n            <ChannelMenu channel={channel} aria-label=\"More Options\" />\n          </Flex>\n\n          <Flex\n            h=\"0\"\n            flexGrow={1}\n            overflowX=\"hidden\"\n            overflowY=\"scroll\"\n            direction=\"column-reverse\"\n            gap=\"2\"\n            py=\"4\"\n            px=\"2\"\n          >\n            <ChannelChatLog timeline={loader} channel={channel} />\n            <TimelineActionAndStatus timeline={loader} />\n          </Flex>\n\n          <ChannelMessageForm channel={channel} />\n        </Flex>\n        {drawer.isOpen && <ChannelMetadataDrawer isOpen onClose={drawer.onClose} channel={channel} size=\"lg\" />}\n      </IntersectionObserverProvider>\n    </ThreadsProvider>\n  );\n}\n\nexport default function ChannelView() {\n  const pointer = useParamsEventPointer(\"id\");\n  const channel = useSingleEvent(pointer?.id, pointer?.relays);\n\n  if (!channel) return <Spinner />;\n\n  return (\n    <ErrorBoundary>\n      <ChannelPage channel={channel} />\n    </ErrorBoundary>\n  );\n}\n"],"names":["ChannelJoinButton","channel","props","publish","usePublishEvent","account","useCurrentAccount","list","pointers","useUserChannelsList","isSubscribed","e","handleClick","useCallback","favList","CHANNELS_LIST_KIND","dayjs","draft","listRemoveEvent","listAddEvent","jsx","Button","UserCard","pubkey","jsxs","Card","LinkBox","UserAvatar","HoverLinkOverlay","UserLink","UserDnsIdentity","ChannelMembers","relays","loader","userLists","useTimelineLoader","callback","useTimelineCurserIntersectionCallback","IntersectionObserverProvider","Flex","ChannelMetadataDrawer","isOpen","onClose","metadata","useChannelMetadata","useReadRelays","useAdditionalRelayContext","Drawer","DrawerOverlay","DrawerContent","DrawerCloseButton","DrawerHeader","DrawerBody","ButtonGroup","Link","Image","ExternalLinkIcon","Heading","Text","ChannelMenu","Fragment","DotsMenuButton","OpenInAppMenuItem","CopyEmbedCodeMenuItem","DebugEventMenuItem","linkRenderers","renderSimpleXLink","renderYoutubeURL","renderTwitterUrl","renderRedditUrl","renderWavlakeUrl","renderAppleMusicUrl","renderSpotifyUrl","renderTidalUrl","renderSongDotLinkUrl","renderStemstrUrl","renderSoundCloudUrl","renderImageUrl","renderVideoUrl","renderStreamUrl","renderAudioUrl","renderGenericUrl","ChannelMessageContent","memo","message","children","content","useRenderedContent","components","TrustProvider","LightboxProvider","Box","ChannelMessageBlock","renderContent","buttons","MessageBlock","ChannelMessageForm","rootId","emojis","useContextEmojis","loadingMessage","setLoadingMessage","useState","getValues","setValue","watch","handleSubmit","formState","reset","useForm","componentRef","useRef","textAreaRef","onPaste","useTextAreaUploadFileWithForm","sendMessage","values","kinds","contentMentions","getPubkeysMentionedInContent","createEmojiTags","ensureNotifyPubkeys","_a","formRef","MagicTextArea","inst","ChannelChatLog","timeline","messages","useStoreQuery","ChannelMessagesQuery","mutes","ChannelMutedQuery","hidden","ChannelHiddenQuery","filteredMessages","useMemo","t","grouped","groupMessages","group","ChannelPage","navigate","useNavigate","drawer","useDisclosure","clientMuteFilter","useClientSideMuteFilter","eventFilter","truncateId","ThreadsProvider","ChevronLeftIcon","Spacer","TimelineActionAndStatus","ChannelView","pointer","useParamsEventPointer","useSingleEvent","ErrorBoundary","Spinner"],"mappings":"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"}