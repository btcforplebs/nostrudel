{"version":3,"file":"index-CAXef7at.js","sources":["../../src/views/torrents/components/category-select.tsx","../../src/views/torrents/index.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\nimport { Select, SelectProps } from \"@chakra-ui/react\";\nimport { Category, torrentCatagories } from \"../../../helpers/nostr/torrents\";\n\nexport default function CategorySelect({ ...props }: Omit<SelectProps, \"children\">) {\n  function renderCategory(a: Category, tags: Array<string>): ReactNode {\n    return (\n      <>\n        <option value={tags.join(\",\")}>{a.name}</option>\n        {a.sub_category?.map((b) => renderCategory(b, [...tags, b.tag]))}\n      </>\n    );\n  }\n\n  return (\n    <Select {...props}>\n      <option value=\"\">All</option>\n      {torrentCatagories.map((category) => (\n        <optgroup key={category.tag} label={category.name}>\n          {renderCategory(category, [category.tag])}\n        </optgroup>\n      ))}\n    </Select>\n  );\n}\n","import { ChangeEventHandler, useCallback, useMemo, useState } from \"react\";\nimport { Alert, Button, Flex, Spacer, Table, TableContainer, Tbody, Th, Thead, Tr, useToast } from \"@chakra-ui/react\";\nimport { Link as RouterLink, useNavigate } from \"react-router-dom\";\n\nimport PeopleListSelection from \"../../components/people-list-selection/people-list-selection\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\nimport PeopleListProvider, { usePeopleListContext } from \"../../providers/local/people-list-provider\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport useClientSideMuteFilter from \"../../hooks/use-client-side-mute-filter\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport { TORRENT_KIND, validateTorrent } from \"../../helpers/nostr/torrents\";\nimport TorrentTableRow from \"./components/torrent-table-row\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport useCurrentAccount from \"../../hooks/use-current-account\";\nimport useUserProfile from \"../../hooks/use-user-profile\";\nimport accountService from \"../../services/account\";\nimport CategorySelect from \"./components/category-select\";\nimport useRouteSearchValue from \"../../hooks/use-route-search-value\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport NsecAccount from \"../../classes/accounts/nsec-account\";\n\nfunction Warning() {\n  const navigate = useNavigate();\n  const toast = useToast();\n  const account = useCurrentAccount()!;\n  const metadata = useUserProfile(account.pubkey);\n  const [loading, setLoading] = useState(false);\n  const createAnonAccount = async () => {\n    setLoading(true);\n    try {\n      const account = NsecAccount.newKey();\n      accountService.addAccount(account);\n      accountService.switchAccount(account.pubkey);\n      navigate(\"/relays\");\n    } catch (e) {\n      if (e instanceof Error) toast({ description: e.message, status: \"error\" });\n    }\n    setLoading(false);\n  };\n\n  return (\n    !!metadata && (\n      <Alert status=\"warning\" flexWrap=\"wrap\">\n        There are many jurisdictions where Torrenting is illegal, You should probably not use your personal nostr\n        account.\n        <Button onClick={createAnonAccount} variant=\"link\" ml=\"auto\" isLoading={loading}>\n          Create anon account\n        </Button>\n      </Alert>\n    )\n  );\n}\n\nfunction TorrentsPage() {\n  const { filter, listId } = usePeopleListContext();\n  const relays = useReadRelays();\n  const tagsParam = useRouteSearchValue(\"tags\");\n  const tags = tagsParam.value?.split(\",\") ?? [];\n\n  const handleTagsChange = useCallback<ChangeEventHandler<HTMLSelectElement>>(\n    (e) => {\n      if (e.target.value) tagsParam.setValue(e.target.value);\n      else tagsParam.clearValue();\n    },\n    [tagsParam.setValue, tagsParam.clearValue],\n  );\n\n  const muteFilter = useClientSideMuteFilter();\n  const eventFilter = useCallback(\n    (e: NostrEvent) => {\n      if (muteFilter(e)) return false;\n      if (!validateTorrent(e)) return false;\n      if (tags.length > 0 && tags.some((t) => !e.tags.some((e) => e[1] === t))) return false;\n      return true;\n    },\n    [muteFilter, tags.join(\",\")],\n  );\n  const query = useMemo(() => {\n    if (!filter) return undefined;\n    if (tags.length > 0) return { ...filter, kinds: [TORRENT_KIND], \"#t\": tags };\n    else return { ...filter, kinds: [TORRENT_KIND] };\n  }, [tags.join(\",\"), filter]);\n  const { loader, timeline: torrents } = useTimelineLoader(`${listId || \"global\"}-torrents`, relays, query, {\n    eventFilter,\n  });\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  const account = useCurrentAccount();\n\n  return (\n    <VerticalPageLayout>\n      {!!account && <Warning />}\n      <Flex gap=\"2\">\n        <PeopleListSelection />\n        <CategorySelect maxW=\"xs\" value={tags.join(\",\")} onChange={handleTagsChange} />\n        <Spacer />\n        <Button as={RouterLink} to=\"/torrents/new\">\n          New Torrent\n        </Button>\n      </Flex>\n      <IntersectionObserverProvider callback={callback}>\n        <TableContainer>\n          <Table size=\"sm\">\n            <Thead>\n              <Tr>\n                <Th>Tags</Th>\n                <Th>Name</Th>\n                <Th>Uploaded</Th>\n                <Th>Size</Th>\n                <Th>From</Th>\n                <Th />\n              </Tr>\n            </Thead>\n            <Tbody>{torrents?.map((torrent) => <TorrentTableRow key={torrent.id} torrent={torrent} />)}</Tbody>\n          </Table>\n        </TableContainer>\n      </IntersectionObserverProvider>\n    </VerticalPageLayout>\n  );\n}\n\nexport default function TorrentsView() {\n  return (\n    <PeopleListProvider>\n      <TorrentsPage />\n    </PeopleListProvider>\n  );\n}\n"],"names":["CategorySelect","props","renderCategory","tags","jsxs","Fragment","jsx","_a","b","Select","torrentCatagories","category","Warning","navigate","useNavigate","toast","useToast","account","useCurrentAccount","metadata","useUserProfile","loading","setLoading","useState","createAnonAccount","NsecAccount","accountService","e","Alert","Button","TorrentsPage","filter","listId","usePeopleListContext","relays","useReadRelays","tagsParam","useRouteSearchValue","handleTagsChange","useCallback","muteFilter","useClientSideMuteFilter","eventFilter","validateTorrent","t","query","useMemo","TORRENT_KIND","loader","torrents","useTimelineLoader","callback","useTimelineCurserIntersectionCallback","VerticalPageLayout","Flex","PeopleListSelection","Spacer","RouterLink","IntersectionObserverProvider","TableContainer","Table","Thead","Tr","Th","Tbody","torrent","TorrentTableRow","TorrentsView","PeopleListProvider"],"mappings":"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"}