{"version":3,"file":"badge-details-Bnuk-cSu.js","sources":["../../src/views/badges/badge-details.tsx"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport { kinds } from \"nostr-tools\";\nimport { useObservable } from \"applesauce-react\";\nimport {\n  Button,\n  Flex,\n  Heading,\n  Image,\n  SimpleGrid,\n  Spacer,\n  Spinner,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\n\nimport { ChevronLeftIcon } from \"../../components/icons\";\nimport useReplaceableEvent from \"../../hooks/use-replaceable-event\";\nimport { getBadgeAwardPubkeys, getBadgeDescription, getBadgeImage, getBadgeName } from \"../../helpers/nostr/badges\";\nimport BadgeMenu from \"./components/badge-menu\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport useSubject from \"../../hooks/use-subject\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport { getEventCoordinate } from \"../../helpers/nostr/event\";\nimport UserAvatarLink from \"../../components/user/user-avatar-link\";\nimport UserLink from \"../../components/user/user-link\";\nimport Timestamp from \"../../components/timestamp\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\nimport BadgeAwardCard from \"./components/badge-award-card\";\nimport TimelineLoader from \"../../classes/timeline-loader\";\nimport { ErrorBoundary } from \"../../components/error-boundary\";\nimport useParamsAddressPointer from \"../../hooks/use-params-address-pointer\";\n\nfunction BadgeActivityTab({ timeline }: { timeline: TimelineLoader }) {\n  const awards = useObservable(timeline.timeline);\n  const callback = useTimelineCurserIntersectionCallback(timeline);\n\n  return (\n    <Flex direction=\"column\" gap=\"4\">\n      <IntersectionObserverProvider callback={callback}>\n        {awards?.map((award) => (\n          <ErrorBoundary key={award.id}>\n            <BadgeAwardCard award={award} showImage={false} />\n          </ErrorBoundary>\n        ))}\n      </IntersectionObserverProvider>\n    </Flex>\n  );\n}\n\nfunction BadgeUsersTab({ timeline }: { timeline: TimelineLoader }) {\n  const awards = useObservable(timeline.timeline);\n  const callback = useTimelineCurserIntersectionCallback(timeline);\n\n  const pubkeys = new Set<string>();\n  if (awards) {\n    for (const award of awards) {\n      for (const { pubkey } of getBadgeAwardPubkeys(award)) {\n        pubkeys.add(pubkey);\n      }\n    }\n  }\n\n  return (\n    <SimpleGrid spacing={4} columns={[1, 2, 2, 3, 4, 5, 6]}>\n      <IntersectionObserverProvider callback={callback}>\n        {Array.from(pubkeys).map((pubkey) => (\n          <Flex key={pubkey} gap=\"2\" alignItems=\"center\">\n            <UserAvatarLink pubkey={pubkey} size=\"md\" />\n            <UserLink pubkey={pubkey} fontWeight=\"bold\" isTruncated />\n          </Flex>\n        ))}\n      </IntersectionObserverProvider>\n    </SimpleGrid>\n  );\n}\n\nfunction BadgeDetailsPage({ badge }: { badge: NostrEvent }) {\n  const navigate = useNavigate();\n\n  const image = getBadgeImage(badge);\n  const description = getBadgeDescription(badge);\n\n  const readRelays = useReadRelays();\n  const coordinate = getEventCoordinate(badge);\n  const { loader } = useTimelineLoader(`${coordinate}-awards`, readRelays, {\n    \"#a\": [coordinate],\n    kinds: [kinds.BadgeAward],\n  });\n\n  if (!badge) return <Spinner />;\n\n  return (\n    <VerticalPageLayout>\n      <Flex gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n        <Button onClick={() => navigate(-1)} leftIcon={<ChevronLeftIcon />}>\n          Back\n        </Button>\n\n        <UserAvatarLink pubkey={badge.pubkey} size=\"sm\" />\n        <UserLink fontWeight=\"bold\" pubkey={badge.pubkey} />\n        <Text>|</Text>\n        <Heading size=\"md\">{getBadgeName(badge)}</Heading>\n\n        <Spacer />\n\n        <BadgeMenu aria-label=\"More options\" badge={badge} />\n      </Flex>\n\n      <Flex direction={{ base: \"column\", lg: \"row\" }} gap=\"4\">\n        {image && (\n          <Image src={image.src} maxW=\"3in\" mr=\"2\" mb=\"2\" mx={{ base: \"auto\", lg: \"initial\" }} borderRadius=\"lg\" />\n        )}\n        <Flex direction=\"column\">\n          <Heading size=\"md\">{getBadgeName(badge)}</Heading>\n          <Text>\n            Created by: <UserAvatarLink pubkey={badge.pubkey} size=\"xs\" />{\" \"}\n            <UserLink fontWeight=\"bold\" pubkey={badge.pubkey} />\n          </Text>\n          <Text>\n            Created: <Timestamp timestamp={badge.created_at} />\n          </Text>\n          {description && (\n            <>\n              <Heading size=\"md\" mt=\"2\">\n                Description\n              </Heading>\n              <Text pb=\"2\">{description}</Text>\n            </>\n          )}\n        </Flex>\n      </Flex>\n\n      <Tabs colorScheme=\"primary\" isLazy>\n        <TabList>\n          <Tab>Activity</Tab>\n          <Tab>Users</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel px=\"0\">\n            <BadgeActivityTab timeline={loader} />\n          </TabPanel>\n          <TabPanel>\n            <BadgeUsersTab timeline={loader} />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </VerticalPageLayout>\n  );\n}\n\nexport default function BadgeDetailsView() {\n  const pointer = useParamsAddressPointer(\"naddr\");\n  const badge = useReplaceableEvent(pointer);\n\n  if (!badge) return <Spinner />;\n\n  return <BadgeDetailsPage badge={badge} />;\n}\n"],"names":["BadgeActivityTab","timeline","awards","useObservable","callback","useTimelineCurserIntersectionCallback","jsx","Flex","IntersectionObserverProvider","award","ErrorBoundary","BadgeAwardCard","BadgeUsersTab","pubkeys","pubkey","getBadgeAwardPubkeys","SimpleGrid","jsxs","UserAvatarLink","UserLink","BadgeDetailsPage","badge","navigate","useNavigate","image","getBadgeImage","description","getBadgeDescription","readRelays","useReadRelays","coordinate","getEventCoordinate","loader","useTimelineLoader","kinds","VerticalPageLayout","Button","ChevronLeftIcon","Text","Heading","getBadgeName","Spacer","BadgeMenu","Image","Timestamp","Fragment","Tabs","TabList","Tab","TabPanels","TabPanel","Spinner","BadgeDetailsView","pointer","useParamsAddressPointer","useReplaceableEvent"],"mappings":"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"}