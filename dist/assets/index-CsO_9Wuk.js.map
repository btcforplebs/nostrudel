{"version":3,"file":"index-CsO_9Wuk.js","sources":["../../src/views/tracks/components/track-menu.tsx","../../src/views/tracks/components/track-card.tsx","../../src/views/tracks/index.tsx"],"sourcesContent":["import { NostrEvent } from \"../../../types/nostr-event\";\nimport { DotsMenuButton, MenuIconButtonProps } from \"../../../components/dots-menu-button\";\nimport OpenInAppMenuItem from \"../../../components/common-menu-items/open-in-app\";\nimport ShareLinkMenuItem from \"../../../components/common-menu-items/share-link\";\nimport CopyEmbedCodeMenuItem from \"../../../components/common-menu-items/copy-embed-code\";\nimport MuteUserMenuItem from \"../../../components/common-menu-items/mute-user\";\nimport DebugEventMenuItem from \"../../../components/debug-modal/debug-event-menu-item\";\n\nexport default function TrackMenu({ track, ...props }: { track: NostrEvent } & Omit<MenuIconButtonProps, \"children\">) {\n  return (\n    <>\n      <DotsMenuButton {...props}>\n        <OpenInAppMenuItem event={track} />\n        <ShareLinkMenuItem event={track} />\n        <CopyEmbedCodeMenuItem event={track} />\n        <MuteUserMenuItem event={track} />\n\n        <DebugEventMenuItem event={track} />\n      </DotsMenuButton>\n    </>\n  );\n}\n","import { Button, ButtonGroup, Card, CardBody, CardFooter, CardHeader, CardProps, Flex, Tag } from \"@chakra-ui/react\";\n\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport { getHashtags } from \"../../../helpers/nostr/stemstr\";\nimport { CompactNoteContent } from \"../../../components/compact-note-content\";\nimport Timestamp from \"../../../components/timestamp\";\nimport UserLink from \"../../../components/user/user-link\";\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\nimport { ReplyIcon } from \"../../../components/icons\";\nimport TrackStemstrButton from \"./track-stemstr-button\";\nimport TrackDownloadButton from \"./track-download-button\";\nimport TrackPlayer from \"./track-player\";\nimport UserDnsIdentity from \"../../../components/user/user-dns-identity\";\nimport TrackMenu from \"./track-menu\";\nimport QuoteEventButton from \"../../../components/note/quote-event-button\";\nimport NoteZapButton from \"../../../components/note/note-zap-button\";\nimport useEventIntersectionRef from \"../../../hooks/use-event-intersection-ref\";\n\nexport default function TrackCard({ track, ...props }: { track: NostrEvent } & Omit<CardProps, \"children\">) {\n  const hashtags = getHashtags(track);\n\n  const ref = useEventIntersectionRef(track);\n\n  return (\n    <Card variant=\"outline\" ref={ref} {...props}>\n      <CardHeader display=\"flex\" alignItems=\"center\" p=\"2\" pb=\"0\" gap=\"2\">\n        <UserAvatarLink pubkey={track.pubkey} size=\"sm\" />\n        <UserLink pubkey={track.pubkey} isTruncated fontWeight=\"bold\" fontSize=\"lg\" />\n        <UserDnsIdentity pubkey={track.pubkey} onlyIcon />\n        <Timestamp ml=\"auto\" timestamp={track.created_at} />\n      </CardHeader>\n      <CardBody p=\"2\" display=\"flex\" gap=\"2\" flexDirection=\"column\">\n        <TrackPlayer track={track} />\n        <CompactNoteContent event={track} />\n        {hashtags.length > 0 && (\n          <Flex wrap=\"wrap\" gap=\"2\">\n            {hashtags.map((hashtag) => (\n              <Tag key={hashtag}>#{hashtag}</Tag>\n            ))}\n          </Flex>\n        )}\n      </CardBody>\n      <CardFooter px=\"2\" pt=\"0\" pb=\"2\" flexWrap=\"wrap\" gap=\"2\">\n        <ButtonGroup size=\"sm\" variant=\"ghost\">\n          <Button leftIcon={<ReplyIcon />} isDisabled>\n            Comment\n          </Button>\n          <QuoteEventButton event={track} />\n          <NoteZapButton event={track} />\n        </ButtonGroup>\n        <ButtonGroup size=\"sm\" ml=\"auto\">\n          <TrackDownloadButton track={track} />\n          <TrackStemstrButton track={track} />\n          <TrackMenu track={track} aria-label=\"Options\" />\n        </ButtonGroup>\n      </CardFooter>\n    </Card>\n  );\n}\n","import { useCallback } from \"react\";\nimport { Flex } from \"@chakra-ui/react\";\n\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\nimport { STEMSTR_RELAY, STEMSTR_TRACK_KIND } from \"../../helpers/nostr/stemstr\";\nimport useTimelineLoader from \"../../hooks/use-timeline-loader\";\nimport PeopleListProvider, { usePeopleListContext } from \"../../providers/local/people-list-provider\";\nimport PeopleListSelection from \"../../components/people-list-selection/people-list-selection\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport TrackCard from \"./components/track-card\";\nimport useClientSideMuteFilter from \"../../hooks/use-client-side-mute-filter\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport { AdditionalRelayProvider, useAdditionalRelayContext } from \"../../providers/local/additional-relay-context\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\n\nfunction TracksPage() {\n  const { listId, filter } = usePeopleListContext();\n  const relays = useReadRelays(useAdditionalRelayContext());\n\n  const clientMuteFilter = useClientSideMuteFilter();\n  const eventFilter = useCallback(\n    (event: NostrEvent) => {\n      if (clientMuteFilter(event)) return false;\n      return true;\n    },\n    [clientMuteFilter],\n  );\n  const { loader, timeline: tracks } = useTimelineLoader(\n    `${listId}-tracks`,\n    relays,\n    filter && { kinds: [STEMSTR_TRACK_KIND], ...filter },\n    {\n      eventFilter,\n    },\n  );\n  const callback = useTimelineCurserIntersectionCallback(loader);\n\n  return (\n    <VerticalPageLayout>\n      <Flex gap=\"2\" wrap=\"wrap\">\n        <PeopleListSelection />\n      </Flex>\n      <IntersectionObserverProvider callback={callback}>\n        {tracks?.map((track) => <TrackCard key={track.id} track={track} />)}\n      </IntersectionObserverProvider>\n    </VerticalPageLayout>\n  );\n}\n\nexport default function TracksView() {\n  return (\n    <PeopleListProvider>\n      <AdditionalRelayProvider relays={[STEMSTR_RELAY]}>\n        <TracksPage />\n      </AdditionalRelayProvider>\n    </PeopleListProvider>\n  );\n}\n"],"names":["TrackMenu","track","props","jsx","Fragment","jsxs","DotsMenuButton","OpenInAppMenuItem","ShareLinkMenuItem","CopyEmbedCodeMenuItem","MuteUserMenuItem","DebugEventMenuItem","TrackCard","hashtags","getHashtags","ref","useEventIntersectionRef","Card","CardHeader","UserAvatarLink","UserLink","UserDnsIdentity","Timestamp","CardBody","TrackPlayer","CompactNoteContent","Flex","hashtag","Tag","CardFooter","ButtonGroup","Button","ReplyIcon","QuoteEventButton","NoteZapButton","TrackDownloadButton","TrackStemstrButton","TracksPage","listId","filter","usePeopleListContext","relays","useReadRelays","useAdditionalRelayContext","clientMuteFilter","useClientSideMuteFilter","eventFilter","useCallback","event","loader","tracks","useTimelineLoader","STEMSTR_TRACK_KIND","callback","useTimelineCurserIntersectionCallback","VerticalPageLayout","PeopleListSelection","IntersectionObserverProvider","TracksView","PeopleListProvider","AdditionalRelayProvider","STEMSTR_RELAY"],"mappings":"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"}