{"version":3,"file":"chat-log-CLBRTBIF.js","sources":["../../src/hooks/use-stream-goal.ts","../../src/views/streams/stream/stream-chat/use-stream-chat-timeline.ts","../../src/views/streams/components/stream-zap-button.tsx","../../src/views/streams/stream/stream-chat/stream-chat-form.tsx","../../src/views/streams/stream/stream-chat/chat-message.tsx","../../src/views/streams/stream/stream-chat/zap-message.tsx","../../src/views/streams/stream/stream-chat/chat-log.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { GOAL_KIND } from \"../helpers/nostr/goal\";\nimport { ParsedStream, getATag } from \"../helpers/nostr/stream\";\nimport { NostrEvent } from \"../types/nostr-event\";\nimport { useReadRelays } from \"./use-client-relays\";\nimport useSingleEvent from \"./use-single-event\";\nimport { subscribeMany } from \"../helpers/relay\";\nimport { Filter } from \"nostr-tools\";\n\nexport default function useStreamGoal(stream: ParsedStream) {\n  const [goal, setGoal] = useState<NostrEvent>();\n  const readRelays = useReadRelays(stream.relays);\n\n  const streamGoal = useSingleEvent(stream.goal);\n\n  useEffect(() => {\n    if (!stream.goal) {\n      const filter: Filter = { \"#a\": [getATag(stream)], kinds: [GOAL_KIND] };\n      const sub = subscribeMany(Array.from(readRelays), [filter], {\n        onevent: (event) => setGoal((c) => (!c || event.created_at > c.created_at ? event : c)),\n        oneose: () => sub.close(),\n      });\n    }\n  }, [stream.identifier, stream.goal, readRelays.urls.join(\"|\")]);\n\n  return streamGoal || goal;\n}\n","import { useCallback, useMemo } from \"react\";\nimport { Filter, kinds } from \"nostr-tools\";\n\nimport { getEventUID } from \"../../../../helpers/nostr/event\";\nimport { ParsedStream, STREAM_CHAT_MESSAGE_KIND, getATag } from \"../../../../helpers/nostr/stream\";\nimport useTimelineLoader from \"../../../../hooks/use-timeline-loader\";\nimport { NostrEvent } from \"../../../../types/nostr-event\";\nimport useStreamGoal from \"../../../../hooks/use-stream-goal\";\nimport useUserMuteFilter from \"../../../../hooks/use-user-mute-filter\";\nimport useClientSideMuteFilter from \"../../../../hooks/use-client-side-mute-filter\";\nimport { useReadRelays } from \"../../../../hooks/use-client-relays\";\nimport { useAdditionalRelayContext } from \"../../../../providers/local/additional-relay-context\";\n\nexport default function useStreamChatTimeline(stream: ParsedStream) {\n  const streamRelays = useReadRelays(useAdditionalRelayContext());\n\n  const hostMuteFilter = useUserMuteFilter(stream.host, [], { alwaysRequest: true });\n  const muteFilter = useClientSideMuteFilter();\n\n  const eventFilter = useCallback(\n    (event: NostrEvent) => {\n      if (stream.starts && event.created_at < stream.starts) return false;\n      if (stream.ends && event.created_at > stream.ends) return false;\n      return !(hostMuteFilter(event) || muteFilter(event));\n    },\n    [stream, hostMuteFilter, muteFilter],\n  );\n\n  const goal = useStreamGoal(stream);\n  const query = useMemo(() => {\n    const streamQuery: Filter = {\n      \"#a\": [getATag(stream)],\n      kinds: [STREAM_CHAT_MESSAGE_KIND, kinds.Zap],\n    };\n\n    if (goal) {\n      return [\n        streamQuery,\n        // also get zaps to goal\n        { \"#e\": [goal.id], kinds: [kinds.Zap] },\n      ];\n    }\n    return streamQuery;\n  }, [stream, goal]);\n\n  return useTimelineLoader(`${getEventUID(stream.event)}-chat`, streamRelays, query, { eventFilter });\n}\n","import { Button, IconButton, useDisclosure } from \"@chakra-ui/react\";\nimport { ParsedStream } from \"../../../helpers/nostr/stream\";\nimport { LightningIcon } from \"../../../components/icons\";\nimport useUserLNURLMetadata from \"../../../hooks/use-user-lnurl-metadata\";\nimport ZapModal from \"../../../components/event-zap-modal\";\nimport useStreamGoal from \"../../../hooks/use-stream-goal\";\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\nimport { useAdditionalRelayContext } from \"../../../providers/local/additional-relay-context\";\n\nexport default function StreamZapButton({\n  stream,\n  initComment,\n  onZap,\n  label,\n}: {\n  stream: ParsedStream;\n  initComment?: string;\n  onZap?: () => void;\n  label?: string;\n}) {\n  const zapModal = useDisclosure();\n  const zapMetadata = useUserLNURLMetadata(stream.host);\n  const relays = useReadRelays(useAdditionalRelayContext());\n  const goal = useStreamGoal(stream);\n\n  const commonProps = {\n    \"aria-label\": \"Zap stream\",\n    borderColor: \"yellow.400\",\n    variant: \"outline\",\n    onClick: zapModal.onOpen,\n    isDisabled: !zapMetadata.metadata?.allowsNostr,\n  };\n\n  // const zapEvent = goal || stream.event\n  const zapEvent = stream.event;\n\n  return (\n    <>\n      {label ? (\n        <Button leftIcon={<LightningIcon color=\"yellow.400\" />} {...commonProps}>\n          {label}\n        </Button>\n      ) : (\n        <IconButton icon={<LightningIcon color=\"yellow.400\" />} {...commonProps} />\n      )}\n\n      {zapModal.isOpen && (\n        <ZapModal\n          isOpen\n          event={zapEvent}\n          pubkey={stream.host}\n          onZapped={async () => {\n            if (onZap) onZap();\n            zapModal.onClose();\n          }}\n          onClose={zapModal.onClose}\n          initialComment={initComment}\n          additionalRelays={relays}\n          showEmbed\n          embedProps={{ goalProps: { showActions: false } }}\n        />\n      )}\n    </>\n  );\n}\n","import { useMemo, useRef } from \"react\";\nimport { Box, Button, Flex, useToast } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\n\nimport { ParsedStream, buildChatMessage } from \"../../../../helpers/nostr/stream\";\nimport { unique } from \"../../../../helpers/array\";\nimport { createEmojiTags, ensureNotifyContentMentions } from \"../../../../helpers/nostr/post\";\nimport { useContextEmojis } from \"../../../../providers/global/emoji-provider\";\nimport { MagicInput, RefType } from \"../../../../components/magic-textarea\";\nimport StreamZapButton from \"../../components/stream-zap-button\";\nimport { useUserInbox } from \"../../../../hooks/use-user-mailboxes\";\nimport { usePublishEvent } from \"../../../../providers/global/publish-provider\";\nimport { useReadRelays } from \"../../../../hooks/use-client-relays\";\nimport { useAdditionalRelayContext } from \"../../../../providers/local/additional-relay-context\";\nimport { useTextAreaUploadFileWithForm } from \"../../../../hooks/use-textarea-upload-file\";\n\nexport default function ChatMessageForm({ stream, hideZapButton }: { stream: ParsedStream; hideZapButton?: boolean }) {\n  const toast = useToast();\n  const publish = usePublishEvent();\n  const emojis = useContextEmojis();\n  const streamRelays = useReadRelays(useAdditionalRelayContext());\n  const hostReadRelays = useUserInbox(stream.host);\n\n  const relays = useMemo(() => unique([...streamRelays, ...(hostReadRelays ?? [])]), [hostReadRelays, streamRelays]);\n\n  const { setValue, handleSubmit, formState, reset, getValues, watch } = useForm({\n    defaultValues: { content: \"\" },\n  });\n  const sendMessage = handleSubmit(async (values) => {\n    let draft = buildChatMessage(stream, values.content);\n    draft = ensureNotifyContentMentions(draft);\n    draft = createEmojiTags(draft, emojis);\n    const pub = await publish(\"Send Chat\", draft, relays);\n    if (pub) reset();\n  });\n\n  const textAreaRef = useRef<RefType | null>(null);\n  const { onPaste } = useTextAreaUploadFileWithForm(textAreaRef, getValues, setValue);\n\n  watch(\"content\");\n\n  return (\n    <>\n      <Box borderRadius=\"md\" flexShrink={0} display=\"flex\" gap=\"2\" px=\"2\" pb=\"2\">\n        <Flex as=\"form\" onSubmit={sendMessage} gap=\"2\" flex={1}>\n          <MagicInput\n            instanceRef={(inst) => (textAreaRef.current = inst)}\n            placeholder=\"Message\"\n            autoComplete=\"off\"\n            isRequired\n            value={getValues().content}\n            onChange={(e) => setValue(\"content\", e.target.value, { shouldDirty: true })}\n            // @ts-expect-error\n            onPaste={onPaste}\n          />\n          <Button colorScheme=\"primary\" type=\"submit\" isLoading={formState.isSubmitting}>\n            Send\n          </Button>\n        </Flex>\n        {!hideZapButton && <StreamZapButton stream={stream} onZap={reset} initComment={getValues().content} />}\n      </Box>\n    </>\n  );\n}\n","import { memo } from \"react\";\nimport { Box, Text } from \"@chakra-ui/react\";\n\nimport { ParsedStream } from \"../../../../helpers/nostr/stream\";\nimport UserAvatar from \"../../../../components/user/user-avatar\";\nimport UserLink from \"../../../../components/user/user-link\";\nimport { NostrEvent } from \"../../../../types/nostr-event\";\nimport { TrustProvider } from \"../../../../providers/local/trust-provider\";\nimport ChatMessageContent from \"./chat-message-content\";\nimport NoteZapButton from \"../../../../components/note/note-zap-button\";\nimport useEventIntersectionRef from \"../../../../hooks/use-event-intersection-ref\";\n\nfunction ChatMessage({ event, stream }: { event: NostrEvent; stream: ParsedStream }) {\n  const ref = useEventIntersectionRef(event);\n\n  return (\n    <TrustProvider event={event}>\n      <Box>\n        <Box overflow=\"hidden\" maxH=\"lg\" ref={ref}>\n          <UserAvatar pubkey={event.pubkey} size=\"xs\" display=\"inline-block\" mr=\"2\" />\n          <Text as=\"span\" fontWeight=\"bold\" color={event.pubkey === stream.host ? \"rgb(248, 56, 217)\" : \"cyan.500\"}>\n            <UserLink pubkey={event.pubkey} />\n            {\": \"}\n          </Text>\n          <NoteZapButton\n            display=\"inline-block\"\n            event={event}\n            size=\"xs\"\n            variant=\"ghost\"\n            float=\"right\"\n            ml=\"2\"\n            allowComment={false}\n          />\n          <ChatMessageContent event={event} />\n        </Box>\n      </Box>\n    </TrustProvider>\n  );\n}\n\nconst ChatMessageMemo = memo(ChatMessage);\nexport default ChatMessageMemo;\n","import { memo, useMemo } from \"react\";\nimport { Box, Flex, Text } from \"@chakra-ui/react\";\n\nimport { ParsedStream } from \"../../../../helpers/nostr/stream\";\nimport UserAvatar from \"../../../../components/user/user-avatar\";\nimport UserLink from \"../../../../components/user/user-link\";\nimport { NostrEvent } from \"../../../../types/nostr-event\";\nimport { LightningIcon } from \"../../../../components/icons\";\nimport { getParsedZap } from \"../../../../helpers/nostr/zaps\";\nimport { readablizeSats } from \"../../../../helpers/bolt11\";\nimport { TrustProvider } from \"../../../../providers/local/trust-provider\";\nimport ChatMessageContent from \"./chat-message-content\";\nimport useClientSideMuteFilter from \"../../../../hooks/use-client-side-mute-filter\";\nimport useEventIntersectionRef from \"../../../../hooks/use-event-intersection-ref\";\n\nfunction ZapMessage({ zap, stream }: { zap: NostrEvent; stream: ParsedStream }) {\n  const ref = useEventIntersectionRef(zap);\n\n  const parsed = useMemo(() => getParsedZap(zap), [zap]);\n  const clientMuteFilter = useClientSideMuteFilter();\n\n  if (!parsed || !parsed.payment.amount) return null;\n  if (clientMuteFilter(parsed.event)) return null;\n\n  return (\n    <TrustProvider event={parsed.request}>\n      <Flex direction=\"column\" borderRadius=\"md\" borderColor=\"yellow.400\" borderWidth=\"1px\" p=\"2\" ref={ref}>\n        <Flex gap=\"2\">\n          <LightningIcon color=\"yellow.400\" />\n          <UserAvatar pubkey={parsed.request.pubkey} size=\"xs\" />\n          <UserLink pubkey={parsed.request.pubkey} fontWeight=\"bold\" color=\"yellow.400\" />\n          <Text>zapped {readablizeSats(parsed.payment.amount / 1000)} sats</Text>\n        </Flex>\n        <Box>\n          <ChatMessageContent event={parsed.request} />\n        </Box>\n      </Flex>\n    </TrustProvider>\n  );\n}\n\nconst ZapMessageMemo = memo(ZapMessage);\nexport default ZapMessageMemo;\n","import { forwardRef } from \"react\";\nimport { Flex, FlexProps } from \"@chakra-ui/react\";\nimport { css } from \"@emotion/react\";\nimport { kinds } from \"nostr-tools\";\n\nimport { ParsedStream } from \"../../../../helpers/nostr/stream\";\nimport useStreamChatTimeline from \"./use-stream-chat-timeline\";\nimport ChatMessage from \"./chat-message\";\nimport ZapMessage from \"./zap-message\";\n\nconst hideScrollbarCss = css`\n  scrollbar-width: 0;\n\n  ::-webkit-scrollbar {\n    width: 0;\n  }\n`;\n\nconst StreamChatLog = forwardRef<\n  HTMLDivElement,\n  Omit<FlexProps, \"children\"> & { stream: ParsedStream; hideScrollbar?: boolean }\n>(({ stream, hideScrollbar, ...props }, ref) => {\n  const { timeline: events } = useStreamChatTimeline(stream);\n\n  return (\n    <Flex\n      ref={ref}\n      overflowY=\"scroll\"\n      overflowX=\"hidden\"\n      direction=\"column-reverse\"\n      gap=\"2\"\n      css={hideScrollbar && hideScrollbarCss}\n      {...props}\n    >\n      {events.map((event) =>\n        event.kind === kinds.LiveChatMessage ? (\n          <ChatMessage key={event.id} event={event} stream={stream} />\n        ) : (\n          <ZapMessage key={event.id} zap={event} stream={stream} />\n        ),\n      )}\n    </Flex>\n  );\n});\n\nexport default StreamChatLog;\n"],"names":["useStreamGoal","stream","goal","setGoal","useState","readRelays","useReadRelays","streamGoal","useSingleEvent","useEffect","filter","getATag","GOAL_KIND","sub","subscribeMany","event","useStreamChatTimeline","streamRelays","useAdditionalRelayContext","hostMuteFilter","useUserMuteFilter","muteFilter","useClientSideMuteFilter","eventFilter","useCallback","query","useMemo","streamQuery","STREAM_CHAT_MESSAGE_KIND","kinds","useTimelineLoader","getEventUID","StreamZapButton","initComment","onZap","label","zapModal","useDisclosure","zapMetadata","useUserLNURLMetadata","relays","commonProps","_a","zapEvent","jsxs","Fragment","jsx","Button","LightningIcon","IconButton","ZapModal","ChatMessageForm","hideZapButton","useToast","publish","usePublishEvent","emojis","useContextEmojis","hostReadRelays","useUserInbox","unique","setValue","handleSubmit","formState","reset","getValues","watch","useForm","sendMessage","values","draft","buildChatMessage","ensureNotifyContentMentions","createEmojiTags","textAreaRef","useRef","onPaste","useTextAreaUploadFileWithForm","Box","Flex","MagicInput","inst","e","ChatMessage","ref","useEventIntersectionRef","TrustProvider","UserAvatar","Text","UserLink","NoteZapButton","ChatMessageContent","ChatMessageMemo","memo","ZapMessage","zap","parsed","getParsedZap","clientMuteFilter","readablizeSats","ZapMessageMemo","hideScrollbarCss","css","StreamChatLog","forwardRef","hideScrollbar","props","events"],"mappings":"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"}