{"version":3,"file":"community-create-modal-B8kIIGiT.js","sources":["../../src/views/communities/components/community-create-modal.tsx"],"sourcesContent":["import { useCallback, useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  FormControl,\n  FormErrorMessage,\n  FormHelperText,\n  FormLabel,\n  IconButton,\n  IconButtonProps,\n  Input,\n  Link,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalFooter,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  Text,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\n\nimport useCurrentAccount from \"../../../hooks/use-current-account\";\nimport UserAvatar from \"../../../components/user/user-avatar\";\nimport UserLink from \"../../../components/user/user-link\";\nimport { TrashIcon } from \"../../../components/icons\";\nimport Upload01 from \"../../../components/icons/upload-01\";\nimport { nostrBuildUploadImage } from \"../../../helpers/media-upload/nostr-build\";\nimport { useSigningContext } from \"../../../providers/global/signing-provider\";\nimport { RelayUrlInput } from \"../../../components/relay-url-input\";\nimport { RelayFavicon } from \"../../../components/relay-favicon\";\nimport UserAutocomplete from \"../../../components/user-autocomplete\";\nimport { normalizeToHexPubkey } from \"../../../helpers/nip19\";\nimport { safeUrl } from \"../../../helpers/parse\";\nimport { safeRelayUrl } from \"../../../helpers/relay\";\n\nfunction RemoveButton({ ...props }: IconButtonProps) {\n  return <IconButton icon={<TrashIcon />} size=\"sm\" colorScheme=\"red\" variant=\"ghost\" ml=\"auto\" {...props} />;\n}\n\nexport type FormValues = {\n  name: string;\n  banner: string;\n  description: string;\n  rules: string;\n  mods: string[];\n  relays: string[];\n  links: ([string] | [string, string])[];\n  // ranking: string;\n};\n\nexport default function CommunityCreateModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  defaultValues,\n  isUpdate,\n  ...props\n}: Omit<ModalProps, \"children\"> & {\n  onSubmit: SubmitHandler<FormValues>;\n  defaultValues?: FormValues;\n  isUpdate?: boolean;\n}) {\n  const toast = useToast();\n  const account = useCurrentAccount();\n  const { requestSignature } = useSigningContext();\n\n  const {\n    register,\n    formState: { errors, isSubmitting },\n    handleSubmit,\n    watch,\n    getValues,\n    setValue,\n  } = useForm<FormValues>({\n    mode: \"all\",\n    defaultValues: defaultValues || {\n      name: \"\",\n      banner: \"\",\n      description: \"\",\n      rules: \"\",\n      mods: account ? [account.pubkey] : [],\n      relays: [],\n      links: [],\n      // ranking: \"votes\",\n    },\n  });\n\n  watch(\"mods\");\n  // watch(\"ranking\");\n  watch(\"banner\");\n  watch(\"links\");\n  watch(\"relays\");\n\n  const [uploading, setUploading] = useState(false);\n  const uploadFile = useCallback(\n    async (file: File) => {\n      try {\n        if (!(file.type.includes(\"image\") || file.type.includes(\"video\") || file.type.includes(\"audio\")))\n          throw new Error(\"Unsupported file type\");\n\n        setUploading(true);\n\n        const response = await nostrBuildUploadImage(file, requestSignature);\n        const imageUrl = response.url;\n        setValue(\"banner\", imageUrl, { shouldDirty: true, shouldValidate: true });\n      } catch (e) {\n        if (e instanceof Error) toast({ description: e.message, status: \"error\" });\n      }\n      setUploading(false);\n    },\n    [setValue, getValues, requestSignature, toast],\n  );\n\n  const [modInput, setModInput] = useState(\"\");\n  const addMod = () => {\n    if (!modInput) return;\n    const pubkey = normalizeToHexPubkey(modInput);\n    if (pubkey) {\n      setValue(\"mods\", getValues(\"mods\").concat(pubkey));\n    }\n    setModInput(\"\");\n  };\n  const removeMod = (pubkey: string) => {\n    setValue(\n      \"mods\",\n      getValues(\"mods\").filter((p) => p !== pubkey),\n    );\n  };\n\n  const [relayInput, setRelayInput] = useState(\"\");\n  const addRelay = () => {\n    if (!relayInput) return;\n    const url = safeRelayUrl(relayInput);\n    if (url) {\n      setValue(\"relays\", getValues(\"relays\").concat(url));\n    }\n    setRelayInput(\"\");\n  };\n  const removeRelay = (url: string) => {\n    setValue(\n      \"relays\",\n      getValues(\"relays\").filter((r) => r !== url),\n    );\n  };\n\n  const [linkInput, setLinkInput] = useState(\"\");\n  const [linkName, setLinkName] = useState(\"\");\n  const addLink = () => {\n    if (!linkInput) return;\n    const url = safeUrl(linkInput);\n    if (url) {\n      setValue(\"links\", [...getValues(\"links\"), linkName ? [url, linkName] : [url]]);\n    }\n    setLinkInput(\"\");\n    setLinkName(\"\");\n  };\n  const removeLink = (url: string) => {\n    setValue(\n      \"links\",\n      getValues(\"links\").filter(([r]) => r !== url),\n    );\n  };\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size=\"2xl\" {...props}>\n      <ModalOverlay />\n      <ModalContent as=\"form\" onSubmit={handleSubmit(onSubmit)}>\n        <ModalHeader p=\"4\">{isUpdate ? \"Update Community\" : \"Create Community\"}</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody px=\"4\" py=\"0\" gap=\"4\" display=\"flex\" flexDirection=\"column\">\n          {!isUpdate && (\n            <FormControl isInvalid={!!errors.name}>\n              <FormLabel>Community Name</FormLabel>\n              <Input\n                type=\"text\"\n                {...register(\"name\", {\n                  required: true,\n                  validate: (v) => {\n                    if (/\\p{Z}/iu.test(v)) return \"Must not have spaces\";\n                    return true;\n                  },\n                })}\n                isReadOnly={isUpdate}\n                autoComplete=\"off\"\n                placeholder=\"more-cat-pictures\"\n              />\n              <FormHelperText>The name of your community (no-spaces)</FormHelperText>\n              {errors.name?.message && <FormErrorMessage>{errors.name?.message}</FormErrorMessage>}\n            </FormControl>\n          )}\n\n          <FormControl isInvalid={!!errors.description}>\n            <FormLabel>Description</FormLabel>\n            <Textarea {...register(\"description\")} autoComplete=\"off\" />\n            <FormHelperText>Short description about your community</FormHelperText>\n            {errors.description?.message && <FormErrorMessage>{errors.description?.message}</FormErrorMessage>}\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.banner}>\n            <FormLabel>Banner</FormLabel>\n            {getValues().banner && (\n              <Box\n                backgroundImage={getValues().banner}\n                backgroundRepeat=\"no-repeat\"\n                backgroundPosition=\"center\"\n                backgroundSize=\"cover\"\n                aspectRatio={3 / 1}\n                mb=\"2\"\n                borderRadius=\"lg\"\n              />\n            )}\n            <Flex gap=\"2\">\n              <Input\n                type=\"url\"\n                {...register(\"banner\")}\n                autoComplete=\"off\"\n                placeholder=\"https://example.com/banner.png\"\n              />\n              <Input\n                id=\"banner-upload\"\n                type=\"file\"\n                accept=\"image/*\"\n                display=\"none\"\n                onChange={(e) => {\n                  const img = e.target.files?.[0];\n                  if (img) uploadFile(img);\n                }}\n              />\n              <IconButton\n                as=\"label\"\n                htmlFor=\"banner-upload\"\n                icon={<Upload01 />}\n                aria-label=\"Upload Image\"\n                cursor=\"pointer\"\n                tabIndex={0}\n                isLoading={uploading}\n              />\n            </Flex>\n            {errors.banner?.message && <FormErrorMessage>{errors.banner?.message}</FormErrorMessage>}\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.rules}>\n            <FormLabel>Rules and Guidelines</FormLabel>\n            <Textarea {...register(\"rules\")} autoComplete=\"off\" placeholder=\"don't be a jerk\" />\n            <FormHelperText>Rules and posting guidelines</FormHelperText>\n            {errors.rules?.message && <FormErrorMessage>{errors.rules?.message}</FormErrorMessage>}\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.mods}>\n            <FormLabel>Moderators</FormLabel>\n            <Flex direction=\"column\" gap=\"2\" pb=\"2\">\n              {getValues().mods.map((pubkey) => (\n                <Flex gap=\"2\" alignItems=\"center\" key={pubkey}>\n                  <UserAvatar pubkey={pubkey} size=\"sm\" />\n                  <UserLink pubkey={pubkey} fontWeight=\"bold\" />\n                  <RemoveButton\n                    aria-label={`Remove moderator`}\n                    title={`Remove moderator`}\n                    onClick={() => removeMod(pubkey)}\n                  />\n                </Flex>\n              ))}\n            </Flex>\n            <Flex gap=\"2\">\n              <UserAutocomplete value={modInput} onChange={(e) => setModInput(e.target.value)} />\n              <Button isDisabled={!modInput} onClick={addMod}>\n                Add\n              </Button>\n            </Flex>\n          </FormControl>\n\n          {/* <FormControl isInvalid={!!errors.mods}>\n            <FormLabel>Default Raking</FormLabel>\n            <RadioGroup\n              value={getValues().ranking}\n              onChange={(e) => setValue(\"ranking\", e, { shouldDirty: true, shouldTouch: true })}\n            >\n              <Stack direction=\"row\">\n                <Radio value=\"votes\">Votes</Radio>\n                <Radio value=\"zaps\">Zaps</Radio>\n              </Stack>\n            </RadioGroup>\n            <FormHelperText>The default way posts are ranked when viewing the community</FormHelperText>\n            {errors.ranking?.message && <FormErrorMessage>{errors.ranking?.message}</FormErrorMessage>}\n          </FormControl> */}\n\n          <FormControl isInvalid={!!errors.mods}>\n            <FormLabel>Relays</FormLabel>\n            <FormHelperText>A Short list of recommended relays for the community</FormHelperText>\n            <Flex direction=\"column\" gap=\"2\" py=\"2\">\n              {getValues().relays.map((url) => (\n                <Flex key={url} alignItems=\"center\" gap=\"2\">\n                  <RelayFavicon relay={url} size=\"sm\" />\n                  <Text fontWeight=\"bold\" isTruncated>\n                    {url}\n                  </Text>\n                  <RemoveButton aria-label={`Remove ${url}`} title={`Remove ${url}`} onClick={() => removeRelay(url)} />\n                </Flex>\n              ))}\n            </Flex>\n            <Flex gap=\"2\">\n              <RelayUrlInput value={relayInput} onChange={(e) => setRelayInput(e.target.value)} />\n              <Button isDisabled={!relayInput} onClick={addRelay}>\n                Add\n              </Button>\n            </Flex>\n          </FormControl>\n\n          <FormControl isInvalid={!!errors.mods}>\n            <FormLabel>Links</FormLabel>\n            <FormHelperText>A few helpful resources for the community</FormHelperText>\n            <Flex direction=\"column\" mt=\"2\">\n              {getValues().links.map(([link, name]) => (\n                <Flex key={link}>\n                  <Link href={link}>{name || link}</Link>\n                  <RemoveButton aria-label=\"Remove Link\" title=\"Remove Link\" onClick={() => removeLink(link)} />\n                </Flex>\n              ))}\n            </Flex>\n            <Flex gap=\"2\">\n              <Input\n                type=\"url\"\n                placeholder=\"https://example.com/useful-resources.html\"\n                value={linkInput}\n                onChange={(e) => setLinkInput(e.target.value)}\n              />\n              <Input placeholder=\"title\" value={linkName} onChange={(e) => setLinkName(e.target.value)} />\n              <Button isDisabled={!linkInput} onClick={addLink} flexShrink={0}>\n                Add\n              </Button>\n            </Flex>\n          </FormControl>\n        </ModalBody>\n\n        <ModalFooter p=\"4\" display=\"flex\" gap=\"2\">\n          <Button onClick={onClose}>Cancel</Button>\n          <Button colorScheme=\"primary\" type=\"submit\" isLoading={isSubmitting}>\n            {isUpdate ? \"Update Community\" : \"Create Community\"}\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n"],"names":["RemoveButton","props","jsx","IconButton","TrashIcon","CommunityCreateModal","isOpen","onClose","onSubmit","defaultValues","isUpdate","toast","useToast","account","useCurrentAccount","requestSignature","useSigningContext","register","errors","isSubmitting","handleSubmit","watch","getValues","setValue","useForm","uploading","setUploading","useState","uploadFile","useCallback","file","imageUrl","nostrBuildUploadImage","e","modInput","setModInput","addMod","pubkey","normalizeToHexPubkey","removeMod","p","relayInput","setRelayInput","addRelay","url","safeRelayUrl","removeRelay","r","linkInput","setLinkInput","linkName","setLinkName","addLink","safeUrl","removeLink","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","jsxs","ModalBody","FormControl","FormLabel","Input","v","FormHelperText","_a","FormErrorMessage","_b","Textarea","_c","_d","Box","Flex","img","Upload01","_e","_f","_g","_h","UserAvatar","UserLink","UserAutocomplete","Button","RelayFavicon","Text","RelayUrlInput","link","name","Link","ModalFooter"],"mappings":"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"}