{"version":3,"file":"trending-neDTLMuh.js","sources":["../../src/hooks/use-events-reactions.ts","../../src/views/community/views/trending.tsx"],"sourcesContent":["import { useMemo, useState } from \"react\";\nimport eventReactionsService from \"../services/event-reactions\";\nimport { useReadRelays } from \"./use-client-relays\";\nimport { NostrEvent } from \"../types/nostr-event\";\nimport Subject from \"../classes/subject\";\nimport useSubjects from \"./use-subjects\";\n\nexport default function useEventsReactions(\n  eventIds: string[],\n  additionalRelays?: Iterable<string>,\n  alwaysRequest = true,\n) {\n  const readRelays = useReadRelays(additionalRelays);\n\n  // get subjects\n  const subjects = useMemo(() => {\n    const dir: Record<string, Subject<NostrEvent[]>> = {};\n    for (const eventId of eventIds) {\n      dir[eventId] = eventReactionsService.requestReactions(eventId, readRelays, alwaysRequest);\n    }\n    return dir;\n  }, [eventIds, readRelays.urls.join(\"|\"), alwaysRequest]);\n\n  // get values out of subjects\n  const reactions: Record<string, NostrEvent[]> = {};\n  for (const [id, subject] of Object.entries(subjects)) {\n    if (subject.value) reactions[id] = subject.value;\n  }\n\n  const [_, update] = useState(0);\n\n  // subscribe to subjects\n  useSubjects(Object.values(subjects));\n\n  return reactions;\n}\n","import { useMemo } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { useObservable } from \"applesauce-react\";\n\nimport {\n  COMMUNITY_APPROVAL_KIND,\n  buildApprovalMap,\n  getCommunityMods,\n  getCommunityRelays,\n} from \"../../../helpers/nostr/communities\";\nimport { useTimelineCurserIntersectionCallback } from \"../../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../../providers/local/intersection-observer\";\nimport TimelineActionAndStatus from \"../../../components/timeline/timeline-action-and-status\";\nimport useUserMuteFilter from \"../../../hooks/use-user-mute-filter\";\nimport useEventsReactions from \"../../../hooks/use-events-reactions\";\nimport { getEventReactionScore, groupReactions } from \"../../../helpers/nostr/reactions\";\nimport ApprovedEvent from \"../components/community-approved-post\";\nimport { RouterContext } from \"../community-home\";\n\nexport default function CommunityTrendingView() {\n  const { community, timeline } = useOutletContext<RouterContext>();\n  const muteFilter = useUserMuteFilter();\n  const mods = getCommunityMods(community);\n\n  const events = useObservable(timeline.timeline) ?? [];\n  const approvalMap = buildApprovalMap(events, mods);\n\n  const approved = events\n    .filter((e) => e.kind !== COMMUNITY_APPROVAL_KIND && approvalMap.has(e.id))\n    .map((event) => ({ event, approvals: approvalMap.get(event.id) }))\n    .filter((e) => !muteFilter(e.event));\n\n  // fetch votes for approved posts\n  const eventReactions = useEventsReactions(\n    approved.map((e) => e.event.id),\n    getCommunityRelays(community),\n  );\n  const eventVotes = useMemo(() => {\n    const dir: Record<string, number> = {};\n    for (const [id, reactions] of Object.entries(eventReactions)) {\n      const grouped = groupReactions(reactions);\n      const { vote } = getEventReactionScore(grouped);\n      dir[id] = vote;\n    }\n    return dir;\n  }, [eventReactions]);\n\n  const sorted = approved.sort((a, b) => (eventVotes[b.event.id] ?? 0) - (eventVotes[a.event.id] ?? 0));\n\n  const callback = useTimelineCurserIntersectionCallback(timeline);\n\n  return (\n    <>\n      <IntersectionObserverProvider callback={callback}>\n        {sorted.map(({ event, approvals }) => (\n          <ApprovedEvent key={event.id} event={event} approvals={approvals ?? []} />\n        ))}\n      </IntersectionObserverProvider>\n      <TimelineActionAndStatus timeline={timeline} />\n    </>\n  );\n}\n"],"names":["useEventsReactions","eventIds","additionalRelays","alwaysRequest","readRelays","useReadRelays","subjects","useMemo","dir","eventId","eventReactionsService","reactions","id","subject","useState","useSubjects","CommunityTrendingView","community","timeline","useOutletContext","muteFilter","useUserMuteFilter","mods","getCommunityMods","events","useObservable","approvalMap","buildApprovalMap","approved","COMMUNITY_APPROVAL_KIND","event","eventReactions","getCommunityRelays","eventVotes","grouped","groupReactions","vote","getEventReactionScore","sorted","a","b","callback","useTimelineCurserIntersectionCallback","jsxs","Fragment","jsx","IntersectionObserverProvider","approvals","ApprovedEvent","TimelineActionAndStatus"],"mappings":"6SAOA,SAAwBA,EACtBC,EACAC,EACAC,EAAgB,GAChB,CACM,MAAAC,EAAaC,EAAcH,CAAgB,EAG3CI,EAAWC,EAAAA,QAAQ,IAAM,CAC7B,MAAMC,EAA6C,CAAA,EACnD,UAAWC,KAAWR,EACpBO,EAAIC,CAAO,EAAIC,EAAsB,iBAAiBD,EAASL,EAAYD,CAAa,EAEnF,OAAAK,CAAA,EACN,CAACP,EAAUG,EAAW,KAAK,KAAK,GAAG,EAAGD,CAAa,CAAC,EAGjDQ,EAA0C,CAAA,EAChD,SAAW,CAACC,EAAIC,CAAO,IAAK,OAAO,QAAQP,CAAQ,EAC7CO,EAAQ,QAAiBF,EAAAC,CAAE,EAAIC,EAAQ,OAGzBC,OAAAA,EAAAA,SAAS,CAAC,EAGlBC,EAAA,OAAO,OAAOT,CAAQ,CAAC,EAE5BK,CACT,CChBA,SAAwBK,GAAwB,CAC9C,KAAM,CAAE,UAAAC,EAAW,SAAAC,CAAS,EAAIC,EAAgC,EAC1DC,EAAaC,IACbC,EAAOC,EAAiBN,CAAS,EAEjCO,EAASC,EAAcP,EAAS,QAAQ,GAAK,CAAA,EAC7CQ,EAAcC,EAAiBH,EAAQF,CAAI,EAE3CM,EAAWJ,EACd,OAAQ,GAAM,EAAE,OAASK,GAA2BH,EAAY,IAAI,EAAE,EAAE,CAAC,EACzE,IAAKI,IAAW,CAAE,MAAAA,EAAO,UAAWJ,EAAY,IAAII,EAAM,EAAE,CAAE,EAAE,EAChE,OAAQ,GAAM,CAACV,EAAW,EAAE,KAAK,CAAC,EAG/BW,EAAiB/B,EACrB4B,EAAS,IAAK,GAAM,EAAE,MAAM,EAAE,EAC9BI,EAAmBf,CAAS,CAAA,EAExBgB,EAAa1B,EAAAA,QAAQ,IAAM,CAC/B,MAAMC,EAA8B,CAAA,EACpC,SAAW,CAACI,EAAID,CAAS,IAAK,OAAO,QAAQoB,CAAc,EAAG,CACtD,MAAAG,EAAUC,EAAexB,CAAS,EAClC,CAAE,KAAAyB,CAAA,EAASC,EAAsBH,CAAO,EAC9C1B,EAAII,CAAE,EAAIwB,CACZ,CACO,OAAA5B,CAAA,EACN,CAACuB,CAAc,CAAC,EAEbO,EAASV,EAAS,KAAK,CAACW,EAAGC,KAAOP,EAAWO,EAAE,MAAM,EAAE,GAAK,IAAMP,EAAWM,EAAE,MAAM,EAAE,GAAK,EAAE,EAE9FE,EAAWC,EAAsCxB,CAAQ,EAE/D,OAEIyB,EAAA,KAAAC,WAAA,CAAA,SAAA,CAAAC,MAACC,GAA6B,SAAAL,EAC3B,SAAAH,EAAO,IAAI,CAAC,CAAE,MAAAR,EAAO,UAAAiB,CAAU,UAC7BC,EAA6B,CAAA,MAAAlB,EAAc,UAAWiB,GAAa,IAAhDjB,EAAM,EAA8C,CACzE,EACH,EACAe,MAACI,GAAwB,SAAA/B,EAAoB,CAC/C,CAAA,CAAA,CAEJ"}