{"version":3,"file":"create-DvaTMuP5.js","sources":["../../src/views/wiki/create.tsx"],"sourcesContent":["import { useEffect, useMemo } from \"react\";\nimport {\n  Alert,\n  AlertIcon,\n  Button,\n  Flex,\n  FormControl,\n  FormLabel,\n  Heading,\n  Input,\n  Spacer,\n  Textarea,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport { EventTemplate, nip19 } from \"nostr-tools\";\nimport dayjs from \"dayjs\";\n\nimport \"easymde/dist/easymde.min.css\";\n\nimport { WIKI_RELAYS } from \"../../const\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\nimport { removeNonASCIIChar } from \"../../helpers/string\";\nimport { usePublishEvent } from \"../../providers/global/publish-provider\";\nimport { WIKI_PAGE_KIND, getPageSummary, getPageTitle, getPageTopic } from \"../../helpers/nostr/wiki\";\nimport useCacheForm from \"../../hooks/use-cache-form\";\nimport MarkdownEditor from \"./components/markdown-editor\";\nimport useReplaceableEvent from \"../../hooks/use-replaceable-event\";\nimport { useReadRelays } from \"../../hooks/use-client-relays\";\nimport UserName from \"../../components/user/user-name\";\nimport { getEventCoordinate } from \"../../helpers/nostr/event\";\nimport FormatButton from \"./components/format-toolbar\";\nimport dictionaryService from \"../../services/dictionary\";\nimport relayHintService from \"../../services/event-relay-hint\";\n\nexport default function CreateWikiPageView() {\n  const toast = useToast();\n  const publish = usePublishEvent();\n  const navigate = useNavigate();\n  const [search] = useSearchParams();\n  const presetTopic = search.get(\"topic\");\n  const presetTitle = search.get(\"title\");\n  const forkAddress = useMemo(() => {\n    const addr = search.get(\"fork\");\n    if (addr) {\n      const decode = nip19.decode(addr);\n      if (decode.type === \"naddr\") return decode.data;\n    }\n  }, [search]);\n\n  const readRelays = useReadRelays();\n  const fork = useReplaceableEvent(forkAddress ?? undefined, readRelays);\n\n  const { register, setValue, getValues, handleSubmit, watch, formState, reset } = useForm({\n    defaultValues: { content: \"\", title: presetTitle || presetTopic || \"\", topic: presetTopic || \"\", summary: \"\" },\n    mode: \"all\",\n  });\n\n  // update form when fork is loaded\n  useEffect(() => {\n    if (!fork) return;\n\n    reset({\n      topic: getPageTopic(fork),\n      title: getPageTitle(fork) ?? \"\",\n      summary: getPageSummary(fork, false) ?? \"\",\n      content: fork.content,\n    });\n  }, [fork, reset]);\n\n  const cacheKey = forkAddress\n    ? \"wiki-\" + forkAddress.identifier + \":\" + forkAddress.pubkey + \"-fork\"\n    : presetTopic\n      ? \"wiki-\" + presetTopic\n      : \"wiki-create-page\";\n\n  const clearFormCache = useCacheForm(\n    cacheKey,\n    // @ts-expect-error\n    getValues,\n    reset,\n    formState,\n  );\n\n  watch(\"content\");\n  register(\"content\", {\n    minLength: 10,\n    required: true,\n  });\n\n  const submit = handleSubmit(async (values) => {\n    try {\n      const draft: EventTemplate = {\n        kind: WIKI_PAGE_KIND,\n        content: values.content,\n        tags: [\n          [\"d\", values.topic],\n          [\"title\", values.title],\n          [\"summary\", values.summary],\n          [\"published_at\", String(dayjs().unix())],\n        ],\n        created_at: dayjs().unix(),\n      };\n\n      if (fork) {\n        draft.tags.push([\"e\", fork.id, WIKI_RELAYS[0], \"fork\"]);\n        draft.tags.push([\"a\", getEventCoordinate(fork), WIKI_RELAYS[0], \"fork\"]);\n      }\n\n      const pub = await publish(\"Publish Page\", draft, WIKI_RELAYS, false);\n      dictionaryService.handleEvent(pub.event);\n      clearFormCache();\n      navigate(`/wiki/page/${relayHintService.getSharableEventAddress(pub.event)}`, { replace: true });\n    } catch (error) {\n      if (error instanceof Error) toast({ description: error.message, status: \"error\" });\n    }\n  });\n\n  return (\n    <VerticalPageLayout as=\"form\" h=\"full\" onSubmit={submit}>\n      <Heading>Create Page</Heading>\n      {fork && (\n        <Alert status=\"info\">\n          <AlertIcon />\n          Forking page from <UserName pubkey={fork.pubkey} ml=\"2\" />\n        </Alert>\n      )}\n      <Flex gap=\"2\" wrap={{ base: \"wrap\", md: \"nowrap\" }}>\n        <FormControl w={{ base: \"full\", md: \"sm\" }} isRequired flexShrink={0}>\n          <FormLabel>Topic</FormLabel>\n          <Input\n            placeholder=\"banana\"\n            isRequired\n            {...register(\"topic\", {\n              onBlur: () => {\n                const v = removeNonASCIIChar(getValues().topic);\n                setValue(\"topic\", v.replaceAll(\" \", \"_\").toLocaleLowerCase());\n                if (!getValues().title) setValue(\"title\", v, { shouldDirty: true });\n              },\n            })}\n          />\n        </FormControl>\n        <FormControl isRequired>\n          <FormLabel>Title</FormLabel>\n          <Input {...register(\"title\", { required: true })} autoComplete=\"off\" />\n        </FormControl>\n      </Flex>\n      <FormControl>\n        <FormLabel>Summary</FormLabel>\n        <Textarea {...register(\"summary\", { required: true })} isRequired />\n      </FormControl>\n      <Flex gap=\"2\">\n        <FormatButton\n          getValue={() => getValues().content}\n          setValue={(content) => setValue(\"content\", content, { shouldDirty: true })}\n        />\n        <Spacer />\n        <Button onClick={() => navigate(-1)}>Cancel</Button>\n        <Button colorScheme=\"primary\" type=\"submit\" isLoading={formState.isSubmitting}>\n          Publish\n        </Button>\n      </Flex>\n      <MarkdownEditor value={getValues().content} onChange={(v) => setValue(\"content\", v)} />\n    </VerticalPageLayout>\n  );\n}\n"],"names":["CreateWikiPageView","toast","useToast","publish","usePublishEvent","navigate","useNavigate","search","useSearchParams","presetTopic","presetTitle","forkAddress","useMemo","addr","decode","nip19","readRelays","useReadRelays","fork","useReplaceableEvent","register","setValue","getValues","handleSubmit","watch","formState","reset","useForm","useEffect","getPageTopic","getPageTitle","getPageSummary","cacheKey","clearFormCache","useCacheForm","submit","values","draft","WIKI_PAGE_KIND","dayjs","WIKI_RELAYS","getEventCoordinate","pub","dictionaryService","relayHintService","error","VerticalPageLayout","jsx","Heading","jsxs","Alert","AlertIcon","UserName","Flex","FormControl","FormLabel","Input","v","removeNonASCIIChar","Textarea","FormatButton","content","Spacer","Button","MarkdownEditor"],"mappings":"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"}