{"version":3,"file":"worker-sNnzL8Wv.js","sources":["../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/native.js","../../node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-browser/v4.js","../../node_modules/.pnpm/@snort+worker-relay@1.3.0/node_modules/@snort/worker-relay/src/interface.ts","../../src/services/wasm-relay/worker.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { EventMetadata, NostrEvent, OkResponse, ReqCommand, WorkerMessage, WorkerMessageCommand } from \"./types\";\nimport { v4 as uuid } from \"uuid\";\n\nexport interface InitAargs {\n  /**\n   * OPFS file path for the database\n   */\n  databasePath: string;\n\n  /**\n   * How many events to insert per batch\n   */\n  insertBatchSize?: number;\n}\n\nexport class WorkerRelayInterface {\n  #worker: Worker;\n  #commandQueue: Map<string, (v: unknown, ports: ReadonlyArray<MessagePort>) => void> = new Map();\n\n  // Command timeout\n  timeout: number = 30_000;\n\n  /**\n   * Interface wrapper for worker relay\n   * @param scriptPath Path to worker script or Worker script object\n   */\n  constructor(scriptPath?: string | URL | Worker) {\n    if (scriptPath instanceof Worker) {\n      this.#worker = scriptPath;\n    } else {\n      const sp = scriptPath ? scriptPath : new URL(\"@snort/worker-relay/dist/esm/worker.mjs\", import.meta.url);\n      this.#worker = new Worker(sp, { type: \"module\" });\n    }\n    this.#worker.onerror = e => {\n      console.error(e.message, e);\n    };\n    this.#worker.onmessageerror = e => {\n      console.error(e);\n    };\n    this.#worker.onmessage = e => {\n      const cmd = e.data as WorkerMessage<any>;\n      if (cmd.cmd === \"reply\") {\n        const q = this.#commandQueue.get(cmd.id);\n        q?.(cmd, e.ports);\n        this.#commandQueue.delete(cmd.id);\n      }\n    };\n  }\n\n  async init(args: InitAargs) {\n    return await this.#workerRpc<InitAargs, boolean>(\"init\", args);\n  }\n\n  async event(ev: NostrEvent) {\n    return await this.#workerRpc<NostrEvent, OkResponse>(\"event\", ev);\n  }\n\n  async query(req: ReqCommand) {\n    return await this.#workerRpc<ReqCommand, Array<NostrEvent>>(\"req\", req);\n  }\n\n  async count(req: ReqCommand) {\n    return await this.#workerRpc<ReqCommand, number>(\"count\", req);\n  }\n\n  async delete(req: ReqCommand) {\n    return await this.#workerRpc<ReqCommand, Array<string>>(\"delete\", req);\n  }\n\n  async summary() {\n    return await this.#workerRpc<void, Record<string, number>>(\"summary\");\n  }\n\n  async close(id: string) {\n    return await this.#workerRpc<string, boolean>(\"close\", id);\n  }\n\n  async dump() {\n    return await this.#workerRpc<void, Uint8Array>(\"dumpDb\");\n  }\n\n  async wipe() {\n    return await this.#workerRpc<void, boolean>(\"wipe\");\n  }\n\n  async forYouFeed(pubkey: string) {\n    return await this.#workerRpc<string, Array<NostrEvent>>(\"forYouFeed\", pubkey);\n  }\n\n  setEventMetadata(id: string, meta: EventMetadata) {\n    return this.#workerRpc<[string, EventMetadata], void>(\"setEventMetadata\", [id, meta]);\n  }\n\n  async debug(v: string) {\n    return await this.#workerRpc<string, boolean>(\"debug\", v);\n  }\n\n  async #workerRpc<T, R>(cmd: WorkerMessageCommand, args?: T) {\n    const id = uuid();\n    const msg = {\n      id,\n      cmd,\n      args,\n    } as WorkerMessage<T>;\n    return await new Promise<R>((resolve, reject) => {\n      this.#worker.postMessage(msg);\n      const t = setTimeout(() => {\n        this.#commandQueue.delete(id);\n        reject(new Error(\"Timeout\"));\n      }, this.timeout);\n      this.#commandQueue.set(id, (v, port) => {\n        clearTimeout(t);\n        const cmdReply = v as WorkerMessage<R & { error?: any }>;\n        if (cmdReply.args.error) {\n          reject(cmdReply.args.error);\n          return;\n        }\n        resolve(cmdReply.args);\n      });\n    });\n  }\n}\n","import { WorkerRelayInterface } from \"@snort/worker-relay\";\nimport WorkerVite from \"@snort/worker-relay/src/worker?worker\";\n\nconst workerScript = import.meta.env.DEV\n  ? new URL(\"@snort/worker-relay/dist/esm/worker.mjs\", import.meta.url)\n  : new WorkerVite();\n\nconst workerRelay = new WorkerRelayInterface(workerScript);\nawait workerRelay.init({ databasePath: \"nostrudel.db\", insertBatchSize: 100 });\n\nif (import.meta.env.DEV) {\n  // @ts-expect-error\n  window.workerRelay = workerRelay;\n}\n\nexport default workerRelay;\n"],"names":["getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","_worker","_commandQueue","_WorkerRelayInterface_instances","workerRpc_fn","WorkerRelayInterface","scriptPath","__privateAdd","__privateSet","sp","__privateGet","e","cmd","q","args","__privateMethod","ev","req","id","pubkey","meta","v","uuid","msg","resolve","reject","t","port","cmdReply","workerScript","WorkerVite","workerRelay"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}