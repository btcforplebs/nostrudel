{"version":3,"file":"torrent-Cgb6lBSF.js","sources":["../../src/views/torrents/components/torrent-comment-menu.tsx","../../src/views/torrents/components/torrents-comments.tsx","../../src/components/icons/message-text-circle-01.tsx","../../src/views/torrents/torrent.tsx"],"sourcesContent":["import { DotsMenuButton, MenuIconButtonProps } from \"../../../components/dots-menu-button\";\nimport OpenInAppMenuItem from \"../../../components/common-menu-items/open-in-app\";\nimport ShareLinkMenuItem from \"../../../components/common-menu-items/share-link\";\nimport CopyEmbedCodeMenuItem from \"../../../components/common-menu-items/copy-embed-code\";\nimport MuteUserMenuItem from \"../../../components/common-menu-items/mute-user\";\nimport DeleteEventMenuItem from \"../../../components/common-menu-items/delete-event\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport DebugEventMenuItem from \"../../../components/debug-modal/debug-event-menu-item\";\n\nexport default function TorrentCommentMenu({\n  comment,\n  ...props\n}: { comment: NostrEvent } & Omit<MenuIconButtonProps, \"children\">) {\n  return (\n    <>\n      <DotsMenuButton {...props}>\n        <OpenInAppMenuItem event={comment} />\n        <ShareLinkMenuItem event={comment} />\n        <CopyEmbedCodeMenuItem event={comment} />\n        <MuteUserMenuItem event={comment} />\n        <DeleteEventMenuItem event={comment} />\n        <DebugEventMenuItem event={comment} />\n      </DotsMenuButton>\n    </>\n  );\n}\n","import { memo, useState } from \"react\";\nimport {\n  Alert,\n  AlertIcon,\n  Button,\n  ButtonGroup,\n  Flex,\n  IconButton,\n  Spacer,\n  useBreakpointValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport { ThreadItem, ThreadQuery } from \"applesauce-core/queries\";\n\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport { TORRENT_COMMENT_KIND } from \"../../../helpers/nostr/torrents\";\nimport { useReadRelays } from \"../../../hooks/use-client-relays\";\nimport useThreadTimelineLoader from \"../../../hooks/use-thread-timeline-loader\";\nimport { countReplies, repliesByDate } from \"../../../helpers/thread\";\nimport { useTimelineCurserIntersectionCallback } from \"../../../hooks/use-timeline-cursor-intersection-callback\";\nimport IntersectionObserverProvider from \"../../../providers/local/intersection-observer\";\nimport useAppSettings from \"../../../hooks/use-app-settings\";\nimport useClientSideMuteFilter from \"../../../hooks/use-client-side-mute-filter\";\nimport UserAvatarLink from \"../../../components/user/user-avatar-link\";\nimport UserLink from \"../../../components/user/user-link\";\nimport UserDnsIdentity from \"../../../components/user/user-dns-identity\";\nimport Timestamp from \"../../../components/timestamp\";\nimport Minus from \"../../../components/icons/minus\";\nimport Expand01 from \"../../../components/icons/expand-01\";\nimport { TrustProvider } from \"../../../providers/local/trust-provider\";\nimport { ReplyIcon } from \"../../../components/icons\";\nimport ReplyForm from \"../../thread/components/reply-form\";\nimport useThreadColorLevelProps from \"../../../hooks/use-thread-color-level-props\";\nimport TorrentCommentMenu from \"./torrent-comment-menu\";\nimport NoteReactions from \"../../../components/note/timeline-note/components/note-reactions\";\nimport NoteZapButton from \"../../../components/note/note-zap-button\";\nimport { TextNoteContents } from \"../../../components/note/timeline-note/text-note-contents\";\nimport useEventIntersectionRef from \"../../../hooks/use-event-intersection-ref\";\nimport { useStoreQuery } from \"../../../hooks/use-store-query\";\nimport { sortByDate } from \"../../../helpers/nostr/event\";\n\nexport const ThreadPost = memo(({ post, level = -1 }: { post: ThreadItem; level?: number }) => {\n  const { showReactions } = useAppSettings();\n  const expanded = useDisclosure({ defaultIsOpen: level < 2 || post.replies.size <= 1 });\n  const replyForm = useDisclosure();\n\n  const muteFilter = useClientSideMuteFilter();\n\n  const replies = Array.from(post.replies).filter((r) => !muteFilter(r.event));\n  const numberOfReplies = countReplies(replies);\n  const isMuted = muteFilter(post.event);\n\n  const [alwaysShow, setAlwaysShow] = useState(false);\n  const muteAlert = (\n    <Alert status=\"warning\">\n      <AlertIcon />\n      Muted user or note\n      <Button size=\"xs\" ml=\"auto\" onClick={() => setAlwaysShow(true)}>\n        Show anyway\n      </Button>\n    </Alert>\n  );\n\n  if (isMuted && replies.length === 0) return null;\n\n  const header = (\n    <Flex gap=\"2\" alignItems=\"center\">\n      <UserAvatarLink pubkey={post.event.pubkey} size=\"sm\" />\n      <UserLink pubkey={post.event.pubkey} fontWeight=\"bold\" isTruncated />\n      <UserDnsIdentity pubkey={post.event.pubkey} onlyIcon />\n      <Timestamp timestamp={post.event.created_at} />\n      {replies.length > 0 ? (\n        <Button variant=\"ghost\" onClick={expanded.onToggle} rightIcon={expanded.isOpen ? <Minus /> : <Expand01 />}>\n          ({numberOfReplies})\n        </Button>\n      ) : (\n        <IconButton\n          variant=\"ghost\"\n          onClick={expanded.onToggle}\n          icon={expanded.isOpen ? <Minus /> : <Expand01 />}\n          aria-label={expanded.isOpen ? \"Collapse\" : \"Expand\"}\n          title={expanded.isOpen ? \"Collapse\" : \"Expand\"}\n        />\n      )}\n    </Flex>\n  );\n\n  const renderContent = () => {\n    return isMuted && !alwaysShow ? (\n      muteAlert\n    ) : (\n      <>\n        <TrustProvider event={post.event}>\n          <TextNoteContents event={post.event} pl=\"2\" />\n        </TrustProvider>\n      </>\n    );\n  };\n\n  const showReactionsOnNewLine = useBreakpointValue({ base: true, lg: false });\n  const reactionButtons = showReactions && (\n    <NoteReactions event={post.event} flexWrap=\"wrap\" variant=\"ghost\" size=\"sm\" />\n  );\n  const footer = (\n    <Flex gap=\"2\" alignItems=\"center\">\n      <ButtonGroup variant=\"ghost\" size=\"sm\">\n        <IconButton aria-label=\"Reply\" title=\"Reply\" onClick={replyForm.onToggle} icon={<ReplyIcon />} />\n        <NoteZapButton event={post.event} />\n      </ButtonGroup>\n      {!showReactionsOnNewLine && reactionButtons}\n      <Spacer />\n      <ButtonGroup size=\"sm\" variant=\"ghost\">\n        <TorrentCommentMenu comment={post.event} aria-label=\"More Options\" />\n      </ButtonGroup>\n    </Flex>\n  );\n\n  const colorProps = useThreadColorLevelProps(level);\n\n  const ref = useEventIntersectionRef(post.event);\n\n  return (\n    <>\n      <Flex\n        direction=\"column\"\n        gap=\"2\"\n        p=\"2\"\n        borderRadius=\"md\"\n        borderWidth=\".1rem .1rem .1rem .35rem\"\n        {...colorProps}\n        ref={ref}\n      >\n        {header}\n        {expanded.isOpen && renderContent()}\n        {expanded.isOpen && showReactionsOnNewLine && reactionButtons}\n        {expanded.isOpen && footer}\n      </Flex>\n      {replyForm.isOpen && (\n        <ReplyForm\n          item={post}\n          onCancel={replyForm.onClose}\n          onSubmitted={replyForm.onClose}\n          replyKind={TORRENT_COMMENT_KIND}\n        />\n      )}\n      {post.replies.size > 0 && expanded.isOpen && (\n        <Flex direction=\"column\" gap=\"2\" pl={{ base: 2, md: 4 }}>\n          {repliesByDate(post).map((child) => (\n            <ThreadPost key={child.event.id} post={child} level={level + 1} />\n          ))}\n        </Flex>\n      )}\n    </>\n  );\n});\n\nexport default function TorrentComments({ torrent }: { torrent: NostrEvent }) {\n  const readRelays = useReadRelays();\n  const { timeline } = useThreadTimelineLoader(torrent, readRelays, [TORRENT_COMMENT_KIND]);\n\n  const thread = useStoreQuery(ThreadQuery, [torrent.id]);\n\n  const callback = useTimelineCurserIntersectionCallback(timeline);\n\n  return (\n    <IntersectionObserverProvider callback={callback}>\n      {thread?.root &&\n        repliesByDate(thread.root).map((item) => <ThreadPost key={item.event.id} post={item} level={0} />)}\n    </IntersectionObserverProvider>\n  );\n}\n","import { createIcon } from \"@chakra-ui/icons\";\n\nconst MessageTextCircle01 = createIcon({\n  displayName: \"MessageTextCircle01\",\n  viewBox: \"0 0 24 24\",\n  path: [\n    <path\n      d=\"M7.99962 9.5H11.9996M7.99962 13H14.9996M12.4996 20C17.194 20 20.9996 16.1944 20.9996 11.5C20.9996 6.80558 17.194 3 12.4996 3C7.8052 3 3.99962 6.80558 3.99962 11.5C3.99962 12.45 4.15547 13.3636 4.443 14.2166C4.55119 14.5376 4.60529 14.6981 4.61505 14.8214C4.62469 14.9432 4.6174 15.0286 4.58728 15.1469C4.55677 15.2668 4.48942 15.3915 4.35472 15.6408L2.71906 18.6684C2.48575 19.1002 2.36909 19.3161 2.3952 19.4828C2.41794 19.6279 2.50337 19.7557 2.6288 19.8322C2.7728 19.9201 3.01692 19.8948 3.50517 19.8444L8.62619 19.315C8.78127 19.299 8.85881 19.291 8.92949 19.2937C8.999 19.2963 9.04807 19.3029 9.11586 19.3185C9.18478 19.3344 9.27145 19.3678 9.44478 19.4345C10.3928 19.7998 11.4228 20 12.4996 20Z\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    ></path>,\n  ],\n  defaultProps: { boxSize: 4 },\n});\n\nexport default MessageTextCircle01;\n","import { useMemo } from \"react\";\nimport {\n  Button,\n  ButtonGroup,\n  Card,\n  Flex,\n  Heading,\n  Link,\n  Spinner,\n  Table,\n  TableContainer,\n  Tag,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n\nimport useSingleEvent from \"../../hooks/use-single-event\";\nimport VerticalPageLayout from \"../../components/vertical-page-layout\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport { ErrorBoundary } from \"../../components/error-boundary\";\nimport UserAvatarLink from \"../../components/user/user-avatar-link\";\nimport UserLink from \"../../components/user/user-link\";\nimport {\n  TORRENT_COMMENT_KIND,\n  getTorrentFiles,\n  getTorrentMagnetLink,\n  getTorrentSize,\n  getTorrentTitle,\n} from \"../../helpers/nostr/torrents\";\nimport Magnet from \"../../components/icons/magnet\";\nimport { formatBytes } from \"../../helpers/number\";\nimport Timestamp from \"../../components/timestamp\";\nimport TorrentMenu from \"./components/torrent-menu\";\nimport TorrentComments from \"./components/torrents-comments\";\nimport ReplyForm from \"../thread/components/reply-form\";\nimport { getThreadReferences } from \"../../helpers/nostr/event\";\nimport MessageTextCircle01 from \"../../components/icons/message-text-circle-01\";\nimport useParamsEventPointer from \"../../hooks/use-params-event-pointer\";\nimport NoteZapButton from \"../../components/note/note-zap-button\";\nimport QuoteEventButton from \"../../components/note/quote-event-button\";\nimport { TextNoteContents } from \"../../components/note/timeline-note/text-note-contents\";\n\nfunction TorrentDetailsPage({ torrent }: { torrent: NostrEvent }) {\n  const files = getTorrentFiles(torrent);\n  const replyForm = useDisclosure();\n\n  return (\n    <VerticalPageLayout>\n      <Flex gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n        <Flex as={Heading} size=\"md\" gap=\"2\" alignItems=\"center\" wrap=\"wrap\">\n          <UserAvatarLink pubkey={torrent.pubkey} size=\"md\" />\n          <UserLink pubkey={torrent.pubkey} fontWeight=\"bold\" />\n          <Text> - </Text>\n          <Text>{getTorrentTitle(torrent)}</Text>\n        </Flex>\n        <TorrentMenu torrent={torrent} ml=\"auto\" aria-label=\"More Options\" />\n      </Flex>\n      <Card p=\"2\" display=\"flex\" gap=\"2\" flexDirection=\"column\" alignItems=\"flex-start\">\n        <Text>Size: {formatBytes(getTorrentSize(torrent))}</Text>\n        <Text>\n          Uploaded: <Timestamp timestamp={torrent.created_at} />\n        </Text>\n        <Flex gap=\"2\">\n          <Text>Tags:</Text>\n          {torrent.tags\n            .filter((t) => t[0] === \"t\")\n            .map(([_, tag]) => (\n              <Tag key={tag}>{tag}</Tag>\n            ))}\n        </Flex>\n        <ButtonGroup variant=\"ghost\" size=\"sm\">\n          <NoteZapButton event={torrent} />\n          <QuoteEventButton event={torrent} />\n          <Button as={Link} leftIcon={<Magnet boxSize={5} />} href={getTorrentMagnetLink(torrent)} isExternal>\n            Download torrent\n          </Button>\n        </ButtonGroup>\n      </Card>\n      {torrent.content.length > 0 && (\n        <>\n          <Heading size=\"md\" mt=\"2\">\n            Description\n          </Heading>\n          <Card p=\"2\">\n            <TextNoteContents event={torrent} />\n          </Card>\n        </>\n      )}\n      <Heading size=\"md\" mt=\"2\">\n        Files\n      </Heading>\n      <Card p=\"2\">\n        <TableContainer>\n          <Table size=\"sm\">\n            <Thead>\n              <Tr>\n                <Th>Filename</Th>\n                <Th>Size</Th>\n              </Tr>\n            </Thead>\n            <Tbody>\n              {files.map((file) => (\n                <Tr key={file.name}>\n                  <Td>{file.name}</Td>\n                  <Td>{formatBytes(file.size ?? 0)}</Td>\n                </Tr>\n              ))}\n            </Tbody>\n          </Table>\n        </TableContainer>\n      </Card>\n\n      <Flex gap=\"2\">\n        <Heading size=\"md\" mt=\"2\">\n          Comments\n        </Heading>\n        {!replyForm.isOpen && (\n          <Button leftIcon={<MessageTextCircle01 />} size=\"sm\" ml=\"auto\" onClick={replyForm.onOpen}>\n            New Comment\n          </Button>\n        )}\n      </Flex>\n      {replyForm.isOpen && (\n        <ReplyForm\n          item={{ event: torrent, refs: getThreadReferences(torrent), replies: new Set() }}\n          onCancel={replyForm.onClose}\n          onSubmitted={replyForm.onClose}\n          replyKind={TORRENT_COMMENT_KIND}\n        />\n      )}\n      <TorrentComments torrent={torrent} />\n    </VerticalPageLayout>\n  );\n}\n\nexport default function TorrentDetailsView() {\n  const pointer = useParamsEventPointer(\"id\");\n  const torrent = useSingleEvent(pointer?.id, pointer?.relays ?? []);\n\n  if (!torrent) return <Spinner />;\n\n  return (\n    <ErrorBoundary>\n      <TorrentDetailsPage torrent={torrent} />\n    </ErrorBoundary>\n  );\n}\n"],"names":["TorrentCommentMenu","comment","props","jsx","Fragment","jsxs","DotsMenuButton","OpenInAppMenuItem","ShareLinkMenuItem","CopyEmbedCodeMenuItem","MuteUserMenuItem","DeleteEventMenuItem","DebugEventMenuItem","ThreadPost","memo","post","level","showReactions","useAppSettings","expanded","useDisclosure","replyForm","muteFilter","useClientSideMuteFilter","replies","r","numberOfReplies","countReplies","isMuted","alwaysShow","setAlwaysShow","useState","muteAlert","Alert","AlertIcon","Button","header","Flex","UserAvatarLink","UserLink","UserDnsIdentity","Timestamp","Minus","Expand01","IconButton","renderContent","TrustProvider","TextNoteContents","showReactionsOnNewLine","useBreakpointValue","reactionButtons","NoteReactions","footer","ButtonGroup","ReplyIcon","NoteZapButton","Spacer","colorProps","useThreadColorLevelProps","ref","useEventIntersectionRef","ReplyForm","TORRENT_COMMENT_KIND","repliesByDate","child","TorrentComments","torrent","readRelays","useReadRelays","timeline","useThreadTimelineLoader","thread","useStoreQuery","ThreadQuery","callback","useTimelineCurserIntersectionCallback","IntersectionObserverProvider","item","MessageTextCircle01","createIcon","TorrentDetailsPage","files","getTorrentFiles","VerticalPageLayout","Heading","Text","getTorrentTitle","TorrentMenu","Card","formatBytes","getTorrentSize","t","_","tag","Tag","QuoteEventButton","Link","Magnet","getTorrentMagnetLink","TableContainer","Table","Thead","Tr","Th","Tbody","file","Td","getThreadReferences","TorrentDetailsView","pointer","useParamsEventPointer","useSingleEvent","ErrorBoundary","Spinner"],"mappings":"2qBASA,SAAwBA,GAAmB,CACzC,QAAAC,EACA,GAAGC,CACL,EAAoE,CAClE,OAEIC,EAAA,IAAAC,EAAA,SAAA,CAAA,SAAAC,EAAA,KAACC,EAAgB,CAAA,GAAGJ,EAClB,SAAA,CAACC,EAAAA,IAAAI,EAAA,CAAkB,MAAON,CAAS,CAAA,EACnCE,EAAAA,IAACK,EAAkB,CAAA,MAAOP,CAAS,CAAA,EACnCE,EAAAA,IAACM,EAAsB,CAAA,MAAOR,CAAS,CAAA,EACvCE,EAAAA,IAACO,EAAiB,CAAA,MAAOT,CAAS,CAAA,EAClCE,EAAAA,IAACQ,EAAoB,CAAA,MAAOV,CAAS,CAAA,EACrCE,EAAAA,IAACS,EAAmB,CAAA,MAAOX,CAAS,CAAA,CAAA,CACtC,CAAA,CACF,CAAA,CAEJ,CCgBO,MAAMY,EAAaC,EAAK,KAAA,CAAC,CAAE,KAAAC,EAAM,MAAAC,EAAQ,MAA+C,CACvF,KAAA,CAAE,cAAAC,GAAkBC,IACpBC,EAAWC,EAAc,CAAE,cAAeJ,EAAQ,GAAKD,EAAK,QAAQ,MAAQ,CAAG,CAAA,EAC/EM,EAAYD,IAEZE,EAAaC,IAEbC,EAAU,MAAM,KAAKT,EAAK,OAAO,EAAE,OAAQU,GAAM,CAACH,EAAWG,EAAE,KAAK,CAAC,EACrEC,EAAkBC,GAAaH,CAAO,EACtCI,EAAUN,EAAWP,EAAK,KAAK,EAE/B,CAACc,EAAYC,CAAa,EAAIC,WAAS,EAAK,EAC5CC,EACJ3B,EAAAA,KAAC4B,GAAM,CAAA,OAAO,UACZ,SAAA,CAAA9B,EAAA,IAAC+B,GAAU,EAAA,EAAE,qBAEb/B,EAAAA,IAACgC,EAAO,CAAA,KAAK,KAAK,GAAG,OAAO,QAAS,IAAML,EAAc,EAAI,EAAG,SAEhE,aAAA,CAAA,CACF,CAAA,CAAA,EAGF,GAAIF,GAAWJ,EAAQ,SAAW,EAAU,OAAA,KAE5C,MAAMY,EACH/B,EAAA,KAAAgC,EAAA,CAAK,IAAI,IAAI,WAAW,SACvB,SAAA,CAAAlC,MAACmC,GAAe,OAAQvB,EAAK,MAAM,OAAQ,KAAK,KAAK,EACrDZ,EAAAA,IAACoC,GAAS,OAAQxB,EAAK,MAAM,OAAQ,WAAW,OAAO,YAAW,EAAC,CAAA,QAClEyB,GAAgB,CAAA,OAAQzB,EAAK,MAAM,OAAQ,SAAQ,GAAC,EACpDZ,EAAA,IAAAsC,EAAA,CAAU,UAAW1B,EAAK,MAAM,WAAY,EAC5CS,EAAQ,OAAS,SACfW,EAAO,CAAA,QAAQ,QAAQ,QAAShB,EAAS,SAAU,UAAWA,EAAS,OAAShB,EAAA,IAACuC,IAAM,EAAKvC,EAAAA,IAACwC,IAAS,EAAI,SAAA,CAAA,IACvGjB,EAAgB,GAAA,CAAA,CACpB,EAEAvB,EAAA,IAACyC,EAAA,CACC,QAAQ,QACR,QAASzB,EAAS,SAClB,KAAMA,EAAS,aAAUuB,EAAM,CAAA,CAAA,QAAMC,EAAS,EAAA,EAC9C,aAAYxB,EAAS,OAAS,WAAa,SAC3C,MAAOA,EAAS,OAAS,WAAa,QAAA,CACxC,CAEJ,CAAA,CAAA,EAGI0B,EAAgB,IACbjB,GAAW,CAACC,EACjBG,EAGE7B,EAAAA,IAAAC,EAAAA,SAAA,CAAA,SAAAD,EAAA,IAAC2C,IAAc,MAAO/B,EAAK,MACzB,SAAAZ,EAAA,IAAC4C,GAAiB,MAAOhC,EAAK,MAAO,GAAG,GAAA,CAAI,CAC9C,CAAA,CACF,CAAA,EAIEiC,EAAyBC,GAAmB,CAAE,KAAM,GAAM,GAAI,GAAO,EACrEC,EAAkBjC,GACrBd,EAAAA,IAAAgD,GAAA,CAAc,MAAOpC,EAAK,MAAO,SAAS,OAAO,QAAQ,QAAQ,KAAK,IAAK,CAAA,EAExEqC,EACH/C,EAAA,KAAAgC,EAAA,CAAK,IAAI,IAAI,WAAW,SACvB,SAAA,CAAAhC,EAAA,KAACgD,EAAY,CAAA,QAAQ,QAAQ,KAAK,KAChC,SAAA,CAAClD,EAAA,IAAAyC,EAAA,CAAW,aAAW,QAAQ,MAAM,QAAQ,QAASvB,EAAU,SAAU,KAAOlB,EAAAA,IAAAmD,GAAA,CAAA,CAAU,CAAI,CAAA,EAC9FnD,EAAAA,IAAAoD,EAAA,CAAc,MAAOxC,EAAK,KAAO,CAAA,CAAA,EACpC,EACC,CAACiC,GAA0BE,QAC3BM,GAAO,EAAA,EACPrD,EAAA,IAAAkD,EAAA,CAAY,KAAK,KAAK,QAAQ,QAC7B,SAAClD,EAAAA,IAAAH,GAAA,CAAmB,QAASe,EAAK,MAAO,aAAW,cAAe,CAAA,EACrE,CACF,CAAA,CAAA,EAGI0C,EAAaC,GAAyB1C,CAAK,EAE3C2C,EAAMC,GAAwB7C,EAAK,KAAK,EAE9C,OAEIV,EAAA,KAAAD,WAAA,CAAA,SAAA,CAAAC,EAAA,KAACgC,EAAA,CACC,UAAU,SACV,IAAI,IACJ,EAAE,IACF,aAAa,KACb,YAAY,2BACX,GAAGoB,EACJ,IAAAE,EAEC,SAAA,CAAAvB,EACAjB,EAAS,QAAU0B,EAAc,EACjC1B,EAAS,QAAU6B,GAA0BE,EAC7C/B,EAAS,QAAUiC,CAAA,CAAA,CACtB,EACC/B,EAAU,QACTlB,EAAA,IAAC0D,EAAA,CACC,KAAM9C,EACN,SAAUM,EAAU,QACpB,YAAaA,EAAU,QACvB,UAAWyC,CAAA,CACb,EAED/C,EAAK,QAAQ,KAAO,GAAKI,EAAS,QAChChB,EAAA,IAAAkC,EAAA,CAAK,UAAU,SAAS,IAAI,IAAI,GAAI,CAAE,KAAM,EAAG,GAAI,CAAA,EACjD,SAAA0B,EAAchD,CAAI,EAAE,IAAKiD,SACvBnD,EAAgC,CAAA,KAAMmD,EAAO,MAAOhD,EAAQ,CAA5C,EAAAgD,EAAM,MAAM,EAAmC,CACjE,EACH,CAEJ,CAAA,CAAA,CAEJ,CAAC,EAEuB,SAAAC,GAAgB,CAAE,QAAAC,GAAoC,CAC5E,MAAMC,EAAaC,KACb,CAAE,SAAAC,GAAaC,GAAwBJ,EAASC,EAAY,CAACL,CAAoB,CAAC,EAElFS,EAASC,GAAcC,GAAa,CAACP,EAAQ,EAAE,CAAC,EAEhDQ,EAAWC,GAAsCN,CAAQ,EAG7D,OAAAlE,MAACyE,IAA6B,SAAAF,EAC3B,UAAAH,GAAA,YAAAA,EAAQ,OACPR,EAAcQ,EAAO,IAAI,EAAE,IAAKM,GAAU1E,EAAAA,IAAAU,EAAA,CAA+B,KAAMgE,EAAM,MAAO,GAAlCA,EAAK,MAAM,EAA0B,CAAE,CACrG,CAAA,CAEJ,CCxKA,MAAMC,GAAsBC,GAAW,CACrC,YAAa,sBACb,QAAS,YACT,KAAM,CACJ5E,EAAA,IAAC,OAAA,CACC,EAAE,+rBACF,OAAO,eACP,YAAY,IACZ,cAAc,QACd,eAAe,QACf,KAAK,MAAA,CACN,CACH,EACA,aAAc,CAAE,QAAS,CAAE,CAC7B,CAAC,EC+BD,SAAS6E,GAAmB,CAAE,QAAAd,GAAoC,CAC1D,MAAAe,EAAQC,GAAgBhB,CAAO,EAC/B7C,EAAYD,IAElB,cACG+D,GACC,CAAA,SAAA,CAAA9E,OAACgC,GAAK,IAAI,IAAI,WAAW,SAAS,KAAK,OACrC,SAAA,CAAChC,EAAAA,KAAAgC,EAAA,CAAK,GAAI+C,EAAS,KAAK,KAAK,IAAI,IAAI,WAAW,SAAS,KAAK,OAC5D,SAAA,CAAAjF,EAAA,IAACmC,EAAe,CAAA,OAAQ4B,EAAQ,OAAQ,KAAK,KAAK,QACjD3B,EAAS,CAAA,OAAQ2B,EAAQ,OAAQ,WAAW,OAAO,EACpD/D,EAAAA,IAACkF,GAAK,SAAG,KAAA,CAAA,EACRlF,EAAA,IAAAkF,EAAA,CAAM,SAAgBC,GAAApB,CAAO,CAAE,CAAA,CAAA,EAClC,QACCqB,GAAY,CAAA,QAAArB,EAAkB,GAAG,OAAO,aAAW,eAAe,CAAA,EACrE,EACA7D,EAAAA,KAACmF,EAAK,CAAA,EAAE,IAAI,QAAQ,OAAO,IAAI,IAAI,cAAc,SAAS,WAAW,aACnE,SAAA,CAAAnF,OAACgF,EAAK,CAAA,SAAA,CAAA,SAAOI,EAAYC,GAAexB,CAAO,CAAC,CAAA,EAAE,SACjDmB,EAAK,CAAA,SAAA,CAAA,aACOlF,EAAAA,IAAAsC,EAAA,CAAU,UAAWyB,EAAQ,UAAY,CAAA,CAAA,EACtD,EACA7D,EAAAA,KAACgC,EAAK,CAAA,IAAI,IACR,SAAA,CAAAlC,EAAAA,IAACkF,GAAK,SAAK,OAAA,CAAA,EACVnB,EAAQ,KACN,OAAQyB,GAAMA,EAAE,CAAC,IAAM,GAAG,EAC1B,IAAI,CAAC,CAACC,EAAGC,CAAG,UACVC,GAAe,CAAA,SAAAD,GAANA,CAAU,CACrB,CAAA,EACL,EACCxF,EAAA,KAAAgD,EAAA,CAAY,QAAQ,QAAQ,KAAK,KAChC,SAAA,CAAClD,EAAAA,IAAAoD,EAAA,CAAc,MAAOW,CAAS,CAAA,EAC/B/D,EAAAA,IAAC4F,GAAiB,CAAA,MAAO7B,CAAS,CAAA,QACjC/B,EAAO,CAAA,GAAI6D,GAAM,eAAWC,GAAO,CAAA,QAAS,CAAG,CAAA,EAAI,KAAMC,GAAqBhC,CAAO,EAAG,WAAU,GAAC,SAEpG,mBAAA,CAAA,EACF,CAAA,EACF,EACCA,EAAQ,QAAQ,OAAS,GAEtB7D,EAAAA,KAAAD,EAAAA,SAAA,CAAA,SAAA,CAAAD,MAACiF,EAAQ,CAAA,KAAK,KAAK,GAAG,IAAI,SAE1B,cAAA,EACAjF,EAAAA,IAACqF,GAAK,EAAE,IACN,eAACzC,EAAiB,CAAA,MAAOmB,EAAS,CACpC,CAAA,CAAA,EACF,QAEDkB,EAAQ,CAAA,KAAK,KAAK,GAAG,IAAI,SAE1B,QAAA,EACAjF,EAAA,IAACqF,GAAK,EAAE,IACN,eAACW,GACC,CAAA,SAAA9F,EAAA,KAAC+F,GAAM,CAAA,KAAK,KACV,SAAA,CAACjG,EAAA,IAAAkG,GAAA,CACC,gBAACC,EACC,CAAA,SAAA,CAAAnG,EAAAA,IAACoG,GAAG,SAAQ,UAAA,CAAA,EACZpG,EAAAA,IAACoG,GAAG,SAAI,MAAA,CAAA,CAAA,CAAA,CACV,CACF,CAAA,QACCC,GACE,CAAA,SAAAvB,EAAM,IAAKwB,UACTH,EACC,CAAA,SAAA,CAACnG,EAAAA,IAAAuG,EAAA,CAAI,WAAK,IAAK,CAAA,QACdA,EAAI,CAAA,SAAAjB,EAAYgB,EAAK,MAAQ,CAAC,EAAE,CAF1B,CAAA,EAAAA,EAAK,IAGd,CACD,EACH,CAAA,CACF,CAAA,CACF,CAAA,EACF,EAEApG,EAAAA,KAACgC,EAAK,CAAA,IAAI,IACR,SAAA,CAAAlC,MAACiF,EAAQ,CAAA,KAAK,KAAK,GAAG,IAAI,SAE1B,WAAA,EACC,CAAC/D,EAAU,QACTlB,MAAAgC,EAAA,CAAO,SAAWhC,EAAAA,IAAA2E,GAAA,CAAoB,CAAA,EAAI,KAAK,KAAK,GAAG,OAAO,QAASzD,EAAU,OAAQ,SAE1F,cAAA,CAAA,EAEJ,EACCA,EAAU,QACTlB,EAAA,IAAC0D,EAAA,CACC,KAAM,CAAE,MAAOK,EAAS,KAAMyC,GAAoBzC,CAAO,EAAG,QAAa,IAAA,GAAM,EAC/E,SAAU7C,EAAU,QACpB,YAAaA,EAAU,QACvB,UAAWyC,CAAA,CACb,EAEF3D,MAAC8D,IAAgB,QAAAC,EAAkB,CACrC,CAAA,CAAA,CAEJ,CAEA,SAAwB0C,IAAqB,CACrC,MAAAC,EAAUC,GAAsB,IAAI,EACpC5C,EAAU6C,GAAeF,GAAA,YAAAA,EAAS,IAAIA,GAAA,YAAAA,EAAS,SAAU,CAAA,CAAE,EAEjE,OAAK3C,EAGF/D,EAAA,IAAA6G,GAAA,CACC,SAAC7G,EAAAA,IAAA6E,GAAA,CAAmB,QAAAd,EAAkB,CACxC,CAAA,EALmB/D,EAAA,IAAC8G,GAAQ,CAAA,CAAA,CAOhC"}