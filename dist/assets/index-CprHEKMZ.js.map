{"version":3,"file":"index-CprHEKMZ.js","sources":["../../src/views/dms/index.tsx"],"sourcesContent":["import { useMemo } from \"react\";\nimport { Card, CardBody, Flex, LinkBox, LinkOverlay, Text } from \"@chakra-ui/react\";\nimport { Outlet, Link as RouterLink, useLocation, useParams } from \"react-router-dom\";\nimport { useObservable } from \"applesauce-react\";\nimport { nip19 } from \"nostr-tools\";\n\nimport UserAvatar from \"../../components/user/user-avatar\";\nimport RequireCurrentAccount from \"../../providers/route/require-current-account\";\nimport Timestamp from \"../../components/timestamp\";\nimport PeopleListSelection from \"../../components/people-list-selection/people-list-selection\";\nimport PeopleListProvider, { usePeopleListContext } from \"../../providers/local/people-list-provider\";\nimport useCurrentAccount from \"../../hooks/use-current-account\";\nimport { KnownConversation, groupIntoConversations, hasResponded, identifyConversation } from \"../../helpers/nostr/dms\";\nimport IntersectionObserverProvider from \"../../providers/local/intersection-observer\";\nimport { useTimelineCurserIntersectionCallback } from \"../../hooks/use-timeline-cursor-intersection-callback\";\nimport TimelineActionAndStatus from \"../../components/timeline/timeline-action-and-status\";\nimport { useDMTimeline } from \"../../providers/global/dms-provider\";\nimport UserName from \"../../components/user/user-name\";\nimport { NostrEvent } from \"../../types/nostr-event\";\nimport { CheckIcon } from \"../../components/icons\";\nimport UserDnsIdentity from \"../../components/user/user-dns-identity\";\nimport useEventIntersectionRef from \"../../hooks/use-event-intersection-ref\";\nimport { useKind4Decrypt } from \"../../hooks/use-kind4-decryption\";\n\nfunction MessagePreview({ message, pubkey }: { message: NostrEvent; pubkey: string }) {\n  const ref = useEventIntersectionRef(message);\n\n  const { plaintext } = useKind4Decrypt(message);\n  return (\n    <Text isTruncated ref={ref}>\n      {plaintext || \"<Encrypted>\"}\n    </Text>\n  );\n}\n\nfunction ConversationCard({ conversation }: { conversation: KnownConversation }) {\n  const location = useLocation();\n  const lastReceived = conversation.messages.find((m) => m.pubkey === conversation.correspondent);\n  const lastMessage = conversation.messages[0];\n\n  const ref = useEventIntersectionRef(lastMessage);\n\n  return (\n    <LinkBox as={Card} size=\"sm\" ref={ref}>\n      <CardBody display=\"flex\" gap=\"2\" overflow=\"hidden\">\n        <UserAvatar pubkey={conversation.correspondent} />\n        <Flex direction=\"column\" gap=\"1\" overflow=\"hidden\" flex={1}>\n          <Flex gap=\"2\" alignItems=\"center\" overflow=\"hidden\">\n            <UserName pubkey={conversation.correspondent} isTruncated />\n            <UserDnsIdentity onlyIcon pubkey={conversation.correspondent} />\n            <Timestamp flexShrink={0} timestamp={lastMessage.created_at} ml=\"auto\" />\n            {hasResponded(conversation) && <CheckIcon boxSize={4} color=\"green.500\" />}\n          </Flex>\n          {lastReceived && <MessagePreview message={lastReceived} pubkey={lastReceived.pubkey} />}\n        </Flex>\n      </CardBody>\n      <LinkOverlay as={RouterLink} to={`/dm/${nip19.npubEncode(conversation.correspondent)}` + location.search} />\n    </LinkBox>\n  );\n}\n\nfunction DirectMessagesPage() {\n  const params = useParams();\n  const { people } = usePeopleListContext();\n\n  const account = useCurrentAccount()!;\n  const timeline = useDMTimeline();\n\n  const messages = useObservable(timeline.timeline) ?? [];\n  const conversations = useMemo(() => {\n    const conversations = groupIntoConversations(messages).map((c) => identifyConversation(c, account.pubkey));\n    const filtered = conversations.filter((conversation) =>\n      people ? people.some((p) => p.pubkey === conversation.correspondent) : true,\n    );\n\n    return filtered.sort((a, b) => b.messages[0].created_at - a.messages[0].created_at);\n  }, [messages, people, account.pubkey]);\n\n  const isChatOpen = !!params.pubkey;\n\n  const callback = useTimelineCurserIntersectionCallback(timeline);\n\n  return (\n    <Flex gap=\"4\" h={{ base: \"calc(100vh - 3.5rem)\", md: \"100vh\" }} overflow=\"hidden\">\n      <Flex\n        gap=\"2\"\n        direction=\"column\"\n        w={!isChatOpen ? { base: \"full\", lg: \"sm\" } : \"sm\"}\n        overflowX=\"hidden\"\n        overflowY=\"auto\"\n        py=\"2\"\n        px={{ base: \"2\", lg: 0 }}\n        hideBelow={!isChatOpen ? undefined : \"xl\"}\n      >\n        <Flex gap=\"2\">\n          <PeopleListSelection flexShrink={0} />\n        </Flex>\n        <IntersectionObserverProvider callback={callback}>\n          {conversations.map((conversation) => (\n            <ConversationCard key={conversation.pubkeys.join(\"-\")} conversation={conversation} />\n          ))}\n        </IntersectionObserverProvider>\n        <TimelineActionAndStatus timeline={timeline} />\n      </Flex>\n      <Flex gap=\"2\" direction=\"column\" flex={1} hideBelow={!isChatOpen ? \"xl\" : undefined} overflow=\"hidden\">\n        <Outlet />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default function DirectMessagesView() {\n  return (\n    <RequireCurrentAccount>\n      <PeopleListProvider initList=\"global\">\n        <DirectMessagesPage />\n      </PeopleListProvider>\n    </RequireCurrentAccount>\n  );\n}\n"],"names":["MessagePreview","message","pubkey","ref","useEventIntersectionRef","plaintext","useKind4Decrypt","Text","ConversationCard","conversation","location","useLocation","lastReceived","m","lastMessage","LinkBox","Card","jsxs","CardBody","jsx","UserAvatar","Flex","UserName","UserDnsIdentity","Timestamp","hasResponded","CheckIcon","LinkOverlay","RouterLink","nip19","DirectMessagesPage","params","useParams","people","usePeopleListContext","account","useCurrentAccount","timeline","useDMTimeline","messages","useObservable","conversations","useMemo","groupIntoConversations","c","identifyConversation","p","a","b","isChatOpen","callback","useTimelineCurserIntersectionCallback","PeopleListSelection","IntersectionObserverProvider","TimelineActionAndStatus","Outlet","DirectMessagesView","RequireCurrentAccount","PeopleListProvider"],"mappings":"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"}