{"version":3,"file":"relay-details-BwDZL9s8.js","sources":["../../src/views/relays/relay/relay-details.tsx"],"sourcesContent":["import { Button, Card, Flex, Heading, Text, useColorModeValue, useTheme, useToast } from \"@chakra-ui/react\";\n\nimport {\n  Chart as ChartJS,\n  ArcElement,\n  Tooltip,\n  Legend,\n  ChartData,\n  Colors,\n  Title,\n  LineElement,\n  PointElement,\n  LinearScale,\n  CategoryScale,\n} from \"chart.js\";\nimport { Filter } from \"nostr-tools\";\nimport _throttle from \"lodash.throttle\";\n\nimport { useAppTitle } from \"../../../hooks/use-app-title\";\nimport VerticalPageLayout from \"../../../components/vertical-page-layout\";\nimport { NostrEvent } from \"../../../types/nostr-event\";\nimport { groupByTime } from \"../../../helpers/notification\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport EventStore from \"../../../classes/event-store\";\nimport { getSortedKinds, sortByDate } from \"../../../helpers/nostr/event\";\nimport relayPoolService from \"../../../services/relay-pool\";\nimport EventKindsPieChart from \"../../../components/charts/event-kinds-pie-chart\";\nimport EventKindsTable from \"../../../components/charts/event-kinds-table\";\n\nChartJS.register(\n  ArcElement,\n  Tooltip,\n  Legend,\n  Colors,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n);\n\nfunction getMinMaxTime(events: NostrEvent[], timeBlock = 60 * 60) {\n  let minDate = Infinity;\n  let maxDate = -Infinity;\n\n  for (const event of events) {\n    if (event.created_at < minDate) minDate = Math.floor(event.created_at / timeBlock) * timeBlock;\n    if (event.created_at > maxDate) maxDate = Math.ceil(event.created_at / timeBlock) * timeBlock;\n  }\n\n  return { minDate, maxDate };\n}\n\nfunction buildLineChartData(events: NostrEvent[], timeBlock = 60 * 60): ChartData<\"line\", number[], string> {\n  let minDate = Infinity;\n  let maxDate = -Infinity;\n\n  const byKind: Record<number, NostrEvent[]> = {};\n  for (const event of events) {\n    byKind[event.kind] = byKind[event.kind] || [];\n    byKind[event.kind].push(event);\n\n    if (event.created_at < minDate) minDate = Math.floor(event.created_at / timeBlock) * timeBlock;\n    if (event.created_at > maxDate) maxDate = Math.ceil(event.created_at / timeBlock) * timeBlock;\n  }\n\n  if (minDate === Infinity || maxDate === -Infinity) return { labels: [], datasets: [] };\n\n  const byKindAndDate: Record<string, Record<number, NostrEvent[]>> = {};\n  for (const [kind, eventsByKind] of Object.entries(byKind)) {\n    const byTime: Record<number, NostrEvent[]> = groupByTime(eventsByKind, timeBlock).reduce(\n      (dir, group) => ({ ...dir, [group[0]]: group[1] }),\n      {},\n    );\n    for (let i = minDate; i < maxDate; i += timeBlock) {\n      if (!byTime[i]) byTime[i] = [];\n    }\n    byKindAndDate[kind] = byTime;\n  }\n\n  const sorted = Object.entries(byKindAndDate)\n    .map(([kind, data]) => ({ kind: parseInt(kind), data }))\n    .sort((a, b) => b.kind - a.kind);\n\n  return {\n    labels: Array((maxDate - minDate) / timeBlock).fill(\"\"),\n    datasets: sorted.map(({ data, kind }) => ({\n      label: String(kind),\n      data: Object.entries(data)\n        .sort((a, b) => parseInt(b[0]) - parseInt(a[0]))\n        .map((d) => d[1].length),\n    })),\n  };\n}\n\nexport default function RelayDetailsTab({ relay }: { relay: string }) {\n  useAppTitle(`${relay} - Details`);\n\n  const toast = useToast();\n  const theme = useTheme();\n  const token = theme.semanticTokens.colors[\"chakra-body-text\"];\n  const color = useColorModeValue(token._light, token._dark) as string;\n\n  const [_, update] = useState<Object>();\n  const store = useMemo(() => new EventStore(), []);\n\n  const [loading, setLoading] = useState(false);\n  const loadMore = useCallback(() => {\n    setLoading(true);\n    const query: Filter = { limit: 500 };\n    const last = store.getLastEvent();\n    if (last) query.until = last.created_at;\n\n    const throttleUpdate = _throttle(() => update({}), 100);\n    const sub = relayPoolService.requestRelay(relay).subscribe([query], {\n      onevent: (event) => {\n        store.addEvent(event);\n        throttleUpdate();\n      },\n      oneose: () => sub.close(),\n      onclose: (reason) => {\n        if (reason !== \"closed by caller\") toast({ status: \"error\", description: reason });\n        setLoading(false);\n      },\n    });\n  }, [relay, update, store]);\n\n  useEffect(() => loadMore(), [relay, loadMore]);\n\n  const events = Array.from(store.events.values()).sort(sortByDate);\n\n  const kinds = getSortedKinds(events);\n\n  return (\n    <VerticalPageLayout>\n      <Flex gap=\"2\" alignItems=\"center\">\n        <Text>Events loaded: {events.length}</Text>\n        <Button size=\"sm\" onClick={loadMore} isLoading={loading}>\n          Load more\n        </Button>\n      </Flex>\n      <Flex wrap=\"wrap\" gap=\"4\" alignItems=\"flex-start\">\n        <Card p=\"2\" w=\"50%\">\n          <Heading size=\"sm\">Events by kind</Heading>\n          <EventKindsPieChart kinds={kinds} />\n        </Card>\n        <Card p=\"2\" minW=\"xs\">\n          <EventKindsTable kinds={kinds} />\n        </Card>\n        {/* <Card p=\"2\" w=\"full\" aspectRatio={16 / 9}>\n          <Heading size=\"sm\">Event kinds over time</Heading>\n          <Line\n            data={buildLineChartData(events, 60)}\n            options={{ color, responsive: true, plugins: { colors: { forceOverride: true } } }}\n          />\n        </Card> */}\n      </Flex>\n    </VerticalPageLayout>\n  );\n}\n"],"names":["ChartJS","ArcElement","Tooltip","Legend","Colors","CategoryScale","LinearScale","PointElement","LineElement","Title","RelayDetailsTab","relay","useAppTitle","toast","useToast","token","useTheme","useColorModeValue","_","update","useState","store","useMemo","EventStore","loading","setLoading","loadMore","useCallback","query","last","throttleUpdate","_throttle","sub","relayPoolService","event","reason","useEffect","events","sortByDate","kinds","getSortedKinds","VerticalPageLayout","jsxs","Flex","Text","jsx","Button","Card","Heading","EventKindsPieChart","EventKindsTable"],"mappings":"kSA6BAA,EAAQ,SACNC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAP,CACF,EAwDwB,SAAAQ,EAAgB,CAAE,MAAAC,GAA4B,CACxDC,EAAA,GAAGD,CAAK,YAAY,EAEhC,MAAME,EAAQC,IAERC,EADQC,IACM,eAAe,OAAO,kBAAkB,EAC9CC,EAAkBF,EAAM,OAAQA,EAAM,KAAK,EAEzD,KAAM,CAACG,EAAGC,CAAM,EAAIC,EAAiB,SAAA,EAC/BC,EAAQC,EAAAA,QAAQ,IAAM,IAAIC,EAAc,CAAE,CAAA,EAE1C,CAACC,EAASC,CAAU,EAAIL,WAAS,EAAK,EACtCM,EAAWC,EAAAA,YAAY,IAAM,CACjCF,EAAW,EAAI,EACT,MAAAG,EAAgB,CAAE,MAAO,KACzBC,EAAOR,EAAM,eACfQ,IAAYD,EAAA,MAAQC,EAAK,YAE7B,MAAMC,EAAiBC,EAAU,IAAMZ,EAAO,CAAE,CAAA,EAAG,GAAG,EAChDa,EAAMC,EAAiB,aAAatB,CAAK,EAAE,UAAU,CAACiB,CAAK,EAAG,CAClE,QAAUM,GAAU,CAClBb,EAAM,SAASa,CAAK,EACLJ,GACjB,EACA,OAAQ,IAAME,EAAI,MAAM,EACxB,QAAUG,GAAW,CACfA,IAAW,oBAA0BtB,EAAA,CAAE,OAAQ,QAAS,YAAasB,EAAQ,EACjFV,EAAW,EAAK,CAClB,CAAA,CACD,CACA,EAAA,CAACd,EAAOQ,EAAQE,CAAK,CAAC,EAEzBe,EAAA,UAAU,IAAMV,EAAS,EAAG,CAACf,EAAOe,CAAQ,CAAC,EAEvC,MAAAW,EAAS,MAAM,KAAKhB,EAAM,OAAO,QAAQ,EAAE,KAAKiB,CAAU,EAE1DC,EAAQC,EAAeH,CAAM,EAEnC,cACGI,EACC,CAAA,SAAA,CAAAC,EAAA,KAACC,EAAK,CAAA,IAAI,IAAI,WAAW,SACvB,SAAA,CAAAD,OAACE,EAAK,CAAA,SAAA,CAAA,kBAAgBP,EAAO,MAAA,EAAO,EACpCQ,EAAAA,IAACC,GAAO,KAAK,KAAK,QAASpB,EAAU,UAAWF,EAAS,SAEzD,WAAA,CAAA,CAAA,EACF,SACCmB,EAAK,CAAA,KAAK,OAAO,IAAI,IAAI,WAAW,aACnC,SAAA,CAAAD,EAAA,KAACK,EAAK,CAAA,EAAE,IAAI,EAAE,MACZ,SAAA,CAACF,EAAA,IAAAG,EAAA,CAAQ,KAAK,KAAK,SAAc,iBAAA,EACjCH,MAACI,GAAmB,MAAAV,EAAc,CAAA,EACpC,EACAM,EAAAA,IAACE,GAAK,EAAE,IAAI,KAAK,KACf,SAAAF,EAAA,IAACK,EAAgB,CAAA,MAAAX,CAAA,CAAc,CACjC,CAAA,CAAA,EAQF,CACF,CAAA,CAAA,CAEJ"}